{"projectName":"DVD","luName":"k2_ws","ludbDatabaseName":"k2_ws","version":"0000000000","automaticGenerationFK":false,"dataEncryption":false,"ludbProjectVersion":null,"projectFullPath":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD","ludbDBInterface":null,"ludbProperties":null,"preVCsSqlCode":null,"postVCsSqlCode":null,"ludbGlobals":{"MASK_FLAG":"1","SHARED_MEMORY_HOST_NAME":"localhost","SHARED_MEMORY_HOST_PORT":"6379","SHARED_MEMORY_COMPRESSED_FLAG":"0","SHARED_MEMORY_EXPIRATION":"86400","REPLACE_APOSTROPHE_FLAG":"1","MAX_NUM_OF_ITERATION":"10000","DB_INTERFACE_NAME":"ludb","FLAG_ENABLED":"1","TRN_ACTIVE_COLUMN_HEADER":"ACTIVE","TRN_PARAMETERS_COLUMN_HEADER":"PARAMETERS","TRN_ENCRYPTION_COLUMN_HEADER":"ENCRYPTION","TRN_FIELD_NAME_COLUMN_HEADER":"FIELD_NAME","TRN_TABLE_NAME_COLUMN_HEADER":"TABLE_NAME","NUMBER_REGEX":"\\\\d+","TRN_MASKING":"trnMasking","SHARED_TRN_MASKING":"strnMasking","DATE_FORMAT":"yyyy-MM-dd","RANDOM_ENCRYPTION":"RANDOM","SHARED_MEMORY_FLUSH_ALL":"0"},"ludbTranslations":{"strnMasking":{"Input":["INDEX"],"Output":["TABLE_NAME","FIELD_NAME","ENCRYPTION","PARAMETERS","ACTIVE"],"defualtValues":{"TABLE_NAME":null,"FIELD_NAME":null,"ENCRYPTION":null,"PARAMETERS":null,"ACTIVE":null},"translationAction":"Reject_Record","objectName":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Translations\/strnMasking.k2trans.xml","isDynamicData":false,"data":{}},"trnRefTable2Dc":{"Input":["TABLE_NAME"],"Output":["DC"],"defualtValues":{"DC":null},"translationAction":"Use_Default","objectName":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Translations\/trnRefTable2Dc.k2trans.xml","isDynamicData":false,"data":{"customer_multi":{"DC":"DC1"},"customer_multi_2":{"DC":"DC1"},"customer_multi_3":{"DC":"DC1"},"customer_multi_4":{"DC":"DC1"},"customer_multi_5":{"DC":"DC1"},"customer_multi_6":{"DC":"DC1"},"customer_multi_7":{"DC":"DC1"},"Multi_actor":{"DC":"DC1"},"Multi_city":{"DC":"DC1"},"Multi_country":{"DC":"DC1"},"Multi_film_actor":{"DC":"DC1"}}}},"ludbFunctions":{"wsGetCustomerInfo":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.4.0.14"},"Name":{"value":"wsGetCustomerInfo"},"ID":{"value":"WsCustomerInfo.wsGetCustomerInfo"},"Category":{"value":"WsCustomerInfo"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"WebService"},"FunctionType2":{"value":"WebService"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Language":{"value":"Java"},"FunctionBody":{"value":"log.info(\"Ws wsGetCustomerInfo is running\");\nMap<String, String> requestHeaders = getRequestHeaders();\nObject[] fields = Utils.class.getFields();\nfor (Object row : fields) {\n\t log.info(\"CLASS FIELDS ARE:\"+row);\n}\nlog.info(com.k2view.cdbms.shared.UserUtils.WEB_SERVICE_DB_PASSWORD);\nrequestHeaders.forEach((k,v) -> {\n\tlog.info(\"KEY IS:\"+k+\" VALUE IS:\"+v);\n});\nDBExecute(\"fabric\",\"get DVD.\"+ customerId, null);\nObject [] param = new Object[]{customerId};\nString sql = \"SELECT * FROM STORE\";\nResultSetWrapper rs = DBQuery(\"fabric\",sql,null);\nMap <String, Object> retrunMap = new LinkedHashMap<String,Object>();\nretrunMap.put(\"Store\",rs.getResults());\nreturn retrunMap;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"customerId","id":"fi.WsCustomerInfo.wsGetCustomerInfo.0","index":"0","dataType":"Integer"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"res","id":"fo.WsCustomerInfo.wsGetCustomerInfo.0","index":"0","dataType":"Map<String,Object>"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsGetCustomerInfo.k2function.xml","createFunctionStrForWS":"function wsGetCustomerInfo($customerId){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsGetCustomerInfo.k2function.xml';\r\nlog.info(\"Ws wsGetCustomerInfo is running\");\nMap<String, String> requestHeaders = getRequestHeaders();\nObject[] fields = Utils.class.getFields();\nfor (Object row : fields) {\n\t log.info(\"CLASS FIELDS ARE:\"+row);\n}\nlog.info(com.k2view.cdbms.shared.UserUtils.WEB_SERVICE_DB_PASSWORD);\nrequestHeaders.forEach((k,v) -> {\n\tlog.info(\"KEY IS:\"+k+\" VALUE IS:\"+v);\n});\nDBExecute(\"fabric\",\"get DVD.\"+ customerId, null);\nObject [] param = new Object[]{customerId};\nString sql = \"SELECT * FROM STORE\";\nResultSetWrapper rs = DBQuery(\"fabric\",sql,null);\nMap <String, Object> retrunMap = new LinkedHashMap<String,Object>();\nretrunMap.put(\"Store\",rs.getResults());\nreturn retrunMap;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsGetCustomerInfo.k2function.xml';\r\nfunction wsGetCustomerInfo($customerId){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsGetCustomerInfo.k2function.xml';\r\nlog.info(\"Ws wsGetCustomerInfo is running\");\nMap<String, String> requestHeaders = getRequestHeaders();\nObject[] fields = Utils.class.getFields();\nfor (Object row : fields) {\n\t log.info(\"CLASS FIELDS ARE:\"+row);\n}\nlog.info(com.k2view.cdbms.shared.UserUtils.WEB_SERVICE_DB_PASSWORD);\nrequestHeaders.forEach((k,v) -> {\n\tlog.info(\"KEY IS:\"+k+\" VALUE IS:\"+v);\n});\nDBExecute('k2_ws:'.\"fabric\",\"get DVD.\"+ customerId, null);\nObject [] param = new Object[]{customerId};\nString sql = \"SELECT * FROM STORE\";\nResultSetWrapper rs = DBQuery(\"fabric\",sql,null);\nMap <String, Object> retrunMap = new LinkedHashMap<String,Object>();\nretrunMap.put(\"Store\",rs.getResults());\nreturn retrunMap;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"lu"},"wsOracleQuery":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.2.0.3"},"Name":{"value":"wsOracleQuery"},"ID":{"value":"WsCustomerInfo.wsOracleQuery"},"Category":{"value":"WsCustomerInfo"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"WebService"},"FunctionType2":{"value":"WebService"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"Object rs = null;\nDBExecute(\"fabric\", \"get DVD.1\", null);\n\nString sql = \"select customer_id from customer where customer_id = ? \";\nObject[] values = new Object[]{1};\nvalues = null;\ntry{\n\trs =  DBSelectValue(\"fabric\", sql, values);\n}catch(Exception e){\n\tlog.info(\"Exception msg - \" + e.getMessage());\n}\nreturn rs;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"result","id":"fo.WsCustomerInfo.wsOracleQuery.0","index":"0","dataType":"Object"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsOracleQuery.k2function.xml","createFunctionStrForWS":"function wsOracleQuery(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsOracleQuery.k2function.xml';\r\nObject rs = null;\nDBExecute(\"fabric\", \"get DVD.1\", null);\n\nString sql = \"select customer_id from customer where customer_id = ? \";\nObject[] values = new Object[]{1};\nvalues = null;\ntry{\n\trs =  DBSelectValue(\"fabric\", sql, values);\n}catch(Exception e){\n\tlog.info(\"Exception msg - \" + e.getMessage());\n}\nreturn rs;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsOracleQuery.k2function.xml';\r\nfunction wsOracleQuery(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsOracleQuery.k2function.xml';\r\nObject rs = null;\nDBExecute('k2_ws:'.\"fabric\", \"get DVD.1\", null);\n\nString sql = \"select customer_id from customer where customer_id = ? \";\nObject[] values = new Object[]{1};\nvalues = null;\ntry{\n\trs =  DBSelectValue('k2_ws:'.\"fabric\", sql, values);\n}catch(Exception e){\n\tlog.info(\"Exception msg - \" + e.getMessage());\n}\nreturn rs;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"lu"},"wsTestDbTemp":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.4.0.14"},"Name":{"value":"wsTestDbTemp"},"ID":{"value":"WsCustomerInfo.wsTestDbTemp"},"Category":{"value":"WsCustomerInfo"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"WebService"},"FunctionType2":{"value":"WebService"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Language":{"value":"Java"},"FunctionBody":{"value":"QueryExecutor queryExecutor = getQueryExecutor(\"fabric\");\nDbTemplate template = new DbTemplate(\"DBTestTemplate.xml\", queryExecutor);\nDBExecute(\"fabric\", \"get DVD.\" + i_id, null);\nreturn template.execute(null); "},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"i_id","id":"fi.WsCustomerInfo.wsTestDbTemp.0","index":"0","dataType":"String"}}},"OutputParams":{"Output":{"attr":{"name":"o_xml","id":"fo.WsCustomerInfo.wsTestDbTemp.0","index":"0","dataType":"Object"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsTestDbTemp.k2function.xml","createFunctionStrForWS":"function wsTestDbTemp($i_id){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsTestDbTemp.k2function.xml';\r\nQueryExecutor queryExecutor = getQueryExecutor(\"fabric\");\nDbTemplate template = new DbTemplate(\"DBTestTemplate.xml\", queryExecutor);\nDBExecute(\"fabric\", \"get DVD.\" + i_id, null);\nreturn template.execute(null); \n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsTestDbTemp.k2function.xml';\r\nfunction wsTestDbTemp($i_id){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsTestDbTemp.k2function.xml';\r\nQueryExecutor queryExecutor = getQueryExecutor(\"fabric\");\nDbTemplate template = new DbTemplate(\"DBTestTemplate.xml\", queryExecutor);\nDBExecute('k2_ws:'.\"fabric\", \"get DVD.\" + i_id, null);\nreturn template.execute(null); \n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"lu"},"wsValidateUsAddress":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.1.0.0"},"Name":{"value":"wsValidateUsAddress"},"ID":{"value":"WsCustomerInfo.wsValidateUsAddress"},"Category":{"value":"WsCustomerInfo"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"WebService"},"FunctionType2":{"value":"WebService"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"return fnCheckUsAddress(UserId,address,city,State,Zip);"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"UserId","id":"fi.WsCustomerInfo.wsValidateUsAddress.0","index":"0","dataType":"String"}},{"attr":{"name":"address","id":"fi.WsCustomerInfo.wsValidateUsAddress.1","index":"1","dataType":"String"}},{"attr":{"name":"city","id":"fi.WsCustomerInfo.wsValidateUsAddress.2","index":"2","dataType":"String"}},{"attr":{"name":"State","id":"fi.WsCustomerInfo.wsValidateUsAddress.3","index":"3","dataType":"String"}},{"attr":{"name":"Zip","id":"fi.WsCustomerInfo.wsValidateUsAddress.4","index":"4","dataType":"String"}}]},"OutputParams":{"Output":{"attr":{"name":"res","id":"fo.WsCustomerInfo.wsValidateUsAddress.0","index":"0","dataType":"Object"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsValidateUsAddress.k2function.xml","createFunctionStrForWS":"function wsValidateUsAddress($UserId,$address,$city,$State,$Zip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsValidateUsAddress.k2function.xml';\r\nreturn fnCheckUsAddress(UserId,address,city,State,Zip);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsValidateUsAddress.k2function.xml';\r\nfunction wsValidateUsAddress($UserId,$address,$city,$State,$Zip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/Functions\/WsCustomerInfo\/wsValidateUsAddress.k2function.xml';\r\nreturn fnCheckUsAddress(UserId,address,city,State,Zip);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"lu"},"fnCheckInputs":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.1.0.0"},"Name":{"value":"fnCheckInputs"},"ID":{"value":"addresCheck.fnCheckInputs"},"Category":{"value":"addresCheck"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(Address.equalsIgnoreCase(\"\"))return \"Addrss\";\nif(City.equalsIgnoreCase(\"\"))return \"City\";\nif(State.equalsIgnoreCase(\"\"))return \"State\";\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"Address","id":"fi.addresCheck.fnCheckInputs.0","index":"0","dataType":"String"}},{"attr":{"name":"City","id":"fi.addresCheck.fnCheckInputs.1","index":"1","dataType":"String"}},{"attr":{"name":"State","id":"fi.addresCheck.fnCheckInputs.2","index":"2","dataType":"String"}}]},"OutputParams":{"Output":{"attr":{"name":"res","id":"fo.addresCheck.fnCheckInputs.0","index":"0","dataType":"String"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckInputs.k2function.xml","createFunctionStrForWS":"function fnCheckInputs($Address,$City,$State){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckInputs.k2function.xml';\r\nif(Address.equalsIgnoreCase(\"\"))return \"Addrss\";\nif(City.equalsIgnoreCase(\"\"))return \"City\";\nif(State.equalsIgnoreCase(\"\"))return \"State\";\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckInputs.k2function.xml';\r\nfunction fnCheckInputs($Address,$City,$State){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckInputs.k2function.xml';\r\nif(Address.equalsIgnoreCase(\"\"))return \"Addrss\";\nif(City.equalsIgnoreCase(\"\"))return \"City\";\nif(State.equalsIgnoreCase(\"\"))return \"State\";\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnCheckUsAddress":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.2.0.3"},"Name":{"value":"fnCheckUsAddress"},"ID":{"value":"addresCheck.fnCheckUsAddress"},"Category":{"value":"addresCheck"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"final String newLine = System.getProperty(\"line.separator\");\nString chkFileds = fnCheckInputs(Address,City,State);\nif(chkFileds != null){\n\t\t\tMap<String,Object> respCheckCol = new LinkedHashMap<String,Object>();\n\t\t\tMap<String,Object> responce = new LinkedHashMap<String,Object>();\n\t\t\tresponce.put(\"Address\", Address);\n\t\t\tresponce.put(\"City\", City);\n\t\t\tresponce.put(\"State\", State);\n\t\t\tresponce.put(\"Zip\", zip);\n\t\t\trespCheckCol.put(\"Responce\", \"Failure\");\n\t\t\trespCheckCol.put(\"Error Details\", \"Field \"+chkFileds+\" can't be empty\");\n\t\t\trespCheckCol.put(\"Adress Details\", responce);\n\t\t\treturn respCheckCol;}\njava.net.URL url;\nString CusAdress = \"<AddressValidateRequest USERID=\\\"\"+UserId+\"\\\"><IncludeOptionalElements>true<\/IncludeOptionalElements>\"+ \n\t\t\t\t \"<ReturnCarrierRoute>true<\/ReturnCarrierRoute><Address ID=\\\"0\\\">\"+\n\t\t\t\t \"<FirmName \/><Address1\/><Address2>\"+Address+\"<\/Address2><City>\"+City+\"<\/City>\"+\n\t\t\t\t \"<State>\"+State+\"<\/State><Zip5>\"+zip+\"<\/Zip5><Zip4><\/Zip4><\/Address><\/AddressValidateRequest>\";\ntry {\n  String urlAddress = \"http:\/\/production.shippingapis.com\/ShippingAPI.dll?API=Verify&XML=\"+CusAdress; \n  urlAddress = urlAddress.replaceAll(\" \", \"%20\");\n  url = new java.net.URL(urlAddress);\n  java.net.HttpURLConnection connection = (java.net.HttpURLConnection)url.openConnection();\n  connection.setUseCaches (false);\n  connection.setDoInput(true);\n  connection.setDoOutput(true);\n  \n  \/\/Send request\n  DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());\n  \/\/wr.writeBytes (urlParameters);\n  wr.flush ();\n  wr.close ();\n  \/\/Get Response\t\n  InputStream is = connection.getInputStream();\n  BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n  String line;\n  StringBuffer response = new StringBuffer(); \n  while((line = rd.readLine()) != null) {\n    response.append(line);\n    response.append('\\r');\n  }\n  rd.close();\n  \/\/return fnParseXmlAnswer(response.toString(), Address, City, State, zip);\nreturn null;\n} catch (Exception e) {\n\tthrow new Exception(e.getMessage());\n}\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"UserId","id":"fi.addresCheck.fnCheckUsAddress.0","index":"0","dataType":"String"}},{"attr":{"name":"Address","id":"fi.addresCheck.fnCheckUsAddress.1","index":"1","dataType":"String"}},{"attr":{"name":"City","id":"fi.addresCheck.fnCheckUsAddress.2","index":"2","dataType":"String"}},{"attr":{"name":"State","id":"fi.addresCheck.fnCheckUsAddress.3","index":"3","dataType":"String"}},{"attr":{"name":"zip","id":"fi.addresCheck.fnCheckUsAddress.4","index":"4","dataType":"String"}}]},"OutputParams":{"Output":{"attr":{"name":"res","id":"fo.addresCheck.fnCheckUsAddress.0","index":"0","dataType":"Object"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckUsAddress.k2function.xml","createFunctionStrForWS":"function fnCheckUsAddress($UserId,$Address,$City,$State,$zip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckUsAddress.k2function.xml';\r\nfinal String newLine = System.getProperty(\"line.separator\");\nString chkFileds = fnCheckInputs(Address,City,State);\nif(chkFileds != null){\n\t\t\tMap<String,Object> respCheckCol = new LinkedHashMap<String,Object>();\n\t\t\tMap<String,Object> responce = new LinkedHashMap<String,Object>();\n\t\t\tresponce.put(\"Address\", Address);\n\t\t\tresponce.put(\"City\", City);\n\t\t\tresponce.put(\"State\", State);\n\t\t\tresponce.put(\"Zip\", zip);\n\t\t\trespCheckCol.put(\"Responce\", \"Failure\");\n\t\t\trespCheckCol.put(\"Error Details\", \"Field \"+chkFileds+\" can't be empty\");\n\t\t\trespCheckCol.put(\"Adress Details\", responce);\n\t\t\treturn respCheckCol;}\njava.net.URL url;\nString CusAdress = \"<AddressValidateRequest USERID=\\\"\"+UserId+\"\\\"><IncludeOptionalElements>true<\/IncludeOptionalElements>\"+ \n\t\t\t\t \"<ReturnCarrierRoute>true<\/ReturnCarrierRoute><Address ID=\\\"0\\\">\"+\n\t\t\t\t \"<FirmName \/><Address1\/><Address2>\"+Address+\"<\/Address2><City>\"+City+\"<\/City>\"+\n\t\t\t\t \"<State>\"+State+\"<\/State><Zip5>\"+zip+\"<\/Zip5><Zip4><\/Zip4><\/Address><\/AddressValidateRequest>\";\ntry {\n  String urlAddress = \"http:\/\/production.shippingapis.com\/ShippingAPI.dll?API=Verify&XML=\"+CusAdress; \n  urlAddress = urlAddress.replaceAll(\" \", \"%20\");\n  url = new java.net.URL(urlAddress);\n  java.net.HttpURLConnection connection = (java.net.HttpURLConnection)url.openConnection();\n  connection.setUseCaches (false);\n  connection.setDoInput(true);\n  connection.setDoOutput(true);\n  \n  \/\/Send request\n  DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());\n  \/\/wr.writeBytes (urlParameters);\n  wr.flush ();\n  wr.close ();\n  \/\/Get Response\t\n  InputStream is = connection.getInputStream();\n  BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n  String line;\n  StringBuffer response = new StringBuffer(); \n  while((line = rd.readLine()) != null) {\n    response.append(line);\n    response.append('\\r');\n  }\n  rd.close();\n  \/\/return fnParseXmlAnswer(response.toString(), Address, City, State, zip);\nreturn null;\n} catch (Exception e) {\n\tthrow new Exception(e.getMessage());\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckUsAddress.k2function.xml';\r\nfunction fnCheckUsAddress($UserId,$Address,$City,$State,$zip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/addresCheck\/fnCheckUsAddress.k2function.xml';\r\nfinal String newLine = System.getProperty(\"line.separator\");\nString chkFileds = fnCheckInputs(Address,City,State);\nif(chkFileds != null){\n\t\t\tMap<String,Object> respCheckCol = new LinkedHashMap<String,Object>();\n\t\t\tMap<String,Object> responce = new LinkedHashMap<String,Object>();\n\t\t\tresponce.put(\"Address\", Address);\n\t\t\tresponce.put(\"City\", City);\n\t\t\tresponce.put(\"State\", State);\n\t\t\tresponce.put(\"Zip\", zip);\n\t\t\trespCheckCol.put(\"Responce\", \"Failure\");\n\t\t\trespCheckCol.put(\"Error Details\", \"Field \"+chkFileds+\" can't be empty\");\n\t\t\trespCheckCol.put(\"Adress Details\", responce);\n\t\t\treturn respCheckCol;}\njava.net.URL url;\nString CusAdress = \"<AddressValidateRequest USERID=\\\"\"+UserId+\"\\\"><IncludeOptionalElements>true<\/IncludeOptionalElements>\"+ \n\t\t\t\t \"<ReturnCarrierRoute>true<\/ReturnCarrierRoute><Address ID=\\\"0\\\">\"+\n\t\t\t\t \"<FirmName \/><Address1\/><Address2>\"+Address+\"<\/Address2><City>\"+City+\"<\/City>\"+\n\t\t\t\t \"<State>\"+State+\"<\/State><Zip5>\"+zip+\"<\/Zip5><Zip4><\/Zip4><\/Address><\/AddressValidateRequest>\";\ntry {\n  String urlAddress = \"http:\/\/production.shippingapis.com\/ShippingAPI.dll?API=Verify&XML=\"+CusAdress; \n  urlAddress = urlAddress.replaceAll(\" \", \"%20\");\n  url = new java.net.URL(urlAddress);\n  java.net.HttpURLConnection connection = (java.net.HttpURLConnection)url.openConnection();\n  connection.setUseCaches (false);\n  connection.setDoInput(true);\n  connection.setDoOutput(true);\n  \n  \/\/Send request\n  DataOutputStream wr = new DataOutputStream (connection.getOutputStream ());\n  \/\/wr.writeBytes (urlParameters);\n  wr.flush ();\n  wr.close ();\n  \/\/Get Response\t\n  InputStream is = connection.getInputStream();\n  BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n  String line;\n  StringBuffer response = new StringBuffer(); \n  while((line = rd.readLine()) != null) {\n    response.append(line);\n    response.append('\\r');\n  }\n  rd.close();\n  \/\/return fnParseXmlAnswer(response.toString(), Address, City, State, zip);\nreturn null;\n} catch (Exception e) {\n\tthrow new Exception(e.getMessage());\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2s_MaskAllLuTables":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2s_MaskAllLuTables"},"ID":{"value":"CoreDataMasking.k2s_MaskAllLuTables"},"Category":{"value":"CoreDataMasking"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"The function runs k2s_MaskTable for every table in the LU Database "},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (MASK_FLAG.equals(FLAG_ENABLED)){\n\t\n\tif(FLAG_ENABLED.equals(SHARED_MEMORY_FLUSH_ALL)){\n\t\tredis.clients.jedis.Jedis jds = null;\n\t\ttry{\n\t\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\t\tif(jds!=null){\n\t\t\t\tjds.flushDB();\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\tthrow new Exception(\"Could not flush Redis DB.\",e.getCause());\n\t\t}finally{\n\t\t\tcloseJedisConnection(jds);\n\t\t}\n\t}\n\t\n\t\/\/Get the translation data\n\tMap<String,Map<String,String>> data = getTranslationsData(TRN_MASKING);\n\tMap<String, String> tableIndexMap = new HashMap<String, String>();\n\tMap<Integer, String> indexTableMap = new TreeMap<Integer, String>();\n\tString tableName = null;\n\t\/\/\/\/ Read the encryption information for iTableName from the trnMasking translation.\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\ttableName = valMap.get(TRN_TABLE_NAME_COLUMN_HEADER);\n\t\tif(tableIndexMap.get(tableName) == null){\n\t\t\ttableIndexMap.put(tableName, index);\n\t\t\tindexTableMap.put(new Integer(index), tableName);\n\t\t}\n\t}\n\t\/\/ Run the k2_MaskTable function based on the order above:\n\tfor(Integer index: indexTableMap.keySet()){\n\t\tk2s_MaskTable(indexTableMap.get(index));\n\t}\n\t\/\/clear the Globals of this thread\n\tclearThreadGlobals();\n}"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":[],"OutputParams":[],"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskAllLuTables.k2function.xml","createFunctionStrForWS":"function k2s_MaskAllLuTables(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskAllLuTables.k2function.xml';\r\nif (MASK_FLAG.equals(FLAG_ENABLED)){\n\t\n\tif(FLAG_ENABLED.equals(SHARED_MEMORY_FLUSH_ALL)){\n\t\tredis.clients.jedis.Jedis jds = null;\n\t\ttry{\n\t\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\t\tif(jds!=null){\n\t\t\t\tjds.flushDB();\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\tthrow new Exception(\"Could not flush Redis DB.\",e.getCause());\n\t\t}finally{\n\t\t\tcloseJedisConnection(jds);\n\t\t}\n\t}\n\t\n\t\/\/Get the translation data\n\tMap<String,Map<String,String>> data = getTranslationsData(TRN_MASKING);\n\tMap<String, String> tableIndexMap = new HashMap<String, String>();\n\tMap<Integer, String> indexTableMap = new TreeMap<Integer, String>();\n\tString tableName = null;\n\t\/\/\/\/ Read the encryption information for iTableName from the trnMasking translation.\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\ttableName = valMap.get(TRN_TABLE_NAME_COLUMN_HEADER);\n\t\tif(tableIndexMap.get(tableName) == null){\n\t\t\ttableIndexMap.put(tableName, index);\n\t\t\tindexTableMap.put(new Integer(index), tableName);\n\t\t}\n\t}\n\t\/\/ Run the k2_MaskTable function based on the order above:\n\tfor(Integer index: indexTableMap.keySet()){\n\t\tk2s_MaskTable(indexTableMap.get(index));\n\t}\n\t\/\/clear the Globals of this thread\n\tclearThreadGlobals();\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskAllLuTables.k2function.xml';\r\nfunction k2s_MaskAllLuTables(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskAllLuTables.k2function.xml';\r\nif (MASK_FLAG.equals(FLAG_ENABLED)){\n\t\n\tif(FLAG_ENABLED.equals(SHARED_MEMORY_FLUSH_ALL)){\n\t\tredis.clients.jedis.Jedis jds = null;\n\t\ttry{\n\t\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\t\tif(jds!=null){\n\t\t\t\tjds.flushDB();\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\tthrow new Exception(\"Could not flush Redis DB.\",e.getCause());\n\t\t}finally{\n\t\t\tcloseJedisConnection(jds);\n\t\t}\n\t}\n\t\n\t\/\/Get the translation data\n\tMap<String,Map<String,String>> data = getTranslationsData(TRN_MASKING);\n\tMap<String, String> tableIndexMap = new HashMap<String, String>();\n\tMap<Integer, String> indexTableMap = new TreeMap<Integer, String>();\n\tString tableName = null;\n\t\/\/\/\/ Read the encryption information for iTableName from the trnMasking translation.\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\ttableName = valMap.get(TRN_TABLE_NAME_COLUMN_HEADER);\n\t\tif(tableIndexMap.get(tableName) == null){\n\t\t\ttableIndexMap.put(tableName, index);\n\t\t\tindexTableMap.put(new Integer(index), tableName);\n\t\t}\n\t}\n\t\/\/ Run the k2_MaskTable function based on the order above:\n\tfor(Integer index: indexTableMap.keySet()){\n\t\tk2s_MaskTable(indexTableMap.get(index));\n\t}\n\t\/\/clear the Globals of this thread\n\tclearThreadGlobals();\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2s_MaskField":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"2.3.0.1"},"Name":{"value":"k2s_MaskField"},"ID":{"value":"CoreDataMasking.k2s_MaskField"},"Category":{"value":"CoreDataMasking"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"LudbFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask (obfuscate) a field based on the $iEncryption value.\nIt will add the value of the first number of the $iEncryption number to the ASCII value \nof the first character of the $iFieldValue and translate it back to its Char value."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/Null check\nif(iFieldValue == null || iFieldValue.isEmpty()) return iFieldValue;\n\nint valueLength = iFieldValue.length();\nint encryptionLength = iEncryption.length();\nString newEncryption = iEncryption;\n\n\/\/ If the length of the iEncryption is smaller than the length of the iFieldValue,\n\/\/ Append the iEncryption to itself as many times as needed to match the length of iFieldValue.\nwhile(encryptionLength < valueLength){\n\t\/\/ Append iEncryption to itself.\n\tnewEncryption = newEncryption + iEncryption;\n\t\/\/ Checks the length of the new iEncryption.\n\tencryptionLength = newEncryption.length();\n}\n\nString oMaksedField = \"\";\nnewEncryption = newEncryption.substring(0,valueLength);\n\n\/\/if iFieldValue is numeric\n\/\/ If it is, it will use the same encryption but on a cycle of 0-9\n\/\/ As an example, if $iFieldValue = 92 and $iEncryption = 86\n\/\/ The function will add 9 + 8 = 17 and will change it to 7\n\/\/ And 2 + 6 = 8 and will leave it as 8, so the final masked value is 78.\nif(iFieldValue.matches(NUMBER_REGEX)){\t\n\tint tempRes = 0;\n\t\/\/ Goes number by number in iFieldValue and adds it's equivalent iEncryption number.\n\tfor(int i=0;i<valueLength;i++){\n\t\ttempRes = (Character.getNumericValue(iFieldValue.charAt(i)) + \n\t\t\t\t\tCharacter.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\toMaksedField = oMaksedField + Integer.toString(tempRes);\n\t\ttempRes = 0;\n\t}\n}\n\/\/ In case iFieldValue is a non-numeric value.\n\/\/ Mask every alphanumeric charecter using the same logic.\n\/\/ First convert the alphanumeric charecter into ASCII, then add the equivalent value from iEncryption\n\/\/ Lastly, convert the new ASCII value back to Char.\nelse{\n\tString maskedFieldValue = iFieldValue;\n\tchar currentChar;\n\tint charecterASCII = 0;\n\tint maskedASCII = 0;\n\tchar maskedChar;\n\t\/\/ Go charecter by charecter and check if it's alphanumeric,\n\t\/\/ If it is mask it, if not, leave it as is.\n\tfor(int i = 0 ; i < valueLength ; i++){\n\t\t\/\/ Extract the current charecter from the iFieldValue argument.\n\t\tcurrentChar = iFieldValue.charAt(i);\n\t\t\n\t\t\/\/ If charecter is alphanumeric.\n\t\tif(Character.isDigit(currentChar) || Character.isLetter(currentChar)){\n\t\t\t\n\t\t\t\/\/ Convert the current charecter into ASCII format\n\t\t\tcharecterASCII = (int)currentChar;\n\t\t\t\n\t\t\t\/\/ Check the range of the alphanumeric charecter\n\t\t\tif(Character.isDigit(currentChar)){ \/\/ If 0-9 (same as - \"is_numeric($charecterValue)\")\n\n\t\t\t\t\/\/ Update the specific charecter in the value.\n\t\t\t\tmaskedASCII = (Character.getNumericValue(currentChar) + Character.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\t\t\tmaskedChar = (Integer.toString(maskedASCII)).charAt(0);\n\t\t\t\t\n\t\t\t} else if(Character.isUpperCase(currentChar)){ \/\/ If A-Z (upper case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\t\/\/ Update the masked value.\n\t\t\t\tmaskedChar = (maskedASCII>90)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t} else { \/\/ if a-z (lower case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\tmaskedChar = (maskedASCII>122)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t}\n\t\t\t\/\/ Update the masked value.\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+(char)maskedChar + maskedFieldValue.substring(i+1);\n\t\t}else{\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+ currentChar + maskedFieldValue.substring(i+1);\n\t\t}\n\t}\n\t\/\/ Update the return value.\n\toMaksedField = maskedFieldValue;\n}\nreturn oMaksedField;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iFieldValue","id":"fi.CoreDataMasking.k2s_MaskField.0","index":"0","dataType":"String"},"Comment":{"value":"The value of the field on which to apply the masking"}},{"attr":{"name":"iEncryption","id":"fi.CoreDataMasking.k2s_MaskField.1","index":"1","dataType":"String"},"Comment":{"value":"The encryption to be used to mask the value"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaksedField","id":"fo.CoreDataMasking.k2s_MaskField.0","index":"0","dataType":"String"},"Comment":{"value":"The obfuscated field"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskField.k2function.xml","createFunctionStrForWS":"function k2s_MaskField($iFieldValue,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskField.k2function.xml';\r\n\/\/Null check\nif(iFieldValue == null || iFieldValue.isEmpty()) return iFieldValue;\n\nint valueLength = iFieldValue.length();\nint encryptionLength = iEncryption.length();\nString newEncryption = iEncryption;\n\n\/\/ If the length of the iEncryption is smaller than the length of the iFieldValue,\n\/\/ Append the iEncryption to itself as many times as needed to match the length of iFieldValue.\nwhile(encryptionLength < valueLength){\n\t\/\/ Append iEncryption to itself.\n\tnewEncryption = newEncryption + iEncryption;\n\t\/\/ Checks the length of the new iEncryption.\n\tencryptionLength = newEncryption.length();\n}\n\nString oMaksedField = \"\";\nnewEncryption = newEncryption.substring(0,valueLength);\n\n\/\/if iFieldValue is numeric\n\/\/ If it is, it will use the same encryption but on a cycle of 0-9\n\/\/ As an example, if $iFieldValue = 92 and $iEncryption = 86\n\/\/ The function will add 9 + 8 = 17 and will change it to 7\n\/\/ And 2 + 6 = 8 and will leave it as 8, so the final masked value is 78.\nif(iFieldValue.matches(NUMBER_REGEX)){\t\n\tint tempRes = 0;\n\t\/\/ Goes number by number in iFieldValue and adds it's equivalent iEncryption number.\n\tfor(int i=0;i<valueLength;i++){\n\t\ttempRes = (Character.getNumericValue(iFieldValue.charAt(i)) + \n\t\t\t\t\tCharacter.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\toMaksedField = oMaksedField + Integer.toString(tempRes);\n\t\ttempRes = 0;\n\t}\n}\n\/\/ In case iFieldValue is a non-numeric value.\n\/\/ Mask every alphanumeric charecter using the same logic.\n\/\/ First convert the alphanumeric charecter into ASCII, then add the equivalent value from iEncryption\n\/\/ Lastly, convert the new ASCII value back to Char.\nelse{\n\tString maskedFieldValue = iFieldValue;\n\tchar currentChar;\n\tint charecterASCII = 0;\n\tint maskedASCII = 0;\n\tchar maskedChar;\n\t\/\/ Go charecter by charecter and check if it's alphanumeric,\n\t\/\/ If it is mask it, if not, leave it as is.\n\tfor(int i = 0 ; i < valueLength ; i++){\n\t\t\/\/ Extract the current charecter from the iFieldValue argument.\n\t\tcurrentChar = iFieldValue.charAt(i);\n\t\t\n\t\t\/\/ If charecter is alphanumeric.\n\t\tif(Character.isDigit(currentChar) || Character.isLetter(currentChar)){\n\t\t\t\n\t\t\t\/\/ Convert the current charecter into ASCII format\n\t\t\tcharecterASCII = (int)currentChar;\n\t\t\t\n\t\t\t\/\/ Check the range of the alphanumeric charecter\n\t\t\tif(Character.isDigit(currentChar)){ \/\/ If 0-9 (same as - \"is_numeric($charecterValue)\")\n\n\t\t\t\t\/\/ Update the specific charecter in the value.\n\t\t\t\tmaskedASCII = (Character.getNumericValue(currentChar) + Character.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\t\t\tmaskedChar = (Integer.toString(maskedASCII)).charAt(0);\n\t\t\t\t\n\t\t\t} else if(Character.isUpperCase(currentChar)){ \/\/ If A-Z (upper case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\t\/\/ Update the masked value.\n\t\t\t\tmaskedChar = (maskedASCII>90)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t} else { \/\/ if a-z (lower case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\tmaskedChar = (maskedASCII>122)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t}\n\t\t\t\/\/ Update the masked value.\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+(char)maskedChar + maskedFieldValue.substring(i+1);\n\t\t}else{\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+ currentChar + maskedFieldValue.substring(i+1);\n\t\t}\n\t}\n\t\/\/ Update the return value.\n\toMaksedField = maskedFieldValue;\n}\nreturn oMaksedField;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskField.k2function.xml';\r\nfunction k2s_MaskField($iFieldValue,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskField.k2function.xml';\r\n\/\/Null check\nif(iFieldValue == null || iFieldValue.isEmpty()) return iFieldValue;\n\nint valueLength = iFieldValue.length();\nint encryptionLength = iEncryption.length();\nString newEncryption = iEncryption;\n\n\/\/ If the length of the iEncryption is smaller than the length of the iFieldValue,\n\/\/ Append the iEncryption to itself as many times as needed to match the length of iFieldValue.\nwhile(encryptionLength < valueLength){\n\t\/\/ Append iEncryption to itself.\n\tnewEncryption = newEncryption + iEncryption;\n\t\/\/ Checks the length of the new iEncryption.\n\tencryptionLength = newEncryption.length();\n}\n\nString oMaksedField = \"\";\nnewEncryption = newEncryption.substring(0,valueLength);\n\n\/\/if iFieldValue is numeric\n\/\/ If it is, it will use the same encryption but on a cycle of 0-9\n\/\/ As an example, if $iFieldValue = 92 and $iEncryption = 86\n\/\/ The function will add 9 + 8 = 17 and will change it to 7\n\/\/ And 2 + 6 = 8 and will leave it as 8, so the final masked value is 78.\nif(iFieldValue.matches(NUMBER_REGEX)){\t\n\tint tempRes = 0;\n\t\/\/ Goes number by number in iFieldValue and adds it's equivalent iEncryption number.\n\tfor(int i=0;i<valueLength;i++){\n\t\ttempRes = (Character.getNumericValue(iFieldValue.charAt(i)) + \n\t\t\t\t\tCharacter.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\toMaksedField = oMaksedField + Integer.toString(tempRes);\n\t\ttempRes = 0;\n\t}\n}\n\/\/ In case iFieldValue is a non-numeric value.\n\/\/ Mask every alphanumeric charecter using the same logic.\n\/\/ First convert the alphanumeric charecter into ASCII, then add the equivalent value from iEncryption\n\/\/ Lastly, convert the new ASCII value back to Char.\nelse{\n\tString maskedFieldValue = iFieldValue;\n\tchar currentChar;\n\tint charecterASCII = 0;\n\tint maskedASCII = 0;\n\tchar maskedChar;\n\t\/\/ Go charecter by charecter and check if it's alphanumeric,\n\t\/\/ If it is mask it, if not, leave it as is.\n\tfor(int i = 0 ; i < valueLength ; i++){\n\t\t\/\/ Extract the current charecter from the iFieldValue argument.\n\t\tcurrentChar = iFieldValue.charAt(i);\n\t\t\n\t\t\/\/ If charecter is alphanumeric.\n\t\tif(Character.isDigit(currentChar) || Character.isLetter(currentChar)){\n\t\t\t\n\t\t\t\/\/ Convert the current charecter into ASCII format\n\t\t\tcharecterASCII = (int)currentChar;\n\t\t\t\n\t\t\t\/\/ Check the range of the alphanumeric charecter\n\t\t\tif(Character.isDigit(currentChar)){ \/\/ If 0-9 (same as - \"is_numeric($charecterValue)\")\n\n\t\t\t\t\/\/ Update the specific charecter in the value.\n\t\t\t\tmaskedASCII = (Character.getNumericValue(currentChar) + Character.getNumericValue(newEncryption.charAt(i))) % 10;\n\t\t\t\tmaskedChar = (Integer.toString(maskedASCII)).charAt(0);\n\t\t\t\t\n\t\t\t} else if(Character.isUpperCase(currentChar)){ \/\/ If A-Z (upper case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\t\/\/ Update the masked value.\n\t\t\t\tmaskedChar = (maskedASCII>90)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t} else { \/\/ if a-z (lower case letter)\n\t\t\t\t\/\/ Get the masked ASCII value.\n\t\t\t\tmaskedASCII = charecterASCII + Character.getNumericValue(newEncryption.charAt(i));\n\t\t\t\tmaskedChar = (maskedASCII>122)?(char)(maskedASCII-26):(char)(maskedASCII);\n\t\t\t}\n\t\t\t\/\/ Update the masked value.\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+(char)maskedChar + maskedFieldValue.substring(i+1);\n\t\t}else{\n\t\t\tmaskedFieldValue = maskedFieldValue.substring(0,i)+ currentChar + maskedFieldValue.substring(i+1);\n\t\t}\n\t}\n\t\/\/ Update the return value.\n\toMaksedField = maskedFieldValue;\n}\nreturn oMaksedField;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2s_MaskTable":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2s_MaskTable"},"ID":{"value":"CoreDataMasking.k2s_MaskTable"},"Category":{"value":"CoreDataMasking"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask (obfuscate) the iTable fields based on an encryption taken from the trnMasking translation..\nThe function will preapre SQL Update statement(s) to update the iTable.\nIt will check the ENCRYPTION field in the translation, if it's a number value, the function will use that number to encrypt the field by calling the fnMaskNumber function.\nIf the value is a function name, this function will call that function on the field and it will be that function's job to mask it."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\nfinal String MASKING_EXE_ENABLED = \"1\";\nfinal String SQL_UPDATE = \"UPDATE \";\nfinal String SQL_UPDATE_SET = \" SET \";\nfinal String ASSIGN_OPERATOR = \"=\";\nfinal String COMMA = \",\";\n\n\nif (MASK_FLAG.equals(FLAG_ENABLED)){\n\n\tMap<String, Map<String,String>> maskingMap = new HashMap<String, Map<String,String>>();\n\tMap<String, Map<String,String>> activeMaskingMap = new HashMap<String, Map<String,String>>();\n\t\/\/ Read the encryption information for iTableName from the strnMasking translation.\n\tMap<String,Map<String,String>> data = getTranslationsData(SHARED_TRN_MASKING);\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\tif(valMap.get(TRN_TABLE_NAME_COLUMN_HEADER).equals(iTableName)){\n\t\t\tmaskingMap.put(index, valMap);\n\t\t}\n\t}\n\t\n\tString fieldName = null;\n\tString encryption = null;\n\tString parameters = null;\n\tString active = null;\n\t\/\/ In case the strnMasking translation holds entries for iTableName.\n\tif(maskingMap.keySet().size()!=0){\n\t\t\/\/ Used to determine if to create a single UPDATE statement in case no values are provided \n\t\t\/\/ in the PARAMETERS field or all values in the PARAMETERS fields match the values in FIELD_NAME.\n\t\tboolean singleUpdate = true;\n\t\t\/\/ Checks if all entries for the $iTableName table in the trnMasking translation are inactive.\n\t\tboolean activeTranslations = false;\n\t\tMap<String,String> maskingValues = null;\n\t\t\n\t\tint counter = 0;\n\t\t\/\/ Checks if any of the translation entries for $iTableName have any values in the PARAMETERS field\n\t\t\/\/ that do not match the value in FIELD_NAME.\n\t\tfor(String key :maskingMap.keySet()){\n\t\t\tmaskingValues = maskingMap.get(key);\n\t\t\t\n\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER);  \/\/ The encryption value from the trnMasking translation.\n\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\tactive     = maskingValues.get(TRN_ACTIVE_COLUMN_HEADER); \/\/ The active field from the trnMasking translation.\n\t\t\t\n\t\t\t\/\/ Checks if translation entry is active.\n\t\t\tif(active.equalsIgnoreCase(\"true\")){\n\t\t\t\t\/\/ Announce at least one entry is active. \n\t\t\t\tactiveTranslations = true;\n\t\t\t\t\n\t\t\t\t\/\/ Prepare an active translation array.\n\t\t\t\tactiveMaskingMap.put(Integer.toString(counter), maskingValues);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Checks if to build a single UPDATE statement or multiple ones.\n\t\t\tif(!encryption.matches(NUMBER_REGEX) && \t\/\/ Checks that the encryption entry is a non-numeric value (representing a function).\n\t\t\t   active.equalsIgnoreCase(\"true\") && \t\t\/\/ Checks that the current translation entry is active.\n\t\t\t   parameters != null && \t  \/\/ Checks that the parameters entry is not null.\n\t\t\t   (!fieldName.equals(parameters))){   \/\/ Checks that the fieldName field doesn't match the parameters field.\n\t\t\t\t\/\/ Mark for multiple updates.\n\t\t\t\tsingleUpdate = false;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tcounter = 0;\n\t\t\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\n\t\tif(activeTranslations){\n\t\t\tStringBuilder sqlQueryBuilder = new StringBuilder();\n\t\t\t\/\/ Prepare a single update statement in case there are no\n\t\t\tif(singleUpdate){\n\t\t\t\t\/\/ Prepare the \"header\" for the single UPDATE statement.\n\t\t\t\t\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\n\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\n\t\t\t\t\/\/ Loop through the $activeMaskingArray array to prepare the UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Add the SET for the specific fieldName to the UPDATE statement.\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName); \n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString sqlUpdate = sqlQueryBuilder.toString();\n\t\t\t\t\/\/ Update the sqlUpdate removing the last , from the statement.\n\t\t\t\tsqlUpdate = sqlUpdate.substring(0, sqlUpdate.length()-1);\n\t\t\t\t\/\/ Execute the UDPATE statement on the ludb.\n\t\t\t\tDBExecute(DB_INTERFACE_NAME, sqlUpdate, null);\n\t\t\t}else{\/\/Multi\n\t\t\t\tList<String> updateStatementList = new ArrayList<String>();\n\t\t\t\t\/\/ For each field in the translation for $iTableName prepare an UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tsqlQueryBuilder.setLength(0);\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append(parameters);\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t\/\/ Execute all UPDATE statements\n\t\t\t\tfor(String updateStatement: updateStatementList){\n\t\t\t\t\tDBExecute(DB_INTERFACE_NAME, updateStatement, null);\n\t\t\t\t}\t\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iTableName","id":"fi.CoreDataMasking.k2s_MaskTable.0","index":"0","dataType":"String"},"Comment":{"value":"The table to mask"}}},"OutputParams":[],"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskTable.k2function.xml","createFunctionStrForWS":"function k2s_MaskTable($iTableName){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskTable.k2function.xml';\r\nfinal String MASKING_EXE_ENABLED = \"1\";\nfinal String SQL_UPDATE = \"UPDATE \";\nfinal String SQL_UPDATE_SET = \" SET \";\nfinal String ASSIGN_OPERATOR = \"=\";\nfinal String COMMA = \",\";\n\n\nif (MASK_FLAG.equals(FLAG_ENABLED)){\n\n\tMap<String, Map<String,String>> maskingMap = new HashMap<String, Map<String,String>>();\n\tMap<String, Map<String,String>> activeMaskingMap = new HashMap<String, Map<String,String>>();\n\t\/\/ Read the encryption information for iTableName from the strnMasking translation.\n\tMap<String,Map<String,String>> data = getTranslationsData(SHARED_TRN_MASKING);\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\tif(valMap.get(TRN_TABLE_NAME_COLUMN_HEADER).equals(iTableName)){\n\t\t\tmaskingMap.put(index, valMap);\n\t\t}\n\t}\n\t\n\tString fieldName = null;\n\tString encryption = null;\n\tString parameters = null;\n\tString active = null;\n\t\/\/ In case the strnMasking translation holds entries for iTableName.\n\tif(maskingMap.keySet().size()!=0){\n\t\t\/\/ Used to determine if to create a single UPDATE statement in case no values are provided \n\t\t\/\/ in the PARAMETERS field or all values in the PARAMETERS fields match the values in FIELD_NAME.\n\t\tboolean singleUpdate = true;\n\t\t\/\/ Checks if all entries for the $iTableName table in the trnMasking translation are inactive.\n\t\tboolean activeTranslations = false;\n\t\tMap<String,String> maskingValues = null;\n\t\t\n\t\tint counter = 0;\n\t\t\/\/ Checks if any of the translation entries for $iTableName have any values in the PARAMETERS field\n\t\t\/\/ that do not match the value in FIELD_NAME.\n\t\tfor(String key :maskingMap.keySet()){\n\t\t\tmaskingValues = maskingMap.get(key);\n\t\t\t\n\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER);  \/\/ The encryption value from the trnMasking translation.\n\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\tactive     = maskingValues.get(TRN_ACTIVE_COLUMN_HEADER); \/\/ The active field from the trnMasking translation.\n\t\t\t\n\t\t\t\/\/ Checks if translation entry is active.\n\t\t\tif(active.equalsIgnoreCase(\"true\")){\n\t\t\t\t\/\/ Announce at least one entry is active. \n\t\t\t\tactiveTranslations = true;\n\t\t\t\t\n\t\t\t\t\/\/ Prepare an active translation array.\n\t\t\t\tactiveMaskingMap.put(Integer.toString(counter), maskingValues);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Checks if to build a single UPDATE statement or multiple ones.\n\t\t\tif(!encryption.matches(NUMBER_REGEX) && \t\/\/ Checks that the encryption entry is a non-numeric value (representing a function).\n\t\t\t   active.equalsIgnoreCase(\"true\") && \t\t\/\/ Checks that the current translation entry is active.\n\t\t\t   parameters != null && \t  \/\/ Checks that the parameters entry is not null.\n\t\t\t   (!fieldName.equals(parameters))){   \/\/ Checks that the fieldName field doesn't match the parameters field.\n\t\t\t\t\/\/ Mark for multiple updates.\n\t\t\t\tsingleUpdate = false;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tcounter = 0;\n\t\t\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\n\t\tif(activeTranslations){\n\t\t\tStringBuilder sqlQueryBuilder = new StringBuilder();\n\t\t\t\/\/ Prepare a single update statement in case there are no\n\t\t\tif(singleUpdate){\n\t\t\t\t\/\/ Prepare the \"header\" for the single UPDATE statement.\n\t\t\t\t\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\n\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\n\t\t\t\t\/\/ Loop through the $activeMaskingArray array to prepare the UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Add the SET for the specific fieldName to the UPDATE statement.\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName); \n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString sqlUpdate = sqlQueryBuilder.toString();\n\t\t\t\t\/\/ Update the sqlUpdate removing the last , from the statement.\n\t\t\t\tsqlUpdate = sqlUpdate.substring(0, sqlUpdate.length()-1);\n\t\t\t\t\/\/ Execute the UDPATE statement on the ludb.\n\t\t\t\tDBExecute(DB_INTERFACE_NAME, sqlUpdate, null);\n\t\t\t}else{\/\/Multi\n\t\t\t\tList<String> updateStatementList = new ArrayList<String>();\n\t\t\t\t\/\/ For each field in the translation for $iTableName prepare an UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tsqlQueryBuilder.setLength(0);\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append(parameters);\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t\/\/ Execute all UPDATE statements\n\t\t\t\tfor(String updateStatement: updateStatementList){\n\t\t\t\t\tDBExecute(DB_INTERFACE_NAME, updateStatement, null);\n\t\t\t\t}\t\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskTable.k2function.xml';\r\nfunction k2s_MaskTable($iTableName){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/CoreDataMasking\/k2s_MaskTable.k2function.xml';\r\nfinal String MASKING_EXE_ENABLED = \"1\";\nfinal String SQL_UPDATE = \"UPDATE \";\nfinal String SQL_UPDATE_SET = \" SET \";\nfinal String ASSIGN_OPERATOR = \"=\";\nfinal String COMMA = \",\";\n\n\nif (MASK_FLAG.equals(FLAG_ENABLED)){\n\n\tMap<String, Map<String,String>> maskingMap = new HashMap<String, Map<String,String>>();\n\tMap<String, Map<String,String>> activeMaskingMap = new HashMap<String, Map<String,String>>();\n\t\/\/ Read the encryption information for iTableName from the strnMasking translation.\n\tMap<String,Map<String,String>> data = getTranslationsData(SHARED_TRN_MASKING);\n\tfor(String index: data.keySet()){\n\t\tMap<String, String> valMap = data.get(index);\n\t\tif(valMap.get(TRN_TABLE_NAME_COLUMN_HEADER).equals(iTableName)){\n\t\t\tmaskingMap.put(index, valMap);\n\t\t}\n\t}\n\t\n\tString fieldName = null;\n\tString encryption = null;\n\tString parameters = null;\n\tString active = null;\n\t\/\/ In case the strnMasking translation holds entries for iTableName.\n\tif(maskingMap.keySet().size()!=0){\n\t\t\/\/ Used to determine if to create a single UPDATE statement in case no values are provided \n\t\t\/\/ in the PARAMETERS field or all values in the PARAMETERS fields match the values in FIELD_NAME.\n\t\tboolean singleUpdate = true;\n\t\t\/\/ Checks if all entries for the $iTableName table in the trnMasking translation are inactive.\n\t\tboolean activeTranslations = false;\n\t\tMap<String,String> maskingValues = null;\n\t\t\n\t\tint counter = 0;\n\t\t\/\/ Checks if any of the translation entries for $iTableName have any values in the PARAMETERS field\n\t\t\/\/ that do not match the value in FIELD_NAME.\n\t\tfor(String key :maskingMap.keySet()){\n\t\t\tmaskingValues = maskingMap.get(key);\n\t\t\t\n\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER);  \/\/ The encryption value from the trnMasking translation.\n\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\tactive     = maskingValues.get(TRN_ACTIVE_COLUMN_HEADER); \/\/ The active field from the trnMasking translation.\n\t\t\t\n\t\t\t\/\/ Checks if translation entry is active.\n\t\t\tif(active.equalsIgnoreCase(\"true\")){\n\t\t\t\t\/\/ Announce at least one entry is active. \n\t\t\t\tactiveTranslations = true;\n\t\t\t\t\n\t\t\t\t\/\/ Prepare an active translation array.\n\t\t\t\tactiveMaskingMap.put(Integer.toString(counter), maskingValues);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Checks if to build a single UPDATE statement or multiple ones.\n\t\t\tif(!encryption.matches(NUMBER_REGEX) && \t\/\/ Checks that the encryption entry is a non-numeric value (representing a function).\n\t\t\t   active.equalsIgnoreCase(\"true\") && \t\t\/\/ Checks that the current translation entry is active.\n\t\t\t   parameters != null && \t  \/\/ Checks that the parameters entry is not null.\n\t\t\t   (!fieldName.equals(parameters))){   \/\/ Checks that the fieldName field doesn't match the parameters field.\n\t\t\t\t\/\/ Mark for multiple updates.\n\t\t\t\tsingleUpdate = false;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tcounter = 0;\n\t\t\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \/\/\n\t\t\n\t\tif(activeTranslations){\n\t\t\tStringBuilder sqlQueryBuilder = new StringBuilder();\n\t\t\t\/\/ Prepare a single update statement in case there are no\n\t\t\tif(singleUpdate){\n\t\t\t\t\/\/ Prepare the \"header\" for the single UPDATE statement.\n\t\t\t\t\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\n\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\n\t\t\t\t\/\/ Loop through the $activeMaskingArray array to prepare the UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Add the SET for the specific fieldName to the UPDATE statement.\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName); \n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\")\");\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString sqlUpdate = sqlQueryBuilder.toString();\n\t\t\t\t\/\/ Update the sqlUpdate removing the last , from the statement.\n\t\t\t\tsqlUpdate = sqlUpdate.substring(0, sqlUpdate.length()-1);\n\t\t\t\t\/\/ Execute the UDPATE statement on the ludb.\n\t\t\t\tDBExecute('k2_ws:'.DB_INTERFACE_NAME, sqlUpdate, null);\n\t\t\t}else{\/\/Multi\n\t\t\t\tList<String> updateStatementList = new ArrayList<String>();\n\t\t\t\t\/\/ For each field in the translation for $iTableName prepare an UPDATE statement.\n\t\t\t\tfor(String key :activeMaskingMap.keySet()){\n\t\t\t\t\tsqlQueryBuilder.setLength(0);\n\t\t\t\t\tmaskingValues = activeMaskingMap.get(key);\n\t\t\t\t\tfieldName  = maskingValues.get(TRN_FIELD_NAME_COLUMN_HEADER); \/\/ The field name from the trnMasking translation.\n\t\t\t\t\tencryption = maskingValues.get(TRN_ENCRYPTION_COLUMN_HEADER); \/\/ The encryption value from the trnMasking translation.\n\t\t\t\t\tparameters = maskingValues.get(TRN_PARAMETERS_COLUMN_HEADER); \/\/ The parameters from the trnMasking translation.\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Checks if the encryption is numeric, if yes, use the k2s_MaskField function to make the field.\n\t\t\t\t\tif(encryption.matches(NUMBER_REGEX)){\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(\" = k2s_MaskField(\");\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(COMMA);\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append('\"');\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t\/\/ if encryption is not a numeric field, use the function in the encryption field to mask the field.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE);\n\t\t\t\t\t\tsqlQueryBuilder.append(iTableName);\n\t\t\t\t\t\tsqlQueryBuilder.append(SQL_UPDATE_SET);\n\t\t\t\t\t\t\n\t\t\t\t\t\tsqlQueryBuilder.append(\" \");\n\t\t\t\t\t\tsqlQueryBuilder.append(fieldName);\n\t\t\t\t\t\tsqlQueryBuilder.append(ASSIGN_OPERATOR);\n\t\t\t\t\t\tsqlQueryBuilder.append(encryption);\n\t\t\t\t\t\tsqlQueryBuilder.append(\"(\");\n\t\t\t\t\t\tsqlQueryBuilder.append(parameters);\n\t\t\t\t\t\tsqlQueryBuilder.append(\");\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateStatementList.add(sqlQueryBuilder.toString());\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t\/\/ Execute all UPDATE statements\n\t\t\t\tfor(String updateStatement: updateStatementList){\n\t\t\t\t\tDBExecute('k2_ws:'.DB_INTERFACE_NAME, updateStatement, null);\n\t\t\t\t}\t\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGenerateEmailFromName":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.1.4.0"},"Name":{"value":"fnGenerateEmailFromName"},"ID":{"value":"DataMaskingLibrary.fnGenerateEmailFromName"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"LudbFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function generates an email with the format:<maskedFirstName>.<maskedLastName>@<originalDomain>\nMAke sure to run the masking of the first and last names before calling this function."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"final String EMAIL_SHTROUDL = \"@\";\nfinal String SQL_SELECT = \"SELECT \";\nfinal String SQL_FROM = \" FROM \";\nreportUserMessage(iNamesTable);\n\/\/validate that the iEmail input is not null and not empty.Else, If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Verify the email format\n\tif( iEmail.contains(EMAIL_SHTROUDL)){\n\t\t\/\/ Exploding the email address using in two chunks (left and right side of the @ symbol)\n\t\tString [] emailArray = iEmail.split(EMAIL_SHTROUDL);\n\t\t\/\/ Verify the email format\n\t\tif(emailArray.length == 2){\n\t\t\tString oMaskedEmail = \"\";\n\t\t\t\n\t\t\t\/\/ Getting the data from the table in input\n\t\t\t\/\/String fname = (String)DBSelectValue(DB_INTERFACE_NAME,SQL_SELECT+iFirstName+SQL_FROM+iNamesTable, null);\n\t\t\t\/\/String lname = (String)DBSelectValue(DB_INTERFACE_NAME,SQL_SELECT+iLastName+SQL_FROM+iNamesTable, null);\n\t\n\t\t\t\/\/<maskedFirstName>.<maskedLastName>@<originalDomain>\n\t\t\t\/\/return fname + \".\" + lname + EMAIL_SHTROUDL + emailArray[1];\t\n\t\t}\n\t}\n}\nreturn null;\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iEmail","id":"fi.DataMaskingLibrary.fnGenerateEmailFromName.0","index":"0","dataType":"String"},"Comment":{"value":"The email address to mask"}},{"attr":{"name":"iFirstName","id":"fi.DataMaskingLibrary.fnGenerateEmailFromName.1","index":"1","dataType":"String"},"Comment":{"value":"The masked first name"}},{"attr":{"name":"iLastName","id":"fi.DataMaskingLibrary.fnGenerateEmailFromName.2","index":"2","dataType":"String"},"Comment":{"value":"The masked last name"}},{"attr":{"name":"iNamesTable","id":"fi.DataMaskingLibrary.fnGenerateEmailFromName.3","index":"3","dataType":"String"},"Comment":{"value":"Table containing the first and last names"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedEmail","id":"fo.DataMaskingLibrary.fnGenerateEmailFromName.0","index":"0","dataType":"String"},"Comment":{"value":"The masked email address"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateEmailFromName.k2function.xml","createFunctionStrForWS":"function fnGenerateEmailFromName($iEmail,$iFirstName,$iLastName,$iNamesTable){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateEmailFromName.k2function.xml';\r\nfinal String EMAIL_SHTROUDL = \"@\";\nfinal String SQL_SELECT = \"SELECT \";\nfinal String SQL_FROM = \" FROM \";\nreportUserMessage(iNamesTable);\n\/\/validate that the iEmail input is not null and not empty.Else, If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Verify the email format\n\tif( iEmail.contains(EMAIL_SHTROUDL)){\n\t\t\/\/ Exploding the email address using in two chunks (left and right side of the @ symbol)\n\t\tString [] emailArray = iEmail.split(EMAIL_SHTROUDL);\n\t\t\/\/ Verify the email format\n\t\tif(emailArray.length == 2){\n\t\t\tString oMaskedEmail = \"\";\n\t\t\t\n\t\t\t\/\/ Getting the data from the table in input\n\t\t\t\/\/String fname = (String)DBSelectValue(DB_INTERFACE_NAME,SQL_SELECT+iFirstName+SQL_FROM+iNamesTable, null);\n\t\t\t\/\/String lname = (String)DBSelectValue(DB_INTERFACE_NAME,SQL_SELECT+iLastName+SQL_FROM+iNamesTable, null);\n\t\n\t\t\t\/\/<maskedFirstName>.<maskedLastName>@<originalDomain>\n\t\t\t\/\/return fname + \".\" + lname + EMAIL_SHTROUDL + emailArray[1];\t\n\t\t}\n\t}\n}\nreturn null;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateEmailFromName.k2function.xml';\r\nfunction fnGenerateEmailFromName($iEmail,$iFirstName,$iLastName,$iNamesTable){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateEmailFromName.k2function.xml';\r\nfinal String EMAIL_SHTROUDL = \"@\";\nfinal String SQL_SELECT = \"SELECT \";\nfinal String SQL_FROM = \" FROM \";\nreportUserMessage(iNamesTable);\n\/\/validate that the iEmail input is not null and not empty.Else, If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Verify the email format\n\tif( iEmail.contains(EMAIL_SHTROUDL)){\n\t\t\/\/ Exploding the email address using in two chunks (left and right side of the @ symbol)\n\t\tString [] emailArray = iEmail.split(EMAIL_SHTROUDL);\n\t\t\/\/ Verify the email format\n\t\tif(emailArray.length == 2){\n\t\t\tString oMaskedEmail = \"\";\n\t\t\t\n\t\t\t\/\/ Getting the data from the table in input\n\t\t\t\/\/String fname = (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME,SQL_SELECT+iFirstName+SQL_FROM+iNamesTable, null);\n\t\t\t\/\/String lname = (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME,SQL_SELECT+iLastName+SQL_FROM+iNamesTable, null);\n\t\n\t\t\t\/\/<maskedFirstName>.<maskedLastName>@<originalDomain>\n\t\t\t\/\/return fname + \".\" + lname + EMAIL_SHTROUDL + emailArray[1];\t\n\t\t}\n\t}\n}\nreturn null;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGenerateRandomValidCreditCard":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGenerateRandomValidCreditCard"},"ID":{"value":"DataMaskingLibrary.fnGenerateRandomValidCreditCard"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will generate a valid Credit Card Number based on a given length and prefix information.\nIt uses the Modulus 10 algorithm to determine the validity of the number."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"String oValidCreditCardNumber = null;\n\/\/ Create a new Credit Card Number.\n\/\/ The new card will be built with the following structure:\n\/\/ <prefix><random numbers until the size (including the prefix) is the request length -1><checksum>\n\n\/\/ Generate random numbers to complete the Credit Card to the requested size -1.\nString newCC = iCreditCardPrefix;\nint intCreditCardLength = Integer.parseInt(iCreditCardLength);\n\n\/\/ Keep adding more random numbers until you reach the right size.\nwhile(newCC.length() < intCreditCardLength - 1){\n\t\/\/ Append a random single number to the existing number.\n\tnewCC = newCC + Integer.toString(fnGetRandomNumber(0,9));\n}\n\n\/\/ Define the parameter that would  hold the sum of the numbers (needed for the Modulus 10 Algorithm).\nint sumCCnumbers = 0;\n\n\/\/ Reverse the Credit Card Number so to make it easier to apply the Modulus 10 algorithm.\nString reversedCC =  new StringBuilder(newCC).reverse().toString(); \n\n\/\/ Apply the Mudolus 10 Algorithm.\n\/\/  For information on this algorithm please see: http:\/\/en.wikipedia.org\/wiki\/Luhn_algorithm.\nint oddNumberDouble = 0;\nfor(int i = 1 ; i <= reversedCC.length() ; i++){\n\t\n\t\/\/ Check if it's an odd digit.\n\tif ( (i & 1) != 0 ){\n\t\t\/\/ If Yes, multiply it by 2.\n\t\toddNumberDouble = java.lang.Character.getNumericValue(reversedCC.charAt(i-1)) * 2;\n\t\t\/\/ If the new value is larger than 9, subtract 9 from it.\n\t\toddNumberDouble = (oddNumberDouble > 9)?oddNumberDouble - 9:oddNumberDouble;\n\t\t\/\/ Add the value to the overall Credit Card summation.\n\t\tsumCCnumbers += oddNumberDouble;\n\t\t\/\/ If the digit is Even.\n\t} else {\/\/Even\n\t\t\/\/ Add the value of the even digit to the overall Credit Card summation.\n\t\tsumCCnumbers += java.lang.Character.getNumericValue(reversedCC.charAt(i-1));\n\t}\n}\n\n\/\/ Calcualte the checksum digit by substracting the units digit from 10.\nint checkSumDigit = 10 - (sumCCnumbers % 10);\n\/\/In case checkSumDigit equals to 10 then change it to 0\ncheckSumDigit  = (checkSumDigit==10)?0:checkSumDigit;\n\/\/ Append the Checksum Digit to the Credit Card Number to compelte it.\nnewCC = newCC + Integer.toString(checkSumDigit);\noValidCreditCardNumber = newCC;\n\n\/\/Return the new valid Credit Card Number.\nreturn oValidCreditCardNumber;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iCreditCardLength","id":"fi.DataMaskingLibrary.fnGenerateRandomValidCreditCard.0","index":"0","dataType":"String"},"Comment":{"value":"The Credit Card Length."}},{"attr":{"name":"iCreditCardPrefix","id":"fi.DataMaskingLibrary.fnGenerateRandomValidCreditCard.1","index":"1","dataType":"String"},"Comment":{"value":"The Credit Card Prefix."}}]},"OutputParams":{"Output":{"attr":{"name":"oValidCreditCardNumber","id":"fo.DataMaskingLibrary.fnGenerateRandomValidCreditCard.0","index":"0","dataType":"String"},"Comment":{"value":"A Random valid Credit Card Number"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidCreditCard.k2function.xml","createFunctionStrForWS":"function fnGenerateRandomValidCreditCard($iCreditCardLength,$iCreditCardPrefix){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidCreditCard.k2function.xml';\r\nString oValidCreditCardNumber = null;\n\/\/ Create a new Credit Card Number.\n\/\/ The new card will be built with the following structure:\n\/\/ <prefix><random numbers until the size (including the prefix) is the request length -1><checksum>\n\n\/\/ Generate random numbers to complete the Credit Card to the requested size -1.\nString newCC = iCreditCardPrefix;\nint intCreditCardLength = Integer.parseInt(iCreditCardLength);\n\n\/\/ Keep adding more random numbers until you reach the right size.\nwhile(newCC.length() < intCreditCardLength - 1){\n\t\/\/ Append a random single number to the existing number.\n\tnewCC = newCC + Integer.toString(fnGetRandomNumber(0,9));\n}\n\n\/\/ Define the parameter that would  hold the sum of the numbers (needed for the Modulus 10 Algorithm).\nint sumCCnumbers = 0;\n\n\/\/ Reverse the Credit Card Number so to make it easier to apply the Modulus 10 algorithm.\nString reversedCC =  new StringBuilder(newCC).reverse().toString(); \n\n\/\/ Apply the Mudolus 10 Algorithm.\n\/\/  For information on this algorithm please see: http:\/\/en.wikipedia.org\/wiki\/Luhn_algorithm.\nint oddNumberDouble = 0;\nfor(int i = 1 ; i <= reversedCC.length() ; i++){\n\t\n\t\/\/ Check if it's an odd digit.\n\tif ( (i & 1) != 0 ){\n\t\t\/\/ If Yes, multiply it by 2.\n\t\toddNumberDouble = java.lang.Character.getNumericValue(reversedCC.charAt(i-1)) * 2;\n\t\t\/\/ If the new value is larger than 9, subtract 9 from it.\n\t\toddNumberDouble = (oddNumberDouble > 9)?oddNumberDouble - 9:oddNumberDouble;\n\t\t\/\/ Add the value to the overall Credit Card summation.\n\t\tsumCCnumbers += oddNumberDouble;\n\t\t\/\/ If the digit is Even.\n\t} else {\/\/Even\n\t\t\/\/ Add the value of the even digit to the overall Credit Card summation.\n\t\tsumCCnumbers += java.lang.Character.getNumericValue(reversedCC.charAt(i-1));\n\t}\n}\n\n\/\/ Calcualte the checksum digit by substracting the units digit from 10.\nint checkSumDigit = 10 - (sumCCnumbers % 10);\n\/\/In case checkSumDigit equals to 10 then change it to 0\ncheckSumDigit  = (checkSumDigit==10)?0:checkSumDigit;\n\/\/ Append the Checksum Digit to the Credit Card Number to compelte it.\nnewCC = newCC + Integer.toString(checkSumDigit);\noValidCreditCardNumber = newCC;\n\n\/\/Return the new valid Credit Card Number.\nreturn oValidCreditCardNumber;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidCreditCard.k2function.xml';\r\nfunction fnGenerateRandomValidCreditCard($iCreditCardLength,$iCreditCardPrefix){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidCreditCard.k2function.xml';\r\nString oValidCreditCardNumber = null;\n\/\/ Create a new Credit Card Number.\n\/\/ The new card will be built with the following structure:\n\/\/ <prefix><random numbers until the size (including the prefix) is the request length -1><checksum>\n\n\/\/ Generate random numbers to complete the Credit Card to the requested size -1.\nString newCC = iCreditCardPrefix;\nint intCreditCardLength = Integer.parseInt(iCreditCardLength);\n\n\/\/ Keep adding more random numbers until you reach the right size.\nwhile(newCC.length() < intCreditCardLength - 1){\n\t\/\/ Append a random single number to the existing number.\n\tnewCC = newCC + Integer.toString(fnGetRandomNumber(0,9));\n}\n\n\/\/ Define the parameter that would  hold the sum of the numbers (needed for the Modulus 10 Algorithm).\nint sumCCnumbers = 0;\n\n\/\/ Reverse the Credit Card Number so to make it easier to apply the Modulus 10 algorithm.\nString reversedCC =  new StringBuilder(newCC).reverse().toString(); \n\n\/\/ Apply the Mudolus 10 Algorithm.\n\/\/  For information on this algorithm please see: http:\/\/en.wikipedia.org\/wiki\/Luhn_algorithm.\nint oddNumberDouble = 0;\nfor(int i = 1 ; i <= reversedCC.length() ; i++){\n\t\n\t\/\/ Check if it's an odd digit.\n\tif ( (i & 1) != 0 ){\n\t\t\/\/ If Yes, multiply it by 2.\n\t\toddNumberDouble = java.lang.Character.getNumericValue(reversedCC.charAt(i-1)) * 2;\n\t\t\/\/ If the new value is larger than 9, subtract 9 from it.\n\t\toddNumberDouble = (oddNumberDouble > 9)?oddNumberDouble - 9:oddNumberDouble;\n\t\t\/\/ Add the value to the overall Credit Card summation.\n\t\tsumCCnumbers += oddNumberDouble;\n\t\t\/\/ If the digit is Even.\n\t} else {\/\/Even\n\t\t\/\/ Add the value of the even digit to the overall Credit Card summation.\n\t\tsumCCnumbers += java.lang.Character.getNumericValue(reversedCC.charAt(i-1));\n\t}\n}\n\n\/\/ Calcualte the checksum digit by substracting the units digit from 10.\nint checkSumDigit = 10 - (sumCCnumbers % 10);\n\/\/In case checkSumDigit equals to 10 then change it to 0\ncheckSumDigit  = (checkSumDigit==10)?0:checkSumDigit;\n\/\/ Append the Checksum Digit to the Credit Card Number to compelte it.\nnewCC = newCC + Integer.toString(checkSumDigit);\noValidCreditCardNumber = newCC;\n\n\/\/Return the new valid Credit Card Number.\nreturn oValidCreditCardNumber;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGenerateRandomValidEIN":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGenerateRandomValidEIN"},"ID":{"value":"DataMaskingLibrary.fnGenerateRandomValidEIN"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will generate a random valid EIN number."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"final int PADDING_LENGTH = 7;\n\/\/ Prepare a list of all Campuses profix for the EIN.\nString [] campusPrefixArray = new String[]{\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"46\",\"48\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"98\",\"99\"};\n\/\/ Generate a random Key value to extract a random prefix from the $campusPrefixArray array.\nint campusPrefixIndex = -1; int integerRandomVal = -1;\nString randomVal = null;\nint arrayLastIndex = campusPrefixArray.length - 1;\n\n\/\/prevent generating random index value which is out of campusPrefixArray array\ndo{\n\tcampusPrefixIndex = fnGetRandomNumber(0,arrayLastIndex);\n\trandomVal = campusPrefixArray[campusPrefixIndex];\n\tintegerRandomVal = Integer.parseInt(randomVal);\n}while(integerRandomVal > arrayLastIndex);\n\n\nString campusPrefix = campusPrefixArray[integerRandomVal];\nString oMaskedEIN = null;\n\n\/\/ Check to see if an hyphen exists in the EIN.\n\/\/ If it exists and its located after the first 2 digits:\nif((iEIN.replaceAll(\"[^\\\\d]\", \"\")).length() == 9){\n\tString rand = Integer.toString(fnGetRandomNumber(0,9999999));\n\t\/\/padd the random number with zeros on the left so eventually we will have a number of 7 digits\n\trand = k2_pad(rand,\"0\",PADDING_LENGTH,false) ;\n\t\/\/ Prepare the masked value with the new prefix.\n\toMaskedEIN = campusPrefix + \"-\" + rand ;\n\t\/\/ If EIN doesn't have a hyphen and is not 9 digits exactly, keep it as is.\n}else {\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\n\t\/\/ For every charecter in the EIN:\n\tfor(int i = 0 ; i < iEIN.length() ; i++){\n\t\t\n\t\t\/\/ If the current charecter equals -\n\t\tif(iEIN.charAt(i) == '-'){\n\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\n\t\t\t\/\/ Else - The current charecter is not -\n\t\t} else {\n\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t}\n\t}\n\t\/\/ Mask the EIN.\n\toMaskedEIN = k2s_MaskField(iEIN,randomEncryption);\n}\n\n\/\/ Return the masked value.\nreturn oMaskedEIN;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iEIN","id":"fi.DataMaskingLibrary.fnGenerateRandomValidEIN.0","index":"0","dataType":"String"},"Comment":{"value":"EIN to mask"}}},"OutputParams":{"Output":{"attr":{"name":"oMaskedEIN","id":"fo.DataMaskingLibrary.fnGenerateRandomValidEIN.0","index":"0","dataType":"String"},"Comment":{"value":"The masked EIN"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidEIN.k2function.xml","createFunctionStrForWS":"function fnGenerateRandomValidEIN($iEIN){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidEIN.k2function.xml';\r\nfinal int PADDING_LENGTH = 7;\n\/\/ Prepare a list of all Campuses profix for the EIN.\nString [] campusPrefixArray = new String[]{\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"46\",\"48\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"98\",\"99\"};\n\/\/ Generate a random Key value to extract a random prefix from the $campusPrefixArray array.\nint campusPrefixIndex = -1; int integerRandomVal = -1;\nString randomVal = null;\nint arrayLastIndex = campusPrefixArray.length - 1;\n\n\/\/prevent generating random index value which is out of campusPrefixArray array\ndo{\n\tcampusPrefixIndex = fnGetRandomNumber(0,arrayLastIndex);\n\trandomVal = campusPrefixArray[campusPrefixIndex];\n\tintegerRandomVal = Integer.parseInt(randomVal);\n}while(integerRandomVal > arrayLastIndex);\n\n\nString campusPrefix = campusPrefixArray[integerRandomVal];\nString oMaskedEIN = null;\n\n\/\/ Check to see if an hyphen exists in the EIN.\n\/\/ If it exists and its located after the first 2 digits:\nif((iEIN.replaceAll(\"[^\\\\d]\", \"\")).length() == 9){\n\tString rand = Integer.toString(fnGetRandomNumber(0,9999999));\n\t\/\/padd the random number with zeros on the left so eventually we will have a number of 7 digits\n\trand = k2_pad(rand,\"0\",PADDING_LENGTH,false) ;\n\t\/\/ Prepare the masked value with the new prefix.\n\toMaskedEIN = campusPrefix + \"-\" + rand ;\n\t\/\/ If EIN doesn't have a hyphen and is not 9 digits exactly, keep it as is.\n}else {\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\n\t\/\/ For every charecter in the EIN:\n\tfor(int i = 0 ; i < iEIN.length() ; i++){\n\t\t\n\t\t\/\/ If the current charecter equals -\n\t\tif(iEIN.charAt(i) == '-'){\n\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\n\t\t\t\/\/ Else - The current charecter is not -\n\t\t} else {\n\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t}\n\t}\n\t\/\/ Mask the EIN.\n\toMaskedEIN = k2s_MaskField(iEIN,randomEncryption);\n}\n\n\/\/ Return the masked value.\nreturn oMaskedEIN;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidEIN.k2function.xml';\r\nfunction fnGenerateRandomValidEIN($iEIN){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidEIN.k2function.xml';\r\nfinal int PADDING_LENGTH = 7;\n\/\/ Prepare a list of all Campuses profix for the EIN.\nString [] campusPrefixArray = new String[]{\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"46\",\"48\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"98\",\"99\"};\n\/\/ Generate a random Key value to extract a random prefix from the $campusPrefixArray array.\nint campusPrefixIndex = -1; int integerRandomVal = -1;\nString randomVal = null;\nint arrayLastIndex = campusPrefixArray.length - 1;\n\n\/\/prevent generating random index value which is out of campusPrefixArray array\ndo{\n\tcampusPrefixIndex = fnGetRandomNumber(0,arrayLastIndex);\n\trandomVal = campusPrefixArray[campusPrefixIndex];\n\tintegerRandomVal = Integer.parseInt(randomVal);\n}while(integerRandomVal > arrayLastIndex);\n\n\nString campusPrefix = campusPrefixArray[integerRandomVal];\nString oMaskedEIN = null;\n\n\/\/ Check to see if an hyphen exists in the EIN.\n\/\/ If it exists and its located after the first 2 digits:\nif((iEIN.replaceAll(\"[^\\\\d]\", \"\")).length() == 9){\n\tString rand = Integer.toString(fnGetRandomNumber(0,9999999));\n\t\/\/padd the random number with zeros on the left so eventually we will have a number of 7 digits\n\trand = k2_pad(rand,\"0\",PADDING_LENGTH,false) ;\n\t\/\/ Prepare the masked value with the new prefix.\n\toMaskedEIN = campusPrefix + \"-\" + rand ;\n\t\/\/ If EIN doesn't have a hyphen and is not 9 digits exactly, keep it as is.\n}else {\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\n\t\/\/ For every charecter in the EIN:\n\tfor(int i = 0 ; i < iEIN.length() ; i++){\n\t\t\n\t\t\/\/ If the current charecter equals -\n\t\tif(iEIN.charAt(i) == '-'){\n\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\n\t\t\t\/\/ Else - The current charecter is not -\n\t\t} else {\n\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t}\n\t}\n\t\/\/ Mask the EIN.\n\toMaskedEIN = k2s_MaskField(iEIN,randomEncryption);\n}\n\n\/\/ Return the masked value.\nreturn oMaskedEIN;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGenerateRandomValidSSN":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGenerateRandomValidSSN"},"ID":{"value":"DataMaskingLibrary.fnGenerateRandomValidSSN"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will generate a masked SSN.\nIf the input parameter of $iSSN has 9 digits, the function will generate a valid masked SSN for it.\nIf the input parameter of $iSSN doesn't have 9 digits (which means it's not a vlid SSN) the function will create a random number in the same size of the $iSSN."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"final String SEPARATOR = \"-\";\nfinal int LAST_FOUR_SUBSTR_LENGTH = 4;\nfinal int GROUP_SUBSTR_LENGTH = 2;\nfinal int AREA_SUBSTR_LENGTH = 3;\n\n\n@SuppressWarnings(\"unchecked\")\nMap <String, int[]> ssnSstatePrefixes = (Map <String, int[]>) getThreadGlobals(\"SSN:SSNstatePrefixes\");\n@SuppressWarnings(\"unchecked\")\nMap<String, Integer> subHighGroupMap = (Map<String, Integer>)getThreadGlobals(\"SSN:SSNsubHighGroupArray\");\nint[] possibleGroups = (int[])getThreadGlobals(\"SSN:possibleGroups\");\nString[] states = (String[])getThreadGlobals(\"SSN:States\");\n\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(subHighGroupMap==null){\n\t\/\/ List of all available SSN High Groups updated to June 24th 2011 - (taken from http:\/\/www.ssa.gov\/employer\/ssnvhighgroup.htm)\n\tString ssnHighGroup = \"001 11\t002 11\t003 08\t004 13\t005 13\t006 11\t007 11\t008 94\t009 94\t010 94\t011 94\t012 94\t013 94\t014 94\t015 94\t016 94\t017 94\t018 94\t019 94\t020 94\t021 94\t022 92\t023 92\t024 92\t025 92\t026 92\t027 92\t028 92\t029 92\t030 92\t031 92\t032 92\t033 92\t034 92\t035 74\t036 74\t037 74\t038 74\t039 74\t040 15\t041 15\t042 15\t043 15\t044 15\t045 15\t046 15\t047 15\t048 15\t049 15\t050 02\t051 02\t052 02\t053 02\t054 02\t055 02\t056 02\t057 02\t058 02\t059 02\t060 02\t061 02\t062 02\t063 02\t064 02\t065 02\t066 02\t067 02\t068 02\t069 02\t070 02\t071 02\t072 02\t073 02\t074 02\t075 02\t076 02\t077 02\t078 02\t079 02\t080 02\t081 02\t082 02\t083 02\t084 02\t085 02\t086 02\t087 02\t088 02\t089 02\t090 02\t091 02\t092 02\t093 02\t094 02\t095 02\t096 02\t097 02\t098 02\t099 02\t100 02\t101 02\t102 02\t103 02\t104 02\t105 02\t106 98\t107 98\t108 98\t109 98\t110 98\t111 98\t112 98\t113 98\t114 98\t115 98\t116 98\t117 98\t118 98\t119 98\t120 98\t121 98\t122 98\t123 98\t124 98\t125 98\t126 98\t127 98\t128 98\t129 98\t130 98\t131 98\t132 98\t133 98\t134 98\t135 25\t136 25\t137 25\t138 25\t139 23\t140 23\t141 23\t142 23\t143 23\t144 23\t145 23\t146 23\t147 23\t148 23\t149 23\t150 23\t151 23\t152 23\t153 23\t154 23\t155 23\t156 23\t157 23\t158 23\t159 86\t160 86\t161 86\t162 86\t163 86\t164 86\t165 86\t166 86\t167 86\t168 86\t\t\t\t169 86\t170 86\t171 86\t172 86\t173 86\t174 86\t175 86\t176 86\t177 86\t178 86\t179 86\t180 86\t\t181 86\t182 86\t183 86\t184 86\t185 86\t186 86\t187 86\t188 86\t189 86\t190 86\t191 86\t192 86\t193 86\t194 86\t195 86\t196 84\t197 84\t198 84\t199 84\t200 84\t201 84\t202 84\t203 84\t204 84\t205 84\t206 84\t207 84\t208 84\t209 84\t210 84\t211 84\t212 91\t213 91\t214 91\t215 91\t216 89\t217 89\t218 89\t219 89\t220 89\t221 13\t222 11\t223 99\t224 99\t225 99\t226 99\t227 99\t228 99\t\t229 99\t230 99\t231 99\t232 57\t233 57\t234 57\t235 57\t236 55\t237 99\t238 99\t239 99\t240 99\t241 99\t242 99\t243 99\t244 99\t245 99\t246 99\t247 99\t248 99\t249 99\t250 99\t251 99\t252 99\t253 99\t254 99\t255 99\t256 99\t257 99\t258 99\t259 99\t260 99\t261 99\t262 99\t263 99\t264 99\t265 99\t266 99\t267 99\t268 17\t269 17\t270 17\t271 17\t272 17\t273 17\t274 17\t275 17\t276 17\t277 17\t278 17\t279 15\t280 15\t281 15\t282 15\t283 15\t284 15\t285 15\t286 15\t287 15\t288 15\t289 15\t290 15\t291 15\t292 15\t293 15\t294 15\t295 15\t296 15\t297 15\t298 15\t299 15\t300 15\t301 15\t302 15\t303 37\t304 37\t305 37\t306 37\t307 37\t308 37\t309 37\t310 37\t311 35\t312 35\t313 35\t314 35\t315 35\t316 35\t317 35\t318 11\t319 11\t320 11\t321 11\t322 11\t323 11\t324 11\t325 11\t326 11\t327 11\t328 11\t329 11\t330 11\t331 11\t332 11\t333 11\t334 11\t335 11\t336 11\t337 11\t338 11\t339 11\t340 11\t341 11\t342 11\t343 11\t344 11\t345 11\t346 08\t347 08\t348 08\t349 08\t350 08\t351 08\t352 08\t353 08\t354 08\t355 08\t356 08\t357 08\t358 08\t359 08\t360 08\t361 08\t362 39\t363 39\t364 39\t365 39\t366 39\t367 39\t368 39\t369 39\t370 37\t371 37\t372 37\t373 37\t374 37\t375 37\t376 37\t377 37\t378 37\t379 37\t380 37\t381 37\t382 37\t383 37\t384 37\t385 37\t386 37\t387 33\t388 33\t389 33\t390 33\t391 33\t392 33\t393 33\t394 33\t395 33\t396 33\t397 33\t398 31\t399 31\t400 73\t401 73\t402 73\t\t403 73\t404 73\t405 73\t406 73\t407 73\t408 99\t409 99\t410 99\t411 99\t412 99\t413 99\t414 99\t415 99\t416 67\t417 67\t418 67\t419 67\t420 67\t421 67\t422 67\t423 67\t424 65\t425 99\t426 99\t427 99\t428 99\t429 99\t430 99\t431 99\t432 99\t433 99\t434 99\t435 99\t436 99\t437 99\t438 99\t439 99\t440 29\t441 29\t442 29\t443 27\t444 27\t445 27\t446 27\t447 27\t448 27\t449 99\t450 99\t451 99\t452 99\t453 99\t454 99\t455 99\t456 99\t457 99\t458 99\t459 99\t460 99\t461 99\t462 99\t463 99\t464 99\t465 99\t466 99\t467 99\t468 57\t469 57\t470 57\t471 57\t472 57\t473 55\t474 55\t475 55\t476 55\t477 55\t478 43\t479 41\t480 41\t481 41\t482 41\t483 41\t484 41\t485 41\t486 29\t487 29\t488 29\t489 29\t490 29\t491 29\t492 29\t493 29\t494 29\t495 29\t496 29\t497 29\t498 29\t499 29\t500 29\t501 37\t502 37\t503 45\t504 45\t505 59\t506 57\t507 57\t508 57\t509 33\t510 33\t511 33\t512 33\t513 31\t514 31\t515 31\t516 49\t517 49\t518 89\t519 87\t520 61\t521 99\t522 99\t523 99\t524 99\t525 99\t526 99\t527 99\t528 99\t529 99\t530 99\t531 71\t532 71\t533 71\t534 71\t535 71\t536 71\t537 71\t538 71\t539 71\t540 83\t541 83\t542 81\t543 81\t544 81\t545 99\t546 99\t547 99\t548 99\t549 99\t550 99\t551 99\t552 99\t553 99\t554 99\t555 99\t556 99\t557 99\t558 99\t559 99\t560 99\t561 99\t562 99\t563 99\t564 99\t565 99\t566 99\t567 99\t568 99\t569 99\t570 99\t571 99\t572 99\t573 99\t574 61\t575 99\t576 99\t577 53\t578 53\t579 53\t580 41\t581 99\t582 99\t583 99\t584 99\t585 99\t586 67\t587 99\t588 09\t589 99\t590 99\t591 99\t592 99\t593 99\t594 99\t\t595 99\t596 94\t597 92\t598 92\t599 92\t600 99\t\t601 99\t602 87\t603 87\t604 87\t605 87\t606 87\t607 87\t608 87\t609 87\t610 87\t611 87\t612 87\t\t613 87\t614 87\t615 87\t616 87\t617 87\t618 87\t\t619 87\t620 85\t621 85\t622 85\t623 85\t624 85\t\t625 85\t626 85\t627 31\t628 31\t629 31\t630 31\t\t631 31\t632 31\t633 31\t634 31\t635 31\t636 31\t\t637 29\t638 29\t639 29\t640 29\t641 29\t642 29\t643 29\t644 29\t645 29\t646 23\t647 21\t648 58\t\t649 56\t650 62\t651 62\t652 62\t653 60\t654 38\t\t655 36\t656 36\t657 36\t658 36\t659 24\t660 24\t\t661 22\t662 22\t663 22\t664 22\t665 22\t667 48\t\t668 48\t669 48\t670 48\t671 48\t672 48\t673 48\t\t674 48\t675 48\t676 22\t677 22\t678 22\t679 20\t680 31\t681 24\t682 24\t683 24\t684 24\t685 24\t\t686 24\t687 24\t688 24\t689 24\t690 22\t691 18\t\t692 18\t693 16\t694 16\t695 16\t696 16\t697 16\t698 16\t699 16\t700 18\t701 18\t702 18\t703 18\t\t704 18\t705 18\t706 18\t707 18\t708 18\t709 18\t\t710 18\t711 18\t712 18\t713 18\t714 18\t715 18\t\t716 18\t717 18\t718 18\t719 18\t720 18\t721 18\t\t722 18\t723 18\t724 28\t725 18\t726 18\t727 10\t\t728 14\t729 28\t730 28\t731 28\t732 28\t733 26\t\t750 20\t751 18\t752 09\t753 07\t754 07\t755 07\t756 12\t757 12\t758 12\t759 12\t760 12\t761 12\t\t762 12\t763 12\t764 29\t765 27\t766 04\t767 02\t768 02\t769 02\t770 02\t771 02\t772 02\t\";\n\t\/\/ Split on tab. This should give us an array of prefixes and group numbers, IE '203 82', '204 82', etc\n\tString[] ssnHighGroupArray = ssnHighGroup.split(\"\t\");\n\t\n\tsubHighGroupMap = new java.util.HashMap<String,Integer>();\n\t\/\/ Make array useful by splitting the prefix and group number\n\t\/\/ We also convert the string to an int for easier handling later down the road\n\tString [] ssnSubHighGroup = null;\n\tfor(String ssnHighGroupVal: ssnHighGroupArray){\n\t\t\/\/ Checks if the current value is not an empty string.\n\t\tif(!(ssnHighGroupVal.trim()).isEmpty()){\n\t\t\t\/\/ If a valid entry, explode into area and and groups.\n\t\t\tssnSubHighGroup = ssnHighGroupVal.split(\" \");\n\t\t\t\/\/ add to the map the area as the key and the group as the value.\n\t\t\tsubHighGroupMap.put(ssnSubHighGroup[0].trim(), Integer.parseInt(ssnSubHighGroup[1].trim()));\n\t\t}\n\t}\n\t\/\/set the map of the LocalThread of the current thread\n\tsetThreadGlobals(\"SSN:SSNsubHighGroupArray\",subHighGroupMap);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(ssnSstatePrefixes == null){\n\t\n\tssnSstatePrefixes = new java.util.HashMap <String, int[]> ();\n\tssnSstatePrefixes.put(\"AK\",new int[]{574});\n\tssnSstatePrefixes.put(\"AL\",new int[]{416,417,418,419,420,421,422,423,424});\n\tssnSstatePrefixes.put(\"AR\", new int[]{429,430,431,432,676,677,678,679});\n\tssnSstatePrefixes.put(\"AZ\", new int[]{526,527,600,601,764,765});\n\tssnSstatePrefixes.put(\"CA\", new int[]{545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626});\n\tssnSstatePrefixes.put(\"CO\", new int[]{521,522,523,524,650,651,652,653});\n\tssnSstatePrefixes.put(\"CT\", new int[]{40,41,42,43,44,45,46,47,48,49});\n\tssnSstatePrefixes.put(\"DC\", new int[]{577,578,579});\n\tssnSstatePrefixes.put(\"DE\", new int[]{221,222});\n\tssnSstatePrefixes.put(\"FL\", new int[]{261,262,263,264,265,266,267,589,590,591,592,593,594,595,766,767,768,769,770,771,772});\n\tssnSstatePrefixes.put(\"GA\", new int[]{252,253,254,255,256,257,258,259,260,667,668,669,670,671,672,673,674,675});\n\tssnSstatePrefixes.put(\"HI\", new int[]{575,576,750,751});\n\tssnSstatePrefixes.put(\"IA\", new int[]{478,479,480,481,482,483,484,485});\n\tssnSstatePrefixes.put(\"ID\", new int[]{518,519});\n\tssnSstatePrefixes.put(\"IL\", new int[]{318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361});\n\tssnSstatePrefixes.put(\"IN\", new int[]{303,304,305,306,307,308,309,310,311,312,313,314,315,316,317});\n\tssnSstatePrefixes.put(\"KS\", new int[]{509,510,511,512,513,514,515});\n\tssnSstatePrefixes.put(\"KY\", new int[]{400,401,402,403,404,405,406,407});\n\tssnSstatePrefixes.put(\"LA\", new int[]{433,434,435,436,437,438,439,659,660,661,662,663,664,665});\n\tssnSstatePrefixes.put(\"MA\", new int[]{10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34});\n\tssnSstatePrefixes.put(\"MD\", new int[]{212,213,214,215,216,217,218,219,220});\n\tssnSstatePrefixes.put(\"ME\", new int[]{4,5,6,7});\n\tssnSstatePrefixes.put(\"MI\", new int[]{362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386});\n\tssnSstatePrefixes.put(\"MN\", new int[]{468,469,470,471,472,473,474,475,476,477});\n\tssnSstatePrefixes.put(\"MO\", new int[]{486,487,488,489,490,491,492,493,494,495,496,497,498,499,500});\n\tssnSstatePrefixes.put(\"MS\", new int[]{425,426,427,428,587});\n\tssnSstatePrefixes.put(\"MT\", new int[]{516,517});\n\tssnSstatePrefixes.put(\"NC\", new int[]{237,238,239,240,241,242,243,244,245,246,681,682,683,684,685,686,687,688,689,690});\n\tssnSstatePrefixes.put(\"ND\", new int[]{501,502});\n\tssnSstatePrefixes.put(\"NE\", new int[]{505,506,507,508});\n\tssnSstatePrefixes.put(\"NH\", new int[]{1,2,3});\n\tssnSstatePrefixes.put(\"NJ\", new int[]{135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158});\n\tssnSstatePrefixes.put(\"NM\", new int[]{525,585,648,649});\n\tssnSstatePrefixes.put(\"NV\", new int[]{530,680});\n\tssnSstatePrefixes.put(\"NY\", new int[]{50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134});\n\tssnSstatePrefixes.put(\"OH\", new int[]{268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302});\n\tssnSstatePrefixes.put(\"OK\", new int[]{440,441,442,443,444,445,446,447,448});\n\tssnSstatePrefixes.put(\"OR\", new int[]{540,541,542,543,544});\n\tssnSstatePrefixes.put(\"PA\", new int[]{159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211});\n\tssnSstatePrefixes.put(\"RI\", new int[]{35,36,37,38,39});\n\tssnSstatePrefixes.put(\"SC\", new int[]{247,248,249,250,251,654,655,656,657,658});\n\tssnSstatePrefixes.put(\"SD\", new int[]{503,504});\n\tssnSstatePrefixes.put(\"TN\", new int[]{408,409,410,411,412,413,414,415,756,757,758,759,760,761,762,763});\n\tssnSstatePrefixes.put(\"TX\", new int[]{449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645});\n\tssnSstatePrefixes.put(\"UT\", new int[]{528,529,646,647});\n\tssnSstatePrefixes.put(\"VA\", new int[]{223,224,225,226,227,228,229,230,231,691,692,693,694,695,696,697,698,699});\n\tssnSstatePrefixes.put(\"VT\", new int[]{8,9});\n\tssnSstatePrefixes.put(\"WA\", new int[]{531,532,533,534,535,536,537,538,539});\n\tssnSstatePrefixes.put(\"WI\", new int[]{387,388,389,390,391,392,393,394,395,396,397,398,399});\n\tssnSstatePrefixes.put(\"WV\", new int[]{232,233,234,235,236});\n\tssnSstatePrefixes.put(\"WY\", new int[]{520});\n\n\tsetThreadGlobals(\"SSN:SSNstatePrefixes\",ssnSstatePrefixes);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(states == null){\n\tstates = new String[]{\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"};\n\tsetThreadGlobals(\"SSN:States\",states);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(possibleGroups == null){\n\tpossibleGroups = new int[]{1,3,5,7,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,2,4,6,8,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99};\n\tsetThreadGlobals(\"SSN:possibleGroups\",possibleGroups);\n}\n\norg.apache.commons.math3.random.MersenneTwister mt = new org.apache.commons.math3.random.MersenneTwister();\n\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\nfinal String zeroChar = \"0\";\t\nString paddingPrefix = null;\n\nString modifiedSSN = iSSN.replaceAll(\"[^\\\\d]\", \"\");\n\nString oSSN = null;\n\/\/ Check that the SSN as overall of 9 digits (excluding any non-digits charecters):\nif(modifiedSSN.length() == 9){\n\t\n\t\/\/ Generate a random State.\n\tint randIndex = mt.nextInt(states.length-1);\n\t\n\tString state = states[randIndex];\n\t\/\/ Generate area number\n\tint[] selectedStatePrefixesArr = ssnSstatePrefixes.get(state);\n\trandIndex = fnGetRandomNumber(0,selectedStatePrefixesArr.length-1);\n\t\n\t\/\/ Generate area number\n\tint area = selectedStatePrefixesArr[randIndex];\n\tString areaStr = Integer.toString(area);\n\n\tint groupArea = subHighGroupMap.get(areaStr);\n\tboolean isFound = false;\n\t\/\/Iterate over possible groups array and check if groupArea is found\n\tfor(int i=0;i<possibleGroups.length;i++){\n\t\tif(possibleGroups[i] == groupArea){\n\t\t\tisFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isFound){\n\t\trandIndex = mt.nextInt(groupArea);\n\t}else{\/\/In order to prevent index out of bounds\n\t\trandIndex = 0;\n\t}\n\t\/\/ Generate group number\n\tint group = possibleGroups[randIndex]; \/\/ Generate valid group number\n\tString groupStr = Integer.toString(group);\n\t\/\/ Generate last four\n\tString lastFour = Integer.toString(mt.nextInt(9999 - 1) + 1);\n\t\/\/padd lastFour with zeros on the left so eventually we will have a number of 4 digits\n\tlastFour = k2_pad(lastFour,\"0\",LAST_FOUR_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 2 digits\n\tgroupStr = k2_pad(groupStr,\"0\",GROUP_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 3 digits\n\tareaStr = k2_pad(areaStr,\"0\",AREA_SUBSTR_LENGTH,false) ;\n\t\n\tStringBuilder sb = new StringBuilder();\n\t\/\/ Build the random SSN.\n\tsb.append(areaStr);\n\tsb.append(SEPARATOR);\n\tsb.append(groupStr);\n\tsb.append(SEPARATOR);\n\tsb.append(lastFour);\n\n\toSSN = sb.toString();\n\t\/\/ If not, the SSN is not valid.\n} else {\n\t\/\/ Get the size of SSN in numbers.\n\tdouble ssnSize = java.lang.Math.pow(10.0,((double)iSSN.length()) - 1.0);\n\t\/\/ Initiate the Random Encryption argument.\n\tString paddingStr = org.apache.commons.lang.StringUtils.repeat(zeroChar, iSSN.length()); \n\tString randomEncryption = paddingStr + Integer.toString(fnGetRandomNumber(1,(int)ssnSize));\n\t\/\/ Mask the SSN.\n\toSSN = k2s_MaskField(iSSN,randomEncryption);\n}\n\nreturn oSSN;\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iSSN","id":"fi.DataMaskingLibrary.fnGenerateRandomValidSSN.0","index":"0","dataType":"String"},"Comment":{"value":"Social Security Number"}}},"OutputParams":{"Output":{"attr":{"name":"oSSN","id":"fo.DataMaskingLibrary.fnGenerateRandomValidSSN.0","index":"0","dataType":"String"},"Comment":{"value":"A rendom generated valid SSN."}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidSSN.k2function.xml","createFunctionStrForWS":"function fnGenerateRandomValidSSN($iSSN){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidSSN.k2function.xml';\r\nfinal String SEPARATOR = \"-\";\nfinal int LAST_FOUR_SUBSTR_LENGTH = 4;\nfinal int GROUP_SUBSTR_LENGTH = 2;\nfinal int AREA_SUBSTR_LENGTH = 3;\n\n\n@SuppressWarnings(\"unchecked\")\nMap <String, int[]> ssnSstatePrefixes = (Map <String, int[]>) getThreadGlobals(\"SSN:SSNstatePrefixes\");\n@SuppressWarnings(\"unchecked\")\nMap<String, Integer> subHighGroupMap = (Map<String, Integer>)getThreadGlobals(\"SSN:SSNsubHighGroupArray\");\nint[] possibleGroups = (int[])getThreadGlobals(\"SSN:possibleGroups\");\nString[] states = (String[])getThreadGlobals(\"SSN:States\");\n\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(subHighGroupMap==null){\n\t\/\/ List of all available SSN High Groups updated to June 24th 2011 - (taken from http:\/\/www.ssa.gov\/employer\/ssnvhighgroup.htm)\n\tString ssnHighGroup = \"001 11\t002 11\t003 08\t004 13\t005 13\t006 11\t007 11\t008 94\t009 94\t010 94\t011 94\t012 94\t013 94\t014 94\t015 94\t016 94\t017 94\t018 94\t019 94\t020 94\t021 94\t022 92\t023 92\t024 92\t025 92\t026 92\t027 92\t028 92\t029 92\t030 92\t031 92\t032 92\t033 92\t034 92\t035 74\t036 74\t037 74\t038 74\t039 74\t040 15\t041 15\t042 15\t043 15\t044 15\t045 15\t046 15\t047 15\t048 15\t049 15\t050 02\t051 02\t052 02\t053 02\t054 02\t055 02\t056 02\t057 02\t058 02\t059 02\t060 02\t061 02\t062 02\t063 02\t064 02\t065 02\t066 02\t067 02\t068 02\t069 02\t070 02\t071 02\t072 02\t073 02\t074 02\t075 02\t076 02\t077 02\t078 02\t079 02\t080 02\t081 02\t082 02\t083 02\t084 02\t085 02\t086 02\t087 02\t088 02\t089 02\t090 02\t091 02\t092 02\t093 02\t094 02\t095 02\t096 02\t097 02\t098 02\t099 02\t100 02\t101 02\t102 02\t103 02\t104 02\t105 02\t106 98\t107 98\t108 98\t109 98\t110 98\t111 98\t112 98\t113 98\t114 98\t115 98\t116 98\t117 98\t118 98\t119 98\t120 98\t121 98\t122 98\t123 98\t124 98\t125 98\t126 98\t127 98\t128 98\t129 98\t130 98\t131 98\t132 98\t133 98\t134 98\t135 25\t136 25\t137 25\t138 25\t139 23\t140 23\t141 23\t142 23\t143 23\t144 23\t145 23\t146 23\t147 23\t148 23\t149 23\t150 23\t151 23\t152 23\t153 23\t154 23\t155 23\t156 23\t157 23\t158 23\t159 86\t160 86\t161 86\t162 86\t163 86\t164 86\t165 86\t166 86\t167 86\t168 86\t\t\t\t169 86\t170 86\t171 86\t172 86\t173 86\t174 86\t175 86\t176 86\t177 86\t178 86\t179 86\t180 86\t\t181 86\t182 86\t183 86\t184 86\t185 86\t186 86\t187 86\t188 86\t189 86\t190 86\t191 86\t192 86\t193 86\t194 86\t195 86\t196 84\t197 84\t198 84\t199 84\t200 84\t201 84\t202 84\t203 84\t204 84\t205 84\t206 84\t207 84\t208 84\t209 84\t210 84\t211 84\t212 91\t213 91\t214 91\t215 91\t216 89\t217 89\t218 89\t219 89\t220 89\t221 13\t222 11\t223 99\t224 99\t225 99\t226 99\t227 99\t228 99\t\t229 99\t230 99\t231 99\t232 57\t233 57\t234 57\t235 57\t236 55\t237 99\t238 99\t239 99\t240 99\t241 99\t242 99\t243 99\t244 99\t245 99\t246 99\t247 99\t248 99\t249 99\t250 99\t251 99\t252 99\t253 99\t254 99\t255 99\t256 99\t257 99\t258 99\t259 99\t260 99\t261 99\t262 99\t263 99\t264 99\t265 99\t266 99\t267 99\t268 17\t269 17\t270 17\t271 17\t272 17\t273 17\t274 17\t275 17\t276 17\t277 17\t278 17\t279 15\t280 15\t281 15\t282 15\t283 15\t284 15\t285 15\t286 15\t287 15\t288 15\t289 15\t290 15\t291 15\t292 15\t293 15\t294 15\t295 15\t296 15\t297 15\t298 15\t299 15\t300 15\t301 15\t302 15\t303 37\t304 37\t305 37\t306 37\t307 37\t308 37\t309 37\t310 37\t311 35\t312 35\t313 35\t314 35\t315 35\t316 35\t317 35\t318 11\t319 11\t320 11\t321 11\t322 11\t323 11\t324 11\t325 11\t326 11\t327 11\t328 11\t329 11\t330 11\t331 11\t332 11\t333 11\t334 11\t335 11\t336 11\t337 11\t338 11\t339 11\t340 11\t341 11\t342 11\t343 11\t344 11\t345 11\t346 08\t347 08\t348 08\t349 08\t350 08\t351 08\t352 08\t353 08\t354 08\t355 08\t356 08\t357 08\t358 08\t359 08\t360 08\t361 08\t362 39\t363 39\t364 39\t365 39\t366 39\t367 39\t368 39\t369 39\t370 37\t371 37\t372 37\t373 37\t374 37\t375 37\t376 37\t377 37\t378 37\t379 37\t380 37\t381 37\t382 37\t383 37\t384 37\t385 37\t386 37\t387 33\t388 33\t389 33\t390 33\t391 33\t392 33\t393 33\t394 33\t395 33\t396 33\t397 33\t398 31\t399 31\t400 73\t401 73\t402 73\t\t403 73\t404 73\t405 73\t406 73\t407 73\t408 99\t409 99\t410 99\t411 99\t412 99\t413 99\t414 99\t415 99\t416 67\t417 67\t418 67\t419 67\t420 67\t421 67\t422 67\t423 67\t424 65\t425 99\t426 99\t427 99\t428 99\t429 99\t430 99\t431 99\t432 99\t433 99\t434 99\t435 99\t436 99\t437 99\t438 99\t439 99\t440 29\t441 29\t442 29\t443 27\t444 27\t445 27\t446 27\t447 27\t448 27\t449 99\t450 99\t451 99\t452 99\t453 99\t454 99\t455 99\t456 99\t457 99\t458 99\t459 99\t460 99\t461 99\t462 99\t463 99\t464 99\t465 99\t466 99\t467 99\t468 57\t469 57\t470 57\t471 57\t472 57\t473 55\t474 55\t475 55\t476 55\t477 55\t478 43\t479 41\t480 41\t481 41\t482 41\t483 41\t484 41\t485 41\t486 29\t487 29\t488 29\t489 29\t490 29\t491 29\t492 29\t493 29\t494 29\t495 29\t496 29\t497 29\t498 29\t499 29\t500 29\t501 37\t502 37\t503 45\t504 45\t505 59\t506 57\t507 57\t508 57\t509 33\t510 33\t511 33\t512 33\t513 31\t514 31\t515 31\t516 49\t517 49\t518 89\t519 87\t520 61\t521 99\t522 99\t523 99\t524 99\t525 99\t526 99\t527 99\t528 99\t529 99\t530 99\t531 71\t532 71\t533 71\t534 71\t535 71\t536 71\t537 71\t538 71\t539 71\t540 83\t541 83\t542 81\t543 81\t544 81\t545 99\t546 99\t547 99\t548 99\t549 99\t550 99\t551 99\t552 99\t553 99\t554 99\t555 99\t556 99\t557 99\t558 99\t559 99\t560 99\t561 99\t562 99\t563 99\t564 99\t565 99\t566 99\t567 99\t568 99\t569 99\t570 99\t571 99\t572 99\t573 99\t574 61\t575 99\t576 99\t577 53\t578 53\t579 53\t580 41\t581 99\t582 99\t583 99\t584 99\t585 99\t586 67\t587 99\t588 09\t589 99\t590 99\t591 99\t592 99\t593 99\t594 99\t\t595 99\t596 94\t597 92\t598 92\t599 92\t600 99\t\t601 99\t602 87\t603 87\t604 87\t605 87\t606 87\t607 87\t608 87\t609 87\t610 87\t611 87\t612 87\t\t613 87\t614 87\t615 87\t616 87\t617 87\t618 87\t\t619 87\t620 85\t621 85\t622 85\t623 85\t624 85\t\t625 85\t626 85\t627 31\t628 31\t629 31\t630 31\t\t631 31\t632 31\t633 31\t634 31\t635 31\t636 31\t\t637 29\t638 29\t639 29\t640 29\t641 29\t642 29\t643 29\t644 29\t645 29\t646 23\t647 21\t648 58\t\t649 56\t650 62\t651 62\t652 62\t653 60\t654 38\t\t655 36\t656 36\t657 36\t658 36\t659 24\t660 24\t\t661 22\t662 22\t663 22\t664 22\t665 22\t667 48\t\t668 48\t669 48\t670 48\t671 48\t672 48\t673 48\t\t674 48\t675 48\t676 22\t677 22\t678 22\t679 20\t680 31\t681 24\t682 24\t683 24\t684 24\t685 24\t\t686 24\t687 24\t688 24\t689 24\t690 22\t691 18\t\t692 18\t693 16\t694 16\t695 16\t696 16\t697 16\t698 16\t699 16\t700 18\t701 18\t702 18\t703 18\t\t704 18\t705 18\t706 18\t707 18\t708 18\t709 18\t\t710 18\t711 18\t712 18\t713 18\t714 18\t715 18\t\t716 18\t717 18\t718 18\t719 18\t720 18\t721 18\t\t722 18\t723 18\t724 28\t725 18\t726 18\t727 10\t\t728 14\t729 28\t730 28\t731 28\t732 28\t733 26\t\t750 20\t751 18\t752 09\t753 07\t754 07\t755 07\t756 12\t757 12\t758 12\t759 12\t760 12\t761 12\t\t762 12\t763 12\t764 29\t765 27\t766 04\t767 02\t768 02\t769 02\t770 02\t771 02\t772 02\t\";\n\t\/\/ Split on tab. This should give us an array of prefixes and group numbers, IE '203 82', '204 82', etc\n\tString[] ssnHighGroupArray = ssnHighGroup.split(\"\t\");\n\t\n\tsubHighGroupMap = new java.util.HashMap<String,Integer>();\n\t\/\/ Make array useful by splitting the prefix and group number\n\t\/\/ We also convert the string to an int for easier handling later down the road\n\tString [] ssnSubHighGroup = null;\n\tfor(String ssnHighGroupVal: ssnHighGroupArray){\n\t\t\/\/ Checks if the current value is not an empty string.\n\t\tif(!(ssnHighGroupVal.trim()).isEmpty()){\n\t\t\t\/\/ If a valid entry, explode into area and and groups.\n\t\t\tssnSubHighGroup = ssnHighGroupVal.split(\" \");\n\t\t\t\/\/ add to the map the area as the key and the group as the value.\n\t\t\tsubHighGroupMap.put(ssnSubHighGroup[0].trim(), Integer.parseInt(ssnSubHighGroup[1].trim()));\n\t\t}\n\t}\n\t\/\/set the map of the LocalThread of the current thread\n\tsetThreadGlobals(\"SSN:SSNsubHighGroupArray\",subHighGroupMap);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(ssnSstatePrefixes == null){\n\t\n\tssnSstatePrefixes = new java.util.HashMap <String, int[]> ();\n\tssnSstatePrefixes.put(\"AK\",new int[]{574});\n\tssnSstatePrefixes.put(\"AL\",new int[]{416,417,418,419,420,421,422,423,424});\n\tssnSstatePrefixes.put(\"AR\", new int[]{429,430,431,432,676,677,678,679});\n\tssnSstatePrefixes.put(\"AZ\", new int[]{526,527,600,601,764,765});\n\tssnSstatePrefixes.put(\"CA\", new int[]{545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626});\n\tssnSstatePrefixes.put(\"CO\", new int[]{521,522,523,524,650,651,652,653});\n\tssnSstatePrefixes.put(\"CT\", new int[]{40,41,42,43,44,45,46,47,48,49});\n\tssnSstatePrefixes.put(\"DC\", new int[]{577,578,579});\n\tssnSstatePrefixes.put(\"DE\", new int[]{221,222});\n\tssnSstatePrefixes.put(\"FL\", new int[]{261,262,263,264,265,266,267,589,590,591,592,593,594,595,766,767,768,769,770,771,772});\n\tssnSstatePrefixes.put(\"GA\", new int[]{252,253,254,255,256,257,258,259,260,667,668,669,670,671,672,673,674,675});\n\tssnSstatePrefixes.put(\"HI\", new int[]{575,576,750,751});\n\tssnSstatePrefixes.put(\"IA\", new int[]{478,479,480,481,482,483,484,485});\n\tssnSstatePrefixes.put(\"ID\", new int[]{518,519});\n\tssnSstatePrefixes.put(\"IL\", new int[]{318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361});\n\tssnSstatePrefixes.put(\"IN\", new int[]{303,304,305,306,307,308,309,310,311,312,313,314,315,316,317});\n\tssnSstatePrefixes.put(\"KS\", new int[]{509,510,511,512,513,514,515});\n\tssnSstatePrefixes.put(\"KY\", new int[]{400,401,402,403,404,405,406,407});\n\tssnSstatePrefixes.put(\"LA\", new int[]{433,434,435,436,437,438,439,659,660,661,662,663,664,665});\n\tssnSstatePrefixes.put(\"MA\", new int[]{10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34});\n\tssnSstatePrefixes.put(\"MD\", new int[]{212,213,214,215,216,217,218,219,220});\n\tssnSstatePrefixes.put(\"ME\", new int[]{4,5,6,7});\n\tssnSstatePrefixes.put(\"MI\", new int[]{362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386});\n\tssnSstatePrefixes.put(\"MN\", new int[]{468,469,470,471,472,473,474,475,476,477});\n\tssnSstatePrefixes.put(\"MO\", new int[]{486,487,488,489,490,491,492,493,494,495,496,497,498,499,500});\n\tssnSstatePrefixes.put(\"MS\", new int[]{425,426,427,428,587});\n\tssnSstatePrefixes.put(\"MT\", new int[]{516,517});\n\tssnSstatePrefixes.put(\"NC\", new int[]{237,238,239,240,241,242,243,244,245,246,681,682,683,684,685,686,687,688,689,690});\n\tssnSstatePrefixes.put(\"ND\", new int[]{501,502});\n\tssnSstatePrefixes.put(\"NE\", new int[]{505,506,507,508});\n\tssnSstatePrefixes.put(\"NH\", new int[]{1,2,3});\n\tssnSstatePrefixes.put(\"NJ\", new int[]{135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158});\n\tssnSstatePrefixes.put(\"NM\", new int[]{525,585,648,649});\n\tssnSstatePrefixes.put(\"NV\", new int[]{530,680});\n\tssnSstatePrefixes.put(\"NY\", new int[]{50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134});\n\tssnSstatePrefixes.put(\"OH\", new int[]{268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302});\n\tssnSstatePrefixes.put(\"OK\", new int[]{440,441,442,443,444,445,446,447,448});\n\tssnSstatePrefixes.put(\"OR\", new int[]{540,541,542,543,544});\n\tssnSstatePrefixes.put(\"PA\", new int[]{159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211});\n\tssnSstatePrefixes.put(\"RI\", new int[]{35,36,37,38,39});\n\tssnSstatePrefixes.put(\"SC\", new int[]{247,248,249,250,251,654,655,656,657,658});\n\tssnSstatePrefixes.put(\"SD\", new int[]{503,504});\n\tssnSstatePrefixes.put(\"TN\", new int[]{408,409,410,411,412,413,414,415,756,757,758,759,760,761,762,763});\n\tssnSstatePrefixes.put(\"TX\", new int[]{449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645});\n\tssnSstatePrefixes.put(\"UT\", new int[]{528,529,646,647});\n\tssnSstatePrefixes.put(\"VA\", new int[]{223,224,225,226,227,228,229,230,231,691,692,693,694,695,696,697,698,699});\n\tssnSstatePrefixes.put(\"VT\", new int[]{8,9});\n\tssnSstatePrefixes.put(\"WA\", new int[]{531,532,533,534,535,536,537,538,539});\n\tssnSstatePrefixes.put(\"WI\", new int[]{387,388,389,390,391,392,393,394,395,396,397,398,399});\n\tssnSstatePrefixes.put(\"WV\", new int[]{232,233,234,235,236});\n\tssnSstatePrefixes.put(\"WY\", new int[]{520});\n\n\tsetThreadGlobals(\"SSN:SSNstatePrefixes\",ssnSstatePrefixes);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(states == null){\n\tstates = new String[]{\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"};\n\tsetThreadGlobals(\"SSN:States\",states);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(possibleGroups == null){\n\tpossibleGroups = new int[]{1,3,5,7,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,2,4,6,8,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99};\n\tsetThreadGlobals(\"SSN:possibleGroups\",possibleGroups);\n}\n\norg.apache.commons.math3.random.MersenneTwister mt = new org.apache.commons.math3.random.MersenneTwister();\n\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\nfinal String zeroChar = \"0\";\t\nString paddingPrefix = null;\n\nString modifiedSSN = iSSN.replaceAll(\"[^\\\\d]\", \"\");\n\nString oSSN = null;\n\/\/ Check that the SSN as overall of 9 digits (excluding any non-digits charecters):\nif(modifiedSSN.length() == 9){\n\t\n\t\/\/ Generate a random State.\n\tint randIndex = mt.nextInt(states.length-1);\n\t\n\tString state = states[randIndex];\n\t\/\/ Generate area number\n\tint[] selectedStatePrefixesArr = ssnSstatePrefixes.get(state);\n\trandIndex = fnGetRandomNumber(0,selectedStatePrefixesArr.length-1);\n\t\n\t\/\/ Generate area number\n\tint area = selectedStatePrefixesArr[randIndex];\n\tString areaStr = Integer.toString(area);\n\n\tint groupArea = subHighGroupMap.get(areaStr);\n\tboolean isFound = false;\n\t\/\/Iterate over possible groups array and check if groupArea is found\n\tfor(int i=0;i<possibleGroups.length;i++){\n\t\tif(possibleGroups[i] == groupArea){\n\t\t\tisFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isFound){\n\t\trandIndex = mt.nextInt(groupArea);\n\t}else{\/\/In order to prevent index out of bounds\n\t\trandIndex = 0;\n\t}\n\t\/\/ Generate group number\n\tint group = possibleGroups[randIndex]; \/\/ Generate valid group number\n\tString groupStr = Integer.toString(group);\n\t\/\/ Generate last four\n\tString lastFour = Integer.toString(mt.nextInt(9999 - 1) + 1);\n\t\/\/padd lastFour with zeros on the left so eventually we will have a number of 4 digits\n\tlastFour = k2_pad(lastFour,\"0\",LAST_FOUR_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 2 digits\n\tgroupStr = k2_pad(groupStr,\"0\",GROUP_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 3 digits\n\tareaStr = k2_pad(areaStr,\"0\",AREA_SUBSTR_LENGTH,false) ;\n\t\n\tStringBuilder sb = new StringBuilder();\n\t\/\/ Build the random SSN.\n\tsb.append(areaStr);\n\tsb.append(SEPARATOR);\n\tsb.append(groupStr);\n\tsb.append(SEPARATOR);\n\tsb.append(lastFour);\n\n\toSSN = sb.toString();\n\t\/\/ If not, the SSN is not valid.\n} else {\n\t\/\/ Get the size of SSN in numbers.\n\tdouble ssnSize = java.lang.Math.pow(10.0,((double)iSSN.length()) - 1.0);\n\t\/\/ Initiate the Random Encryption argument.\n\tString paddingStr = org.apache.commons.lang.StringUtils.repeat(zeroChar, iSSN.length()); \n\tString randomEncryption = paddingStr + Integer.toString(fnGetRandomNumber(1,(int)ssnSize));\n\t\/\/ Mask the SSN.\n\toSSN = k2s_MaskField(iSSN,randomEncryption);\n}\n\nreturn oSSN;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidSSN.k2function.xml';\r\nfunction fnGenerateRandomValidSSN($iSSN){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGenerateRandomValidSSN.k2function.xml';\r\nfinal String SEPARATOR = \"-\";\nfinal int LAST_FOUR_SUBSTR_LENGTH = 4;\nfinal int GROUP_SUBSTR_LENGTH = 2;\nfinal int AREA_SUBSTR_LENGTH = 3;\n\n\n@SuppressWarnings(\"unchecked\")\nMap <String, int[]> ssnSstatePrefixes = (Map <String, int[]>) getThreadGlobals(\"SSN:SSNstatePrefixes\");\n@SuppressWarnings(\"unchecked\")\nMap<String, Integer> subHighGroupMap = (Map<String, Integer>)getThreadGlobals(\"SSN:SSNsubHighGroupArray\");\nint[] possibleGroups = (int[])getThreadGlobals(\"SSN:possibleGroups\");\nString[] states = (String[])getThreadGlobals(\"SSN:States\");\n\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(subHighGroupMap==null){\n\t\/\/ List of all available SSN High Groups updated to June 24th 2011 - (taken from http:\/\/www.ssa.gov\/employer\/ssnvhighgroup.htm)\n\tString ssnHighGroup = \"001 11\t002 11\t003 08\t004 13\t005 13\t006 11\t007 11\t008 94\t009 94\t010 94\t011 94\t012 94\t013 94\t014 94\t015 94\t016 94\t017 94\t018 94\t019 94\t020 94\t021 94\t022 92\t023 92\t024 92\t025 92\t026 92\t027 92\t028 92\t029 92\t030 92\t031 92\t032 92\t033 92\t034 92\t035 74\t036 74\t037 74\t038 74\t039 74\t040 15\t041 15\t042 15\t043 15\t044 15\t045 15\t046 15\t047 15\t048 15\t049 15\t050 02\t051 02\t052 02\t053 02\t054 02\t055 02\t056 02\t057 02\t058 02\t059 02\t060 02\t061 02\t062 02\t063 02\t064 02\t065 02\t066 02\t067 02\t068 02\t069 02\t070 02\t071 02\t072 02\t073 02\t074 02\t075 02\t076 02\t077 02\t078 02\t079 02\t080 02\t081 02\t082 02\t083 02\t084 02\t085 02\t086 02\t087 02\t088 02\t089 02\t090 02\t091 02\t092 02\t093 02\t094 02\t095 02\t096 02\t097 02\t098 02\t099 02\t100 02\t101 02\t102 02\t103 02\t104 02\t105 02\t106 98\t107 98\t108 98\t109 98\t110 98\t111 98\t112 98\t113 98\t114 98\t115 98\t116 98\t117 98\t118 98\t119 98\t120 98\t121 98\t122 98\t123 98\t124 98\t125 98\t126 98\t127 98\t128 98\t129 98\t130 98\t131 98\t132 98\t133 98\t134 98\t135 25\t136 25\t137 25\t138 25\t139 23\t140 23\t141 23\t142 23\t143 23\t144 23\t145 23\t146 23\t147 23\t148 23\t149 23\t150 23\t151 23\t152 23\t153 23\t154 23\t155 23\t156 23\t157 23\t158 23\t159 86\t160 86\t161 86\t162 86\t163 86\t164 86\t165 86\t166 86\t167 86\t168 86\t\t\t\t169 86\t170 86\t171 86\t172 86\t173 86\t174 86\t175 86\t176 86\t177 86\t178 86\t179 86\t180 86\t\t181 86\t182 86\t183 86\t184 86\t185 86\t186 86\t187 86\t188 86\t189 86\t190 86\t191 86\t192 86\t193 86\t194 86\t195 86\t196 84\t197 84\t198 84\t199 84\t200 84\t201 84\t202 84\t203 84\t204 84\t205 84\t206 84\t207 84\t208 84\t209 84\t210 84\t211 84\t212 91\t213 91\t214 91\t215 91\t216 89\t217 89\t218 89\t219 89\t220 89\t221 13\t222 11\t223 99\t224 99\t225 99\t226 99\t227 99\t228 99\t\t229 99\t230 99\t231 99\t232 57\t233 57\t234 57\t235 57\t236 55\t237 99\t238 99\t239 99\t240 99\t241 99\t242 99\t243 99\t244 99\t245 99\t246 99\t247 99\t248 99\t249 99\t250 99\t251 99\t252 99\t253 99\t254 99\t255 99\t256 99\t257 99\t258 99\t259 99\t260 99\t261 99\t262 99\t263 99\t264 99\t265 99\t266 99\t267 99\t268 17\t269 17\t270 17\t271 17\t272 17\t273 17\t274 17\t275 17\t276 17\t277 17\t278 17\t279 15\t280 15\t281 15\t282 15\t283 15\t284 15\t285 15\t286 15\t287 15\t288 15\t289 15\t290 15\t291 15\t292 15\t293 15\t294 15\t295 15\t296 15\t297 15\t298 15\t299 15\t300 15\t301 15\t302 15\t303 37\t304 37\t305 37\t306 37\t307 37\t308 37\t309 37\t310 37\t311 35\t312 35\t313 35\t314 35\t315 35\t316 35\t317 35\t318 11\t319 11\t320 11\t321 11\t322 11\t323 11\t324 11\t325 11\t326 11\t327 11\t328 11\t329 11\t330 11\t331 11\t332 11\t333 11\t334 11\t335 11\t336 11\t337 11\t338 11\t339 11\t340 11\t341 11\t342 11\t343 11\t344 11\t345 11\t346 08\t347 08\t348 08\t349 08\t350 08\t351 08\t352 08\t353 08\t354 08\t355 08\t356 08\t357 08\t358 08\t359 08\t360 08\t361 08\t362 39\t363 39\t364 39\t365 39\t366 39\t367 39\t368 39\t369 39\t370 37\t371 37\t372 37\t373 37\t374 37\t375 37\t376 37\t377 37\t378 37\t379 37\t380 37\t381 37\t382 37\t383 37\t384 37\t385 37\t386 37\t387 33\t388 33\t389 33\t390 33\t391 33\t392 33\t393 33\t394 33\t395 33\t396 33\t397 33\t398 31\t399 31\t400 73\t401 73\t402 73\t\t403 73\t404 73\t405 73\t406 73\t407 73\t408 99\t409 99\t410 99\t411 99\t412 99\t413 99\t414 99\t415 99\t416 67\t417 67\t418 67\t419 67\t420 67\t421 67\t422 67\t423 67\t424 65\t425 99\t426 99\t427 99\t428 99\t429 99\t430 99\t431 99\t432 99\t433 99\t434 99\t435 99\t436 99\t437 99\t438 99\t439 99\t440 29\t441 29\t442 29\t443 27\t444 27\t445 27\t446 27\t447 27\t448 27\t449 99\t450 99\t451 99\t452 99\t453 99\t454 99\t455 99\t456 99\t457 99\t458 99\t459 99\t460 99\t461 99\t462 99\t463 99\t464 99\t465 99\t466 99\t467 99\t468 57\t469 57\t470 57\t471 57\t472 57\t473 55\t474 55\t475 55\t476 55\t477 55\t478 43\t479 41\t480 41\t481 41\t482 41\t483 41\t484 41\t485 41\t486 29\t487 29\t488 29\t489 29\t490 29\t491 29\t492 29\t493 29\t494 29\t495 29\t496 29\t497 29\t498 29\t499 29\t500 29\t501 37\t502 37\t503 45\t504 45\t505 59\t506 57\t507 57\t508 57\t509 33\t510 33\t511 33\t512 33\t513 31\t514 31\t515 31\t516 49\t517 49\t518 89\t519 87\t520 61\t521 99\t522 99\t523 99\t524 99\t525 99\t526 99\t527 99\t528 99\t529 99\t530 99\t531 71\t532 71\t533 71\t534 71\t535 71\t536 71\t537 71\t538 71\t539 71\t540 83\t541 83\t542 81\t543 81\t544 81\t545 99\t546 99\t547 99\t548 99\t549 99\t550 99\t551 99\t552 99\t553 99\t554 99\t555 99\t556 99\t557 99\t558 99\t559 99\t560 99\t561 99\t562 99\t563 99\t564 99\t565 99\t566 99\t567 99\t568 99\t569 99\t570 99\t571 99\t572 99\t573 99\t574 61\t575 99\t576 99\t577 53\t578 53\t579 53\t580 41\t581 99\t582 99\t583 99\t584 99\t585 99\t586 67\t587 99\t588 09\t589 99\t590 99\t591 99\t592 99\t593 99\t594 99\t\t595 99\t596 94\t597 92\t598 92\t599 92\t600 99\t\t601 99\t602 87\t603 87\t604 87\t605 87\t606 87\t607 87\t608 87\t609 87\t610 87\t611 87\t612 87\t\t613 87\t614 87\t615 87\t616 87\t617 87\t618 87\t\t619 87\t620 85\t621 85\t622 85\t623 85\t624 85\t\t625 85\t626 85\t627 31\t628 31\t629 31\t630 31\t\t631 31\t632 31\t633 31\t634 31\t635 31\t636 31\t\t637 29\t638 29\t639 29\t640 29\t641 29\t642 29\t643 29\t644 29\t645 29\t646 23\t647 21\t648 58\t\t649 56\t650 62\t651 62\t652 62\t653 60\t654 38\t\t655 36\t656 36\t657 36\t658 36\t659 24\t660 24\t\t661 22\t662 22\t663 22\t664 22\t665 22\t667 48\t\t668 48\t669 48\t670 48\t671 48\t672 48\t673 48\t\t674 48\t675 48\t676 22\t677 22\t678 22\t679 20\t680 31\t681 24\t682 24\t683 24\t684 24\t685 24\t\t686 24\t687 24\t688 24\t689 24\t690 22\t691 18\t\t692 18\t693 16\t694 16\t695 16\t696 16\t697 16\t698 16\t699 16\t700 18\t701 18\t702 18\t703 18\t\t704 18\t705 18\t706 18\t707 18\t708 18\t709 18\t\t710 18\t711 18\t712 18\t713 18\t714 18\t715 18\t\t716 18\t717 18\t718 18\t719 18\t720 18\t721 18\t\t722 18\t723 18\t724 28\t725 18\t726 18\t727 10\t\t728 14\t729 28\t730 28\t731 28\t732 28\t733 26\t\t750 20\t751 18\t752 09\t753 07\t754 07\t755 07\t756 12\t757 12\t758 12\t759 12\t760 12\t761 12\t\t762 12\t763 12\t764 29\t765 27\t766 04\t767 02\t768 02\t769 02\t770 02\t771 02\t772 02\t\";\n\t\/\/ Split on tab. This should give us an array of prefixes and group numbers, IE '203 82', '204 82', etc\n\tString[] ssnHighGroupArray = ssnHighGroup.split(\"\t\");\n\t\n\tsubHighGroupMap = new java.util.HashMap<String,Integer>();\n\t\/\/ Make array useful by splitting the prefix and group number\n\t\/\/ We also convert the string to an int for easier handling later down the road\n\tString [] ssnSubHighGroup = null;\n\tfor(String ssnHighGroupVal: ssnHighGroupArray){\n\t\t\/\/ Checks if the current value is not an empty string.\n\t\tif(!(ssnHighGroupVal.trim()).isEmpty()){\n\t\t\t\/\/ If a valid entry, explode into area and and groups.\n\t\t\tssnSubHighGroup = ssnHighGroupVal.split(\" \");\n\t\t\t\/\/ add to the map the area as the key and the group as the value.\n\t\t\tsubHighGroupMap.put(ssnSubHighGroup[0].trim(), Integer.parseInt(ssnSubHighGroup[1].trim()));\n\t\t}\n\t}\n\t\/\/set the map of the LocalThread of the current thread\n\tsetThreadGlobals(\"SSN:SSNsubHighGroupArray\",subHighGroupMap);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(ssnSstatePrefixes == null){\n\t\n\tssnSstatePrefixes = new java.util.HashMap <String, int[]> ();\n\tssnSstatePrefixes.put(\"AK\",new int[]{574});\n\tssnSstatePrefixes.put(\"AL\",new int[]{416,417,418,419,420,421,422,423,424});\n\tssnSstatePrefixes.put(\"AR\", new int[]{429,430,431,432,676,677,678,679});\n\tssnSstatePrefixes.put(\"AZ\", new int[]{526,527,600,601,764,765});\n\tssnSstatePrefixes.put(\"CA\", new int[]{545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626});\n\tssnSstatePrefixes.put(\"CO\", new int[]{521,522,523,524,650,651,652,653});\n\tssnSstatePrefixes.put(\"CT\", new int[]{40,41,42,43,44,45,46,47,48,49});\n\tssnSstatePrefixes.put(\"DC\", new int[]{577,578,579});\n\tssnSstatePrefixes.put(\"DE\", new int[]{221,222});\n\tssnSstatePrefixes.put(\"FL\", new int[]{261,262,263,264,265,266,267,589,590,591,592,593,594,595,766,767,768,769,770,771,772});\n\tssnSstatePrefixes.put(\"GA\", new int[]{252,253,254,255,256,257,258,259,260,667,668,669,670,671,672,673,674,675});\n\tssnSstatePrefixes.put(\"HI\", new int[]{575,576,750,751});\n\tssnSstatePrefixes.put(\"IA\", new int[]{478,479,480,481,482,483,484,485});\n\tssnSstatePrefixes.put(\"ID\", new int[]{518,519});\n\tssnSstatePrefixes.put(\"IL\", new int[]{318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361});\n\tssnSstatePrefixes.put(\"IN\", new int[]{303,304,305,306,307,308,309,310,311,312,313,314,315,316,317});\n\tssnSstatePrefixes.put(\"KS\", new int[]{509,510,511,512,513,514,515});\n\tssnSstatePrefixes.put(\"KY\", new int[]{400,401,402,403,404,405,406,407});\n\tssnSstatePrefixes.put(\"LA\", new int[]{433,434,435,436,437,438,439,659,660,661,662,663,664,665});\n\tssnSstatePrefixes.put(\"MA\", new int[]{10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34});\n\tssnSstatePrefixes.put(\"MD\", new int[]{212,213,214,215,216,217,218,219,220});\n\tssnSstatePrefixes.put(\"ME\", new int[]{4,5,6,7});\n\tssnSstatePrefixes.put(\"MI\", new int[]{362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386});\n\tssnSstatePrefixes.put(\"MN\", new int[]{468,469,470,471,472,473,474,475,476,477});\n\tssnSstatePrefixes.put(\"MO\", new int[]{486,487,488,489,490,491,492,493,494,495,496,497,498,499,500});\n\tssnSstatePrefixes.put(\"MS\", new int[]{425,426,427,428,587});\n\tssnSstatePrefixes.put(\"MT\", new int[]{516,517});\n\tssnSstatePrefixes.put(\"NC\", new int[]{237,238,239,240,241,242,243,244,245,246,681,682,683,684,685,686,687,688,689,690});\n\tssnSstatePrefixes.put(\"ND\", new int[]{501,502});\n\tssnSstatePrefixes.put(\"NE\", new int[]{505,506,507,508});\n\tssnSstatePrefixes.put(\"NH\", new int[]{1,2,3});\n\tssnSstatePrefixes.put(\"NJ\", new int[]{135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158});\n\tssnSstatePrefixes.put(\"NM\", new int[]{525,585,648,649});\n\tssnSstatePrefixes.put(\"NV\", new int[]{530,680});\n\tssnSstatePrefixes.put(\"NY\", new int[]{50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134});\n\tssnSstatePrefixes.put(\"OH\", new int[]{268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302});\n\tssnSstatePrefixes.put(\"OK\", new int[]{440,441,442,443,444,445,446,447,448});\n\tssnSstatePrefixes.put(\"OR\", new int[]{540,541,542,543,544});\n\tssnSstatePrefixes.put(\"PA\", new int[]{159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211});\n\tssnSstatePrefixes.put(\"RI\", new int[]{35,36,37,38,39});\n\tssnSstatePrefixes.put(\"SC\", new int[]{247,248,249,250,251,654,655,656,657,658});\n\tssnSstatePrefixes.put(\"SD\", new int[]{503,504});\n\tssnSstatePrefixes.put(\"TN\", new int[]{408,409,410,411,412,413,414,415,756,757,758,759,760,761,762,763});\n\tssnSstatePrefixes.put(\"TX\", new int[]{449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645});\n\tssnSstatePrefixes.put(\"UT\", new int[]{528,529,646,647});\n\tssnSstatePrefixes.put(\"VA\", new int[]{223,224,225,226,227,228,229,230,231,691,692,693,694,695,696,697,698,699});\n\tssnSstatePrefixes.put(\"VT\", new int[]{8,9});\n\tssnSstatePrefixes.put(\"WA\", new int[]{531,532,533,534,535,536,537,538,539});\n\tssnSstatePrefixes.put(\"WI\", new int[]{387,388,389,390,391,392,393,394,395,396,397,398,399});\n\tssnSstatePrefixes.put(\"WV\", new int[]{232,233,234,235,236});\n\tssnSstatePrefixes.put(\"WY\", new int[]{520});\n\n\tsetThreadGlobals(\"SSN:SSNstatePrefixes\",ssnSstatePrefixes);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(states == null){\n\tstates = new String[]{\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"};\n\tsetThreadGlobals(\"SSN:States\",states);\n}\n\/\/ Checks to see if the set up parameters for the generation of SSN were already defined.\nif(possibleGroups == null){\n\tpossibleGroups = new int[]{1,3,5,7,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,2,4,6,8,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99};\n\tsetThreadGlobals(\"SSN:possibleGroups\",possibleGroups);\n}\n\norg.apache.commons.math3.random.MersenneTwister mt = new org.apache.commons.math3.random.MersenneTwister();\n\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\n\/\/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\/\/\nfinal String zeroChar = \"0\";\t\nString paddingPrefix = null;\n\nString modifiedSSN = iSSN.replaceAll(\"[^\\\\d]\", \"\");\n\nString oSSN = null;\n\/\/ Check that the SSN as overall of 9 digits (excluding any non-digits charecters):\nif(modifiedSSN.length() == 9){\n\t\n\t\/\/ Generate a random State.\n\tint randIndex = mt.nextInt(states.length-1);\n\t\n\tString state = states[randIndex];\n\t\/\/ Generate area number\n\tint[] selectedStatePrefixesArr = ssnSstatePrefixes.get(state);\n\trandIndex = fnGetRandomNumber(0,selectedStatePrefixesArr.length-1);\n\t\n\t\/\/ Generate area number\n\tint area = selectedStatePrefixesArr[randIndex];\n\tString areaStr = Integer.toString(area);\n\n\tint groupArea = subHighGroupMap.get(areaStr);\n\tboolean isFound = false;\n\t\/\/Iterate over possible groups array and check if groupArea is found\n\tfor(int i=0;i<possibleGroups.length;i++){\n\t\tif(possibleGroups[i] == groupArea){\n\t\t\tisFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isFound){\n\t\trandIndex = mt.nextInt(groupArea);\n\t}else{\/\/In order to prevent index out of bounds\n\t\trandIndex = 0;\n\t}\n\t\/\/ Generate group number\n\tint group = possibleGroups[randIndex]; \/\/ Generate valid group number\n\tString groupStr = Integer.toString(group);\n\t\/\/ Generate last four\n\tString lastFour = Integer.toString(mt.nextInt(9999 - 1) + 1);\n\t\/\/padd lastFour with zeros on the left so eventually we will have a number of 4 digits\n\tlastFour = k2_pad(lastFour,\"0\",LAST_FOUR_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 2 digits\n\tgroupStr = k2_pad(groupStr,\"0\",GROUP_SUBSTR_LENGTH,false) ;\n\t\n\t\/\/padd groupStr with zeros on the left so eventually we will have a number of 3 digits\n\tareaStr = k2_pad(areaStr,\"0\",AREA_SUBSTR_LENGTH,false) ;\n\t\n\tStringBuilder sb = new StringBuilder();\n\t\/\/ Build the random SSN.\n\tsb.append(areaStr);\n\tsb.append(SEPARATOR);\n\tsb.append(groupStr);\n\tsb.append(SEPARATOR);\n\tsb.append(lastFour);\n\n\toSSN = sb.toString();\n\t\/\/ If not, the SSN is not valid.\n} else {\n\t\/\/ Get the size of SSN in numbers.\n\tdouble ssnSize = java.lang.Math.pow(10.0,((double)iSSN.length()) - 1.0);\n\t\/\/ Initiate the Random Encryption argument.\n\tString paddingStr = org.apache.commons.lang.StringUtils.repeat(zeroChar, iSSN.length()); \n\tString randomEncryption = paddingStr + Integer.toString(fnGetRandomNumber(1,(int)ssnSize));\n\t\/\/ Mask the SSN.\n\toSSN = k2s_MaskField(iSSN,randomEncryption);\n}\n\nreturn oSSN;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGetCityBasedOnZip":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGetCityBasedOnZip"},"ID":{"value":"DataMaskingLibrary.fnGetCityBasedOnZip"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will return the City name based on the input Zip Code.\nThe function will translate the City name using the refZipCodes Global Container"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue(DB_INTERFACE_NAME, \"SELECT primary_city FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"', null);\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iZip","id":"fi.DataMaskingLibrary.fnGetCityBasedOnZip.0","index":"0","dataType":"String"},"Comment":{"value":"The Zip Code based on which to return the city name"}}},"OutputParams":{"Output":{"attr":{"name":"oCity","id":"fo.DataMaskingLibrary.fnGetCityBasedOnZip.0","index":"0","dataType":"String"},"Comment":{"value":"The City name"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetCityBasedOnZip.k2function.xml","createFunctionStrForWS":"function fnGetCityBasedOnZip($iZip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetCityBasedOnZip.k2function.xml';\r\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue(DB_INTERFACE_NAME, \"SELECT primary_city FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"', null);\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetCityBasedOnZip.k2function.xml';\r\nfunction fnGetCityBasedOnZip($iZip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetCityBasedOnZip.k2function.xml';\r\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME, \"SELECT primary_city FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"', null);\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGetRandomNumber":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGetRandomNumber"},"ID":{"value":"DataMaskingLibrary.fnGetRandomNumber"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will return a random value between iMin and iMax."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/return random number in the range [iMin,iMax]\nreturn new Random().nextInt(iMax - iMin + 1) + iMin;"},"IsSyntaxValid":{"value":"false"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iMin","id":"fi.DataMaskingLibrary.fnGetRandomNumber.0","index":"0","dataType":"Integer"},"Comment":{"value":"The lowest value to return"}},{"attr":{"name":"iMax","id":"fi.DataMaskingLibrary.fnGetRandomNumber.1","index":"1","dataType":"Integer"},"Comment":{"value":"The highest value to return"}}]},"OutputParams":{"Output":{"attr":{"name":"oRandomNumber","id":"fo.DataMaskingLibrary.fnGetRandomNumber.0","index":"0","dataType":"Integer"},"Comment":{"value":"The new random value"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomNumber.k2function.xml","createFunctionStrForWS":"function fnGetRandomNumber($iMin,$iMax){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomNumber.k2function.xml';\r\n\/\/return random number in the range [iMin,iMax]\nreturn new Random().nextInt(iMax - iMin + 1) + iMin;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomNumber.k2function.xml';\r\nfunction fnGetRandomNumber($iMin,$iMax){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomNumber.k2function.xml';\r\n\/\/return random number in the range [iMin,iMax]\nreturn new Random().nextInt(iMax - iMin + 1) + iMin;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGetRandomReferenceValue":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGetRandomReferenceValue"},"ID":{"value":"DataMaskingLibrary.fnGetRandomReferenceValue"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask a value based on a list of reference data existing in K2View in a form of either a table (ivv,vc or gc) or a Translation.\nThe funcion will identify where the reference data is located based on the iObject input value and what is the key that holds the information based on the $iKey input value;\nThen it will randomly select a different masked value from the reference list per each iValueToMask input value provided \nand will linked between the two values so if the same $iValueToMask if provided the same masked value will be returned.\nNote: This function does not use Shared Memory to store the information."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"@SuppressWarnings(\"unchecked\") \nMap<String, String> dmValuesMap = (Map<String, String>)getThreadGlobals(\"DM\");\nString maskedValue = null; \nStringBuilder keySb = new StringBuilder();\nkeySb.append(iObjectType);\nkeySb.append(\":\");\nkeySb.append(iObject);\nkeySb.append(\":\");\nkeySb.append(iKey);\nkeySb.append(\":\");\nkeySb.append(iValueToMask);\nString key = keySb.toString();\n\/\/if global DM is set\nif(dmValuesMap!=null){\n\tmaskedValue = dmValuesMap.get(key);\n}\n\t\nif(maskedValue != null){\n\treturn maskedValue;\n} else {\/\/ If the iValueToMask hasn't already been masked\n\n\t\tdmValuesMap = new HashMap<String, String>();\n\t\tkeySb.setLength(0);\n\t\tkeySb.append(\"COUNTS\");\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObjectType);\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObject);\n\t\t\/\/key is COUNTS:iObjectType:iObject\n\t\tkey = keySb.toString();\n\t\t\/\/ Check is the Object Type is a Table (ivv,vc or gc).\n\t\tif(\"TABLE\".equals(iObjectType.toUpperCase())){\n\t\t\t\/\/ Check to see if the size (number of rows) in the Table is already known.\n\t\t\t\/\/  This is done to eliminate the need to count this information more than once.\n\t\t\tif(dmValuesMap.get(key) == null){\n\t\t\t\t\/\/ If \"No\", calculate the number of rows.\n\t\t\t\tint objectCount = (int)DBSelectValue(DB_INTERFACE_NAME,\"SELECT COUNT(1) FROM \"+'\"'+iObject+'\"' ,null);\n\t\t\t\t\/\/ Update the Gloabal array so this calculation will not have to happen again.\n\t\t\t\tdmValuesMap.put(key,Integer.toString(objectCount));\n\t\t\t}\n\t\t\tString rowCount = dmValuesMap.get(key);\n\t\t\n\t\t\t\/\/ Generate a random value representing the row number that will be used for the masked value.\n\t\t\t\/\/  The random value is set between 1 and the number of rows in the object.\n\t\t\tint randRowValue = fnGetRandomNumber(1, Integer.parseInt(rowCount));\n\t\t\t\n\t\t\t\/\/ Select a new value to be used as the masked value based on the $randRowValue.\n\t\t\tString oRandomMaskedRowValue = (String)DBSelectValue(DB_INTERFACE_NAME,\"SELECT \"+'\"'+iKey+'\"'+\" FROM \"+'\"'+iObject+'\"'+\" where rowid=\"+'\"'+randRowValue+'\"', null);\n\t\t\t\n\t\t\t\/\/ Add support for apostrophe, replacing ' with '', e.g: O'Brain => O''Brain.\n\t\t\tString oRandomMaskedValue = oRandomMaskedRowValue.replaceAll(\"'\",\"''\" );\n\t\t\tkeySb.setLength(0);\n\t\t\tkeySb.append(iObjectType);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iObject);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iKey);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iValueToMask);\n\t\t\t\n\t\t\t\/\/key is iObjectType:iObject:iKey:iValueToMask\n\t\t\tdmValuesMap.put(keySb.toString(), oRandomMaskedValue);\n\t\t\tsetThreadGlobals(\"DM\",dmValuesMap);\n\t\t\t\n\t\t\t\/\/ Return the masked value.\n\t\t\treturn oRandomMaskedValue;\n\t\t}\n\t}\n\t\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iObjectType","id":"fi.DataMaskingLibrary.fnGetRandomReferenceValue.0","index":"0","dataType":"String"},"Comment":{"value":"The type of the K2 Object that will be used to reference the data ('Table' or 'Translation')."}},{"attr":{"name":"iObject","id":"fi.DataMaskingLibrary.fnGetRandomReferenceValue.1","index":"1","dataType":"String"},"Comment":{"value":"The name of the object."}},{"attr":{"name":"iKey","id":"fi.DataMaskingLibrary.fnGetRandomReferenceValue.2","index":"2","dataType":"String"},"Comment":{"value":"The name of the key\/field to use as reference in the iObject."}},{"attr":{"name":"iValueToMask","id":"fi.DataMaskingLibrary.fnGetRandomReferenceValue.3","index":"3","dataType":"String"},"Comment":{"value":"The Value to be masked."}}]},"OutputParams":{"Output":{"attr":{"name":"oRandomMaskedValue","id":"fo.DataMaskingLibrary.fnGetRandomReferenceValue.0","index":"0","dataType":"String"},"Comment":{"value":"The masked value."}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomReferenceValue.k2function.xml","createFunctionStrForWS":"function fnGetRandomReferenceValue($iObjectType,$iObject,$iKey,$iValueToMask){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomReferenceValue.k2function.xml';\r\n@SuppressWarnings(\"unchecked\") \nMap<String, String> dmValuesMap = (Map<String, String>)getThreadGlobals(\"DM\");\nString maskedValue = null; \nStringBuilder keySb = new StringBuilder();\nkeySb.append(iObjectType);\nkeySb.append(\":\");\nkeySb.append(iObject);\nkeySb.append(\":\");\nkeySb.append(iKey);\nkeySb.append(\":\");\nkeySb.append(iValueToMask);\nString key = keySb.toString();\n\/\/if global DM is set\nif(dmValuesMap!=null){\n\tmaskedValue = dmValuesMap.get(key);\n}\n\t\nif(maskedValue != null){\n\treturn maskedValue;\n} else {\/\/ If the iValueToMask hasn't already been masked\n\n\t\tdmValuesMap = new HashMap<String, String>();\n\t\tkeySb.setLength(0);\n\t\tkeySb.append(\"COUNTS\");\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObjectType);\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObject);\n\t\t\/\/key is COUNTS:iObjectType:iObject\n\t\tkey = keySb.toString();\n\t\t\/\/ Check is the Object Type is a Table (ivv,vc or gc).\n\t\tif(\"TABLE\".equals(iObjectType.toUpperCase())){\n\t\t\t\/\/ Check to see if the size (number of rows) in the Table is already known.\n\t\t\t\/\/  This is done to eliminate the need to count this information more than once.\n\t\t\tif(dmValuesMap.get(key) == null){\n\t\t\t\t\/\/ If \"No\", calculate the number of rows.\n\t\t\t\tint objectCount = (int)DBSelectValue(DB_INTERFACE_NAME,\"SELECT COUNT(1) FROM \"+'\"'+iObject+'\"' ,null);\n\t\t\t\t\/\/ Update the Gloabal array so this calculation will not have to happen again.\n\t\t\t\tdmValuesMap.put(key,Integer.toString(objectCount));\n\t\t\t}\n\t\t\tString rowCount = dmValuesMap.get(key);\n\t\t\n\t\t\t\/\/ Generate a random value representing the row number that will be used for the masked value.\n\t\t\t\/\/  The random value is set between 1 and the number of rows in the object.\n\t\t\tint randRowValue = fnGetRandomNumber(1, Integer.parseInt(rowCount));\n\t\t\t\n\t\t\t\/\/ Select a new value to be used as the masked value based on the $randRowValue.\n\t\t\tString oRandomMaskedRowValue = (String)DBSelectValue(DB_INTERFACE_NAME,\"SELECT \"+'\"'+iKey+'\"'+\" FROM \"+'\"'+iObject+'\"'+\" where rowid=\"+'\"'+randRowValue+'\"', null);\n\t\t\t\n\t\t\t\/\/ Add support for apostrophe, replacing ' with '', e.g: O'Brain => O''Brain.\n\t\t\tString oRandomMaskedValue = oRandomMaskedRowValue.replaceAll(\"'\",\"''\" );\n\t\t\tkeySb.setLength(0);\n\t\t\tkeySb.append(iObjectType);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iObject);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iKey);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iValueToMask);\n\t\t\t\n\t\t\t\/\/key is iObjectType:iObject:iKey:iValueToMask\n\t\t\tdmValuesMap.put(keySb.toString(), oRandomMaskedValue);\n\t\t\tsetThreadGlobals(\"DM\",dmValuesMap);\n\t\t\t\n\t\t\t\/\/ Return the masked value.\n\t\t\treturn oRandomMaskedValue;\n\t\t}\n\t}\n\t\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomReferenceValue.k2function.xml';\r\nfunction fnGetRandomReferenceValue($iObjectType,$iObject,$iKey,$iValueToMask){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetRandomReferenceValue.k2function.xml';\r\n@SuppressWarnings(\"unchecked\") \nMap<String, String> dmValuesMap = (Map<String, String>)getThreadGlobals(\"DM\");\nString maskedValue = null; \nStringBuilder keySb = new StringBuilder();\nkeySb.append(iObjectType);\nkeySb.append(\":\");\nkeySb.append(iObject);\nkeySb.append(\":\");\nkeySb.append(iKey);\nkeySb.append(\":\");\nkeySb.append(iValueToMask);\nString key = keySb.toString();\n\/\/if global DM is set\nif(dmValuesMap!=null){\n\tmaskedValue = dmValuesMap.get(key);\n}\n\t\nif(maskedValue != null){\n\treturn maskedValue;\n} else {\/\/ If the iValueToMask hasn't already been masked\n\n\t\tdmValuesMap = new HashMap<String, String>();\n\t\tkeySb.setLength(0);\n\t\tkeySb.append(\"COUNTS\");\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObjectType);\n\t\tkeySb.append(\":\");\n\t\tkeySb.append(iObject);\n\t\t\/\/key is COUNTS:iObjectType:iObject\n\t\tkey = keySb.toString();\n\t\t\/\/ Check is the Object Type is a Table (ivv,vc or gc).\n\t\tif(\"TABLE\".equals(iObjectType.toUpperCase())){\n\t\t\t\/\/ Check to see if the size (number of rows) in the Table is already known.\n\t\t\t\/\/  This is done to eliminate the need to count this information more than once.\n\t\t\tif(dmValuesMap.get(key) == null){\n\t\t\t\t\/\/ If \"No\", calculate the number of rows.\n\t\t\t\tint objectCount = (int)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME,\"SELECT COUNT(1) FROM \"+'\"'+iObject+'\"' ,null);\n\t\t\t\t\/\/ Update the Gloabal array so this calculation will not have to happen again.\n\t\t\t\tdmValuesMap.put(key,Integer.toString(objectCount));\n\t\t\t}\n\t\t\tString rowCount = dmValuesMap.get(key);\n\t\t\n\t\t\t\/\/ Generate a random value representing the row number that will be used for the masked value.\n\t\t\t\/\/  The random value is set between 1 and the number of rows in the object.\n\t\t\tint randRowValue = fnGetRandomNumber(1, Integer.parseInt(rowCount));\n\t\t\t\n\t\t\t\/\/ Select a new value to be used as the masked value based on the $randRowValue.\n\t\t\tString oRandomMaskedRowValue = (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME,\"SELECT \"+'\"'+iKey+'\"'+\" FROM \"+'\"'+iObject+'\"'+\" where rowid=\"+'\"'+randRowValue+'\"', null);\n\t\t\t\n\t\t\t\/\/ Add support for apostrophe, replacing ' with '', e.g: O'Brain => O''Brain.\n\t\t\tString oRandomMaskedValue = oRandomMaskedRowValue.replaceAll(\"'\",\"''\" );\n\t\t\tkeySb.setLength(0);\n\t\t\tkeySb.append(iObjectType);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iObject);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iKey);\n\t\t\tkeySb.append(\":\");\n\t\t\tkeySb.append(iValueToMask);\n\t\t\t\n\t\t\t\/\/key is iObjectType:iObject:iKey:iValueToMask\n\t\t\tdmValuesMap.put(keySb.toString(), oRandomMaskedValue);\n\t\t\tsetThreadGlobals(\"DM\",dmValuesMap);\n\t\t\t\n\t\t\t\/\/ Return the masked value.\n\t\t\treturn oRandomMaskedValue;\n\t\t}\n\t}\n\t\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnGetStateBasedOnZip":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnGetStateBasedOnZip"},"ID":{"value":"DataMaskingLibrary.fnGetStateBasedOnZip"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will return the State name based on the input Zip Code.\nThe function will translate the State name using the refZipCodes Global Container."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue(DB_INTERFACE_NAME,\"SELECT state FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"',null);\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iZip","id":"fi.DataMaskingLibrary.fnGetStateBasedOnZip.0","index":"0","dataType":"String"},"Comment":{"value":"The Zip Code based on which to return the city name"}}},"OutputParams":{"Output":{"attr":{"name":"oState","id":"fo.DataMaskingLibrary.fnGetStateBasedOnZip.0","index":"0","dataType":"String"},"Comment":{"value":"The State name"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetStateBasedOnZip.k2function.xml","createFunctionStrForWS":"function fnGetStateBasedOnZip($iZip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetStateBasedOnZip.k2function.xml';\r\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue(DB_INTERFACE_NAME,\"SELECT state FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"',null);\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetStateBasedOnZip.k2function.xml';\r\nfunction fnGetStateBasedOnZip($iZip){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnGetStateBasedOnZip.k2function.xml';\r\n\/\/ Get the City name from the hcZipCodes Global Container.\nreturn (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME,\"SELECT state FROM refZipCodes WHERE zip=\"+'\"'+iZip+'\"',null);\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskCompanyEIN":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskCompanyEIN"},"ID":{"value":"DataMaskingLibrary.fnMaskCompanyEIN"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask a Company EIN by randomly masking every digit in the EIN expect the '-' sign."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/ensure input EIN is not null and not empty\nif((iEIN != null && !iEIN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new EIN was accepted\n\t\t\tboolean notUsedEIN = true;\n\t\t\t\/\/Boolean isEINExists = null;\n\t\t\tString existingEIN = null;\n\t\t\tString einHashCode = Integer.toString(iEIN.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new EIN. counter ensures we will not have infinite loop\n\t\t\twhile(notUsedEIN && counter<=maxNumOfIter){\n\t\t\t\texistingEIN = jds.get(\"existingSSN[\"+einHashCode+\"]\");\n\t\t\t\tif(existingEIN != null){\n\t\t\t\t\t\/\/if  yes, return the existing EIN\n\t\t\t\t\treturn  existingEIN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newEIN = null;\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new EIN.\n\t\t\t\t\t\tnewEIN = fnGenerateRandomValidEIN(iEIN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the EIN using the provided encryption\n\t\t\t\t\t\tnewEIN = k2s_MaskField(newEIN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newEIN+\"]\",einHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing EIN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+einHashCode+\"]\",newEIN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedEIN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedEIN = false;\t\n\t\t\t\t\t\t\t\/\/ Return the new EIN.\n\t\t\t\t\t\t\treturn newEIN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask company EIN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iEIN","id":"fi.DataMaskingLibrary.fnMaskCompanyEIN.0","index":"0","dataType":"String"},"Comment":{"value":"The company's EIN"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskCompanyEIN.1","index":"1","dataType":"String"},"Comment":{"value":"The Encryption to use to mask the EIN"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedEIN","id":"fo.DataMaskingLibrary.fnMaskCompanyEIN.0","index":"0","dataType":"String"},"Comment":{"value":"The masked EIN"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCompanyEIN.k2function.xml","createFunctionStrForWS":"function fnMaskCompanyEIN($iEIN,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCompanyEIN.k2function.xml';\r\n\/\/ensure input EIN is not null and not empty\nif((iEIN != null && !iEIN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new EIN was accepted\n\t\t\tboolean notUsedEIN = true;\n\t\t\t\/\/Boolean isEINExists = null;\n\t\t\tString existingEIN = null;\n\t\t\tString einHashCode = Integer.toString(iEIN.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new EIN. counter ensures we will not have infinite loop\n\t\t\twhile(notUsedEIN && counter<=maxNumOfIter){\n\t\t\t\texistingEIN = jds.get(\"existingSSN[\"+einHashCode+\"]\");\n\t\t\t\tif(existingEIN != null){\n\t\t\t\t\t\/\/if  yes, return the existing EIN\n\t\t\t\t\treturn  existingEIN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newEIN = null;\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new EIN.\n\t\t\t\t\t\tnewEIN = fnGenerateRandomValidEIN(iEIN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the EIN using the provided encryption\n\t\t\t\t\t\tnewEIN = k2s_MaskField(newEIN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newEIN+\"]\",einHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing EIN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+einHashCode+\"]\",newEIN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedEIN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedEIN = false;\t\n\t\t\t\t\t\t\t\/\/ Return the new EIN.\n\t\t\t\t\t\t\treturn newEIN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask company EIN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCompanyEIN.k2function.xml';\r\nfunction fnMaskCompanyEIN($iEIN,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCompanyEIN.k2function.xml';\r\n\/\/ensure input EIN is not null and not empty\nif((iEIN != null && !iEIN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new EIN was accepted\n\t\t\tboolean notUsedEIN = true;\n\t\t\t\/\/Boolean isEINExists = null;\n\t\t\tString existingEIN = null;\n\t\t\tString einHashCode = Integer.toString(iEIN.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new EIN. counter ensures we will not have infinite loop\n\t\t\twhile(notUsedEIN && counter<=maxNumOfIter){\n\t\t\t\texistingEIN = jds.get(\"existingSSN[\"+einHashCode+\"]\");\n\t\t\t\tif(existingEIN != null){\n\t\t\t\t\t\/\/if  yes, return the existing EIN\n\t\t\t\t\treturn  existingEIN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newEIN = null;\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new EIN.\n\t\t\t\t\t\tnewEIN = fnGenerateRandomValidEIN(iEIN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the EIN using the provided encryption\n\t\t\t\t\t\tnewEIN = k2s_MaskField(newEIN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newEIN+\"]\",einHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing EIN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+einHashCode+\"]\",newEIN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedEIN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedEIN = false;\t\n\t\t\t\t\t\t\t\/\/ Return the new EIN.\n\t\t\t\t\t\t\treturn newEIN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask company EIN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskCreditCard":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskCreditCard"},"ID":{"value":"DataMaskingLibrary.fnMaskCreditCard"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will generate a valid masked Credit Card number based on the type of the card.\nCurrently the following card types are supported: \n   * Visa\n   * MasterCard\n   * American Express (Amex)\n   * Discover\n   * Diners\n   * Jcb\n   * enRoute\n   * Voyager\n   * Solo\n   * Maestro\n   * Switch\nThe function will first check if that specific credit card was already masked previously and will return the masked value if it was.\nOtherwise it will generate a new masked valid credit card and will return it."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/get connection from Redis DB\nredis.clients.jedis.Jedis jds = null;\ntry{\n\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\tif(jds != null){\n\t\t\/\/remove all the non-numeric characters\n\t\tString modifiedCreditCardNumber = iCreditCardNumber.replaceAll(\"[^\\\\d]\", \"\");\n\t\tboolean notUsedCC = true;\n\t\tint counter = 0;\n\t\tString creditCardHashCode = Integer.toString(modifiedCreditCardNumber.hashCode());\n\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\twhile(notUsedCC && counter<=maxNumOfIter){\n\t\t\tcounter++;\n\t\t\tString existingCC = null;\n\t\t\texistingCC = jds.get(\"existingCC[\"+creditCardHashCode+\"]\");\n\t\t\t\n\t\t\t\/\/ Checks if a new Credit Card was already generated before for this iCreditCardNumber.\n\t\t\tif(existingCC != null){\n\t\t\t\t\/\/if  yes, return the existing CC\n\t\t\t\treturn  existingCC;\n\t\t\t}else{\/\/ Else - A Credit Card was not generated for the iCreditCardNumber before.\n\t\t\t\t\/\/ ############### Setup ############### \/\/\n\t\t\t\n\t\t\t\t\/\/ Create the Array that will hold all the Credit Card's valid Prefixes.\n\t\t\t\t\/\/  Each credit card has its own dedicated prefix numbers.\n\t\t\t\tMap<String, String[]> ccArray = new HashMap<String, String[]>();\n\t\t\t\n\t\t\t\t\/\/ Add the valid American Express (Amex) Prefixes:\n\t\t\t\tccArray.put(\"AMEX_Length\", new String[]{\"15\"});\n\t\t\t\tccArray.put(\"AMEX_Prefix\", new String[]{\"34\",\"37\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Diners Prefixes:\n\t\t\t\tccArray.put(\"DINERS_Length\", new String[]{\"14\",\"15\",\"16\"});\n\t\t\t\tccArray.put(\"DINERS_Prefix\", new String[]{\"36\",\"38\",\"54\",\"55\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"2014\",\"2149\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Discover Prefixes:\n\t\t\t\tccArray.put(\"DISCOVER_Length\", new String[]{\"14\",\"16\"});\n\t\t\t\tccArray.put(\"DISCOVER_Prefix\", new String[]{\"64\",\"65\",\"622\",\"6011\"});\n\t\t\n\t\t\t\t\/\/ Add the valid JCB Prefixes:\n\t\t\t\tccArray.put(\"JCB_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"JCB_Prefix\", new String[]{\"35\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid LaserCard Switch:\n\t\t\t\tccArray.put(\"LASERCARD_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"LASERCARD_Prefix\", new String[]{\"6304\",\"6706\",\"6771\",\"6709\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Maestro Prefixes:\n\t\t\t\tccArray.put(\"MAESTRO_Length\", new String[]{\"12\",\"13\",\"14\",\"15\",\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"MAESTRO_Prefix\", new String[]{\"5018\",\"5020\",\"5038\",\"6304\",\"6759\",\"6761\",\"6762\",\"6763\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid MasterCard Prefixes:\n\t\t\t\tccArray.put(\"MASTERCARD_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"MASTERCARD_Prefix\", new String[]{\"51\",\"52\",\"53\",\"54\",\"55\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Solo Prefixes:\n\t\t\t\tccArray.put(\"SOLO_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SOLO_Prefix\", new String[]{\"6334\",\"6767\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Switch Switch:\n\t\t\t\tccArray.put(\"SWITCH_Length\", new String[]{\"16\",\"17\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SWITCH_Prefix\", new String[]{\"4903\",\"4905\",\"4911\",\"4936\",\"564182\",\"633110\",\"6333\",\"6759\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Visa Prefixes:\n\t\t\t\tccArray.put(\"VISA_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"VISA_Prefix\", new String[]{\"4\",\"4485\",\"4508\",\"4532\",\"4539\",\"4556\",\"4716\",\"4844\",\"4913\",\"4916\",\"4917\",\"4929\",\"417500\",\"40240071\"});\n\t\t\t\t\t\n\t\t\t\t\/\/ ############### Calculate a Random Valid Credit Card Number ############### \/\/\n\t\t\t\t\n\t\t\t\t\/\/ Transform the Credit Card Type into an UpperCase text.\n\t\t\t\tString iCreditCardTypeUpper = iCreditCardType.toUpperCase();\n\t\t\t\n\t\t\t\t\/\/ Select a new random valid length per the Credit Card Type.\n\t\t\t\t\/\/  Create a random position.\n\t\t\t\tint randomLengthPosition = fnGetRandomNumber(0,(ccArray.get(iCreditCardTypeUpper+\"_Length\")).length-1);\n\t\t\t\t\/\/  Extract the a valid length.\n\t\t\t\tString newCreditCardLength = (ccArray.get(iCreditCardTypeUpper+\"_Length\"))[randomLengthPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Select a random prefix poition for the new Credit Card.\n\t\t\t\tint randomPrefixPosition = fnGetRandomNumber(0, ccArray.get(iCreditCardTypeUpper+\"_Prefix\").length-1);\n\t\t\t\t\/\/ Extract the new prefix to be used by the masked value.\n\t\t\t\tString newCreditCardPrefix = (ccArray.get(iCreditCardTypeUpper+\"_Prefix\"))[randomPrefixPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Generate the new masked Credit Card.\n\t\t\t\tString oMaskedCreditCard = fnGenerateRandomValidCreditCard(newCreditCardLength,newCreditCardPrefix);\n\t\t\t\n\t\t\t\tint success = jds.setnx(\"maskedCC[\"+oMaskedCreditCard+\"]\",creditCardHashCode).intValue();\n\t\t\t\t\/\/ Checks if the new masked Credit Card is already used by another existing Credit Card.\n\t\t\t\tif(success == 1){\n\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\tsuccess = jds.setnx(\"existingCC[\"+creditCardHashCode+\"]\",oMaskedCreditCard).intValue(); \n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedCC to false to exist the loop.\n\t\t\t\t\t\tnotUsedCC = false;\t\n\t\t\t\t\t\t\/\/ Return the masked credit card.\n\t\t\t\t\t\treturn oMaskedCreditCard;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}catch(Exception e){\n\tthrow new Exception(\"Could not mask Credit Card.\",e.getCause());\n}finally{\n\tcloseJedisConnection(jds);\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iCreditCardType","id":"fi.DataMaskingLibrary.fnMaskCreditCard.0","index":"0","dataType":"String"},"Comment":{"value":"The Credit Card Type (Visa,MasterCard,Amex,Discover,Diners,Jcb,enRoute,Voyager, etc...)"}},{"attr":{"name":"iCreditCardNumber","id":"fi.DataMaskingLibrary.fnMaskCreditCard.1","index":"1","dataType":"String"},"Comment":{"value":"The Credit Card Number"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedCreditCard","id":"fo.DataMaskingLibrary.fnMaskCreditCard.0","index":"0","dataType":"String"},"Comment":{"value":"The masked Credit Card."}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditCard.k2function.xml","createFunctionStrForWS":"function fnMaskCreditCard($iCreditCardType,$iCreditCardNumber){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditCard.k2function.xml';\r\n\/\/get connection from Redis DB\nredis.clients.jedis.Jedis jds = null;\ntry{\n\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\tif(jds != null){\n\t\t\/\/remove all the non-numeric characters\n\t\tString modifiedCreditCardNumber = iCreditCardNumber.replaceAll(\"[^\\\\d]\", \"\");\n\t\tboolean notUsedCC = true;\n\t\tint counter = 0;\n\t\tString creditCardHashCode = Integer.toString(modifiedCreditCardNumber.hashCode());\n\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\twhile(notUsedCC && counter<=maxNumOfIter){\n\t\t\tcounter++;\n\t\t\tString existingCC = null;\n\t\t\texistingCC = jds.get(\"existingCC[\"+creditCardHashCode+\"]\");\n\t\t\t\n\t\t\t\/\/ Checks if a new Credit Card was already generated before for this iCreditCardNumber.\n\t\t\tif(existingCC != null){\n\t\t\t\t\/\/if  yes, return the existing CC\n\t\t\t\treturn  existingCC;\n\t\t\t}else{\/\/ Else - A Credit Card was not generated for the iCreditCardNumber before.\n\t\t\t\t\/\/ ############### Setup ############### \/\/\n\t\t\t\n\t\t\t\t\/\/ Create the Array that will hold all the Credit Card's valid Prefixes.\n\t\t\t\t\/\/  Each credit card has its own dedicated prefix numbers.\n\t\t\t\tMap<String, String[]> ccArray = new HashMap<String, String[]>();\n\t\t\t\n\t\t\t\t\/\/ Add the valid American Express (Amex) Prefixes:\n\t\t\t\tccArray.put(\"AMEX_Length\", new String[]{\"15\"});\n\t\t\t\tccArray.put(\"AMEX_Prefix\", new String[]{\"34\",\"37\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Diners Prefixes:\n\t\t\t\tccArray.put(\"DINERS_Length\", new String[]{\"14\",\"15\",\"16\"});\n\t\t\t\tccArray.put(\"DINERS_Prefix\", new String[]{\"36\",\"38\",\"54\",\"55\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"2014\",\"2149\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Discover Prefixes:\n\t\t\t\tccArray.put(\"DISCOVER_Length\", new String[]{\"14\",\"16\"});\n\t\t\t\tccArray.put(\"DISCOVER_Prefix\", new String[]{\"64\",\"65\",\"622\",\"6011\"});\n\t\t\n\t\t\t\t\/\/ Add the valid JCB Prefixes:\n\t\t\t\tccArray.put(\"JCB_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"JCB_Prefix\", new String[]{\"35\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid LaserCard Switch:\n\t\t\t\tccArray.put(\"LASERCARD_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"LASERCARD_Prefix\", new String[]{\"6304\",\"6706\",\"6771\",\"6709\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Maestro Prefixes:\n\t\t\t\tccArray.put(\"MAESTRO_Length\", new String[]{\"12\",\"13\",\"14\",\"15\",\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"MAESTRO_Prefix\", new String[]{\"5018\",\"5020\",\"5038\",\"6304\",\"6759\",\"6761\",\"6762\",\"6763\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid MasterCard Prefixes:\n\t\t\t\tccArray.put(\"MASTERCARD_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"MASTERCARD_Prefix\", new String[]{\"51\",\"52\",\"53\",\"54\",\"55\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Solo Prefixes:\n\t\t\t\tccArray.put(\"SOLO_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SOLO_Prefix\", new String[]{\"6334\",\"6767\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Switch Switch:\n\t\t\t\tccArray.put(\"SWITCH_Length\", new String[]{\"16\",\"17\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SWITCH_Prefix\", new String[]{\"4903\",\"4905\",\"4911\",\"4936\",\"564182\",\"633110\",\"6333\",\"6759\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Visa Prefixes:\n\t\t\t\tccArray.put(\"VISA_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"VISA_Prefix\", new String[]{\"4\",\"4485\",\"4508\",\"4532\",\"4539\",\"4556\",\"4716\",\"4844\",\"4913\",\"4916\",\"4917\",\"4929\",\"417500\",\"40240071\"});\n\t\t\t\t\t\n\t\t\t\t\/\/ ############### Calculate a Random Valid Credit Card Number ############### \/\/\n\t\t\t\t\n\t\t\t\t\/\/ Transform the Credit Card Type into an UpperCase text.\n\t\t\t\tString iCreditCardTypeUpper = iCreditCardType.toUpperCase();\n\t\t\t\n\t\t\t\t\/\/ Select a new random valid length per the Credit Card Type.\n\t\t\t\t\/\/  Create a random position.\n\t\t\t\tint randomLengthPosition = fnGetRandomNumber(0,(ccArray.get(iCreditCardTypeUpper+\"_Length\")).length-1);\n\t\t\t\t\/\/  Extract the a valid length.\n\t\t\t\tString newCreditCardLength = (ccArray.get(iCreditCardTypeUpper+\"_Length\"))[randomLengthPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Select a random prefix poition for the new Credit Card.\n\t\t\t\tint randomPrefixPosition = fnGetRandomNumber(0, ccArray.get(iCreditCardTypeUpper+\"_Prefix\").length-1);\n\t\t\t\t\/\/ Extract the new prefix to be used by the masked value.\n\t\t\t\tString newCreditCardPrefix = (ccArray.get(iCreditCardTypeUpper+\"_Prefix\"))[randomPrefixPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Generate the new masked Credit Card.\n\t\t\t\tString oMaskedCreditCard = fnGenerateRandomValidCreditCard(newCreditCardLength,newCreditCardPrefix);\n\t\t\t\n\t\t\t\tint success = jds.setnx(\"maskedCC[\"+oMaskedCreditCard+\"]\",creditCardHashCode).intValue();\n\t\t\t\t\/\/ Checks if the new masked Credit Card is already used by another existing Credit Card.\n\t\t\t\tif(success == 1){\n\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\tsuccess = jds.setnx(\"existingCC[\"+creditCardHashCode+\"]\",oMaskedCreditCard).intValue(); \n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedCC to false to exist the loop.\n\t\t\t\t\t\tnotUsedCC = false;\t\n\t\t\t\t\t\t\/\/ Return the masked credit card.\n\t\t\t\t\t\treturn oMaskedCreditCard;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}catch(Exception e){\n\tthrow new Exception(\"Could not mask Credit Card.\",e.getCause());\n}finally{\n\tcloseJedisConnection(jds);\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditCard.k2function.xml';\r\nfunction fnMaskCreditCard($iCreditCardType,$iCreditCardNumber){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditCard.k2function.xml';\r\n\/\/get connection from Redis DB\nredis.clients.jedis.Jedis jds = null;\ntry{\n\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\tif(jds != null){\n\t\t\/\/remove all the non-numeric characters\n\t\tString modifiedCreditCardNumber = iCreditCardNumber.replaceAll(\"[^\\\\d]\", \"\");\n\t\tboolean notUsedCC = true;\n\t\tint counter = 0;\n\t\tString creditCardHashCode = Integer.toString(modifiedCreditCardNumber.hashCode());\n\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\twhile(notUsedCC && counter<=maxNumOfIter){\n\t\t\tcounter++;\n\t\t\tString existingCC = null;\n\t\t\texistingCC = jds.get(\"existingCC[\"+creditCardHashCode+\"]\");\n\t\t\t\n\t\t\t\/\/ Checks if a new Credit Card was already generated before for this iCreditCardNumber.\n\t\t\tif(existingCC != null){\n\t\t\t\t\/\/if  yes, return the existing CC\n\t\t\t\treturn  existingCC;\n\t\t\t}else{\/\/ Else - A Credit Card was not generated for the iCreditCardNumber before.\n\t\t\t\t\/\/ ############### Setup ############### \/\/\n\t\t\t\n\t\t\t\t\/\/ Create the Array that will hold all the Credit Card's valid Prefixes.\n\t\t\t\t\/\/  Each credit card has its own dedicated prefix numbers.\n\t\t\t\tMap<String, String[]> ccArray = new HashMap<String, String[]>();\n\t\t\t\n\t\t\t\t\/\/ Add the valid American Express (Amex) Prefixes:\n\t\t\t\tccArray.put(\"AMEX_Length\", new String[]{\"15\"});\n\t\t\t\tccArray.put(\"AMEX_Prefix\", new String[]{\"34\",\"37\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Diners Prefixes:\n\t\t\t\tccArray.put(\"DINERS_Length\", new String[]{\"14\",\"15\",\"16\"});\n\t\t\t\tccArray.put(\"DINERS_Prefix\", new String[]{\"36\",\"38\",\"54\",\"55\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"2014\",\"2149\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Discover Prefixes:\n\t\t\t\tccArray.put(\"DISCOVER_Length\", new String[]{\"14\",\"16\"});\n\t\t\t\tccArray.put(\"DISCOVER_Prefix\", new String[]{\"64\",\"65\",\"622\",\"6011\"});\n\t\t\n\t\t\t\t\/\/ Add the valid JCB Prefixes:\n\t\t\t\tccArray.put(\"JCB_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"JCB_Prefix\", new String[]{\"35\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid LaserCard Switch:\n\t\t\t\tccArray.put(\"LASERCARD_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"LASERCARD_Prefix\", new String[]{\"6304\",\"6706\",\"6771\",\"6709\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Maestro Prefixes:\n\t\t\t\tccArray.put(\"MAESTRO_Length\", new String[]{\"12\",\"13\",\"14\",\"15\",\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"MAESTRO_Prefix\", new String[]{\"5018\",\"5020\",\"5038\",\"6304\",\"6759\",\"6761\",\"6762\",\"6763\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid MasterCard Prefixes:\n\t\t\t\tccArray.put(\"MASTERCARD_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"MASTERCARD_Prefix\", new String[]{\"51\",\"52\",\"53\",\"54\",\"55\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Solo Prefixes:\n\t\t\t\tccArray.put(\"SOLO_Length\", new String[]{\"16\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SOLO_Prefix\", new String[]{\"6334\",\"6767\"});\n\t\t\t\n\t\t\t\t\/\/ Add the valid Switch Switch:\n\t\t\t\tccArray.put(\"SWITCH_Length\", new String[]{\"16\",\"17\",\"18\",\"19\"});\n\t\t\t\tccArray.put(\"SWITCH_Prefix\", new String[]{\"4903\",\"4905\",\"4911\",\"4936\",\"564182\",\"633110\",\"6333\",\"6759\"});\n\t\t\t\t\n\t\t\t\t\/\/ Add the valid Visa Prefixes:\n\t\t\t\tccArray.put(\"VISA_Length\", new String[]{\"16\"});\n\t\t\t\tccArray.put(\"VISA_Prefix\", new String[]{\"4\",\"4485\",\"4508\",\"4532\",\"4539\",\"4556\",\"4716\",\"4844\",\"4913\",\"4916\",\"4917\",\"4929\",\"417500\",\"40240071\"});\n\t\t\t\t\t\n\t\t\t\t\/\/ ############### Calculate a Random Valid Credit Card Number ############### \/\/\n\t\t\t\t\n\t\t\t\t\/\/ Transform the Credit Card Type into an UpperCase text.\n\t\t\t\tString iCreditCardTypeUpper = iCreditCardType.toUpperCase();\n\t\t\t\n\t\t\t\t\/\/ Select a new random valid length per the Credit Card Type.\n\t\t\t\t\/\/  Create a random position.\n\t\t\t\tint randomLengthPosition = fnGetRandomNumber(0,(ccArray.get(iCreditCardTypeUpper+\"_Length\")).length-1);\n\t\t\t\t\/\/  Extract the a valid length.\n\t\t\t\tString newCreditCardLength = (ccArray.get(iCreditCardTypeUpper+\"_Length\"))[randomLengthPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Select a random prefix poition for the new Credit Card.\n\t\t\t\tint randomPrefixPosition = fnGetRandomNumber(0, ccArray.get(iCreditCardTypeUpper+\"_Prefix\").length-1);\n\t\t\t\t\/\/ Extract the new prefix to be used by the masked value.\n\t\t\t\tString newCreditCardPrefix = (ccArray.get(iCreditCardTypeUpper+\"_Prefix\"))[randomPrefixPosition];\n\t\t\t\t\n\t\t\t\t\/\/ Generate the new masked Credit Card.\n\t\t\t\tString oMaskedCreditCard = fnGenerateRandomValidCreditCard(newCreditCardLength,newCreditCardPrefix);\n\t\t\t\n\t\t\t\tint success = jds.setnx(\"maskedCC[\"+oMaskedCreditCard+\"]\",creditCardHashCode).intValue();\n\t\t\t\t\/\/ Checks if the new masked Credit Card is already used by another existing Credit Card.\n\t\t\t\tif(success == 1){\n\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\tsuccess = jds.setnx(\"existingCC[\"+creditCardHashCode+\"]\",oMaskedCreditCard).intValue(); \n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedCC to false to exist the loop.\n\t\t\t\t\t\tnotUsedCC = false;\t\n\t\t\t\t\t\t\/\/ Return the masked credit card.\n\t\t\t\t\t\treturn oMaskedCreditCard;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}catch(Exception e){\n\tthrow new Exception(\"Could not mask Credit Card.\",e.getCause());\n}finally{\n\tcloseJedisConnection(jds);\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskCreditScore":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskCreditScore"},"ID":{"value":"DataMaskingLibrary.fnMaskCreditScore"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"return fnGetRandomNumber(350,850);"},"IsSyntaxValid":{"value":"false"},"IsRootFunction":{"value":"false"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"oMaskedCreditScore","id":"fo.DataMaskingLibrary.fnMaskCreditScore.0","index":"0","dataType":"Integer"},"Comment":{"value":"The new random credit score"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditScore.k2function.xml","createFunctionStrForWS":"function fnMaskCreditScore(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditScore.k2function.xml';\r\nreturn fnGetRandomNumber(350,850);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditScore.k2function.xml';\r\nfunction fnMaskCreditScore(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskCreditScore.k2function.xml';\r\nreturn fnGetRandomNumber(350,850);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskDOB":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskDOB"},"ID":{"value":"DataMaskingLibrary.fnMaskDOB"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask the DOB (Date of Birth) by simply adding or substracting number of days from its DOB.\nThe function will add a random number between 0 and the iDays value to the iDOB if iOperation is +, and will substract them if iOperation is -."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"final String SUM_OPER = \"+\";\nfinal String SUBSTRACT_OPER = \"-\";\n\n\/\/ Determine if to add or substract the iDays from\/to iDOB\nif (iDOB!=null && !iDOB.isEmpty()){\n\t\/\/format the date \n\tjava.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);\n\tCalendar c = Calendar.getInstance();\n\t\/\/set the time for the calendar object\n\tc.setTime(sdf.parse(iDOB));\n\tString oMasedDOB = \"\";\n\t\/\/generate random number which will be the number of days that will add\/substracted to\/from the input date\n\tint shiftDays = fnGetRandomNumber(0,iDays);\n\t\n\tif(iOperation.equals(SUM_OPER)){\t\n\t\t\/\/ Add shiftDays to iDOB\n\t\tc.add(Calendar.DATE, shiftDays);\n\t} else if(iOperation.equals(SUBSTRACT_OPER)){ \/\/ Substract days\n\t\t\/\/ Substract shiftDays from iDOB\n\t\tc.add(Calendar.DATE, -1*shiftDays);\n\t}else{\/\/in case of invalid operator \n\t\treportUserMessage(\"Invalid Operation Param\");\n\t\treturn oMasedDOB;\n\t}\n\toMasedDOB = sdf.format(c.getTime());\n\t\/\/ Return the masked DOB\n\treturn sdf.format(sdf.parse(oMasedDOB));\n}\n\nreturn iDOB;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iDOB","id":"fi.DataMaskingLibrary.fnMaskDOB.0","index":"0","dataType":"String"},"Comment":{"value":"Date of Birth"}},{"attr":{"name":"iOperation","id":"fi.DataMaskingLibrary.fnMaskDOB.1","index":"1","dataType":"String"},"Comment":{"value":"+ to add days, - to substract days"}},{"attr":{"name":"iDays","id":"fi.DataMaskingLibrary.fnMaskDOB.2","index":"2","dataType":"Integer"},"Comment":{"value":"Number of days"}}]},"OutputParams":{"Output":{"attr":{"name":"iMaskedDOB","id":"fo.DataMaskingLibrary.fnMaskDOB.0","index":"0","dataType":"String"},"Comment":{"value":"The Masked Date Of Birth"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskDOB.k2function.xml","createFunctionStrForWS":"function fnMaskDOB($iDOB,$iOperation,$iDays){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskDOB.k2function.xml';\r\nfinal String SUM_OPER = \"+\";\nfinal String SUBSTRACT_OPER = \"-\";\n\n\/\/ Determine if to add or substract the iDays from\/to iDOB\nif (iDOB!=null && !iDOB.isEmpty()){\n\t\/\/format the date \n\tjava.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);\n\tCalendar c = Calendar.getInstance();\n\t\/\/set the time for the calendar object\n\tc.setTime(sdf.parse(iDOB));\n\tString oMasedDOB = \"\";\n\t\/\/generate random number which will be the number of days that will add\/substracted to\/from the input date\n\tint shiftDays = fnGetRandomNumber(0,iDays);\n\t\n\tif(iOperation.equals(SUM_OPER)){\t\n\t\t\/\/ Add shiftDays to iDOB\n\t\tc.add(Calendar.DATE, shiftDays);\n\t} else if(iOperation.equals(SUBSTRACT_OPER)){ \/\/ Substract days\n\t\t\/\/ Substract shiftDays from iDOB\n\t\tc.add(Calendar.DATE, -1*shiftDays);\n\t}else{\/\/in case of invalid operator \n\t\treportUserMessage(\"Invalid Operation Param\");\n\t\treturn oMasedDOB;\n\t}\n\toMasedDOB = sdf.format(c.getTime());\n\t\/\/ Return the masked DOB\n\treturn sdf.format(sdf.parse(oMasedDOB));\n}\n\nreturn iDOB;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskDOB.k2function.xml';\r\nfunction fnMaskDOB($iDOB,$iOperation,$iDays){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskDOB.k2function.xml';\r\nfinal String SUM_OPER = \"+\";\nfinal String SUBSTRACT_OPER = \"-\";\n\n\/\/ Determine if to add or substract the iDays from\/to iDOB\nif (iDOB!=null && !iDOB.isEmpty()){\n\t\/\/format the date \n\tjava.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);\n\tCalendar c = Calendar.getInstance();\n\t\/\/set the time for the calendar object\n\tc.setTime(sdf.parse(iDOB));\n\tString oMasedDOB = \"\";\n\t\/\/generate random number which will be the number of days that will add\/substracted to\/from the input date\n\tint shiftDays = fnGetRandomNumber(0,iDays);\n\t\n\tif(iOperation.equals(SUM_OPER)){\t\n\t\t\/\/ Add shiftDays to iDOB\n\t\tc.add(Calendar.DATE, shiftDays);\n\t} else if(iOperation.equals(SUBSTRACT_OPER)){ \/\/ Substract days\n\t\t\/\/ Substract shiftDays from iDOB\n\t\tc.add(Calendar.DATE, -1*shiftDays);\n\t}else{\/\/in case of invalid operator \n\t\treportUserMessage(\"Invalid Operation Param\");\n\t\treturn oMasedDOB;\n\t}\n\toMasedDOB = sdf.format(c.getTime());\n\t\/\/ Return the masked DOB\n\treturn sdf.format(sdf.parse(oMasedDOB));\n}\n\nreturn iDOB;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskEmail":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskEmail"},"ID":{"value":"DataMaskingLibrary.fnMaskEmail"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask an Email Address by randomly masking every letter in the email address expect . and @ signs."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\n\/\/ If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\/\/ Check if the function calls to use a hard-coded Encryption (provided as an input)\n\t\/\/ or a randomized value.\n\t\/\/   If a random value is needed\n\t\t\t\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ For every charecter in the email address:\n\t\tfor(int i = 0 ; i < iEmail.length() ; i++){\n\t\t\tchar currentChar = iEmail.charAt(i);\n\t\t\t\/\/ If the current charecter equals . or @\n\t\t\tif(currentChar=='@' || currentChar=='.'){\n\t\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\t\/\/ Else - The current charecter is not . or @.\n\t\t\t} else {\n\t\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t\t}\t\t\n\t\t}\n\t\/\/ Else - use the provided encryption.\n\t} else {\n\t\t\/\/ Use the existing\/provided Encryption.\n\t\trandomEncryption = iEncryption;\n\t}\n\t\n\t\/\/ Mask the Email address.\n\treturn k2s_MaskField(iEmail,randomEncryption);\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iEmail","id":"fi.DataMaskingLibrary.fnMaskEmail.0","index":"0","dataType":"String"},"Comment":{"value":"The email address to mask"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskEmail.1","index":"1","dataType":"String"},"Comment":{"value":"The Encryption to use to mask the Email Address"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedEmail","id":"fo.DataMaskingLibrary.fnMaskEmail.0","index":"0","dataType":"String"},"Comment":{"value":"The masked Email Address"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskEmail.k2function.xml","createFunctionStrForWS":"function fnMaskEmail($iEmail,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskEmail.k2function.xml';\r\n\/\/ If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\/\/ Check if the function calls to use a hard-coded Encryption (provided as an input)\n\t\/\/ or a randomized value.\n\t\/\/   If a random value is needed\n\t\t\t\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ For every charecter in the email address:\n\t\tfor(int i = 0 ; i < iEmail.length() ; i++){\n\t\t\tchar currentChar = iEmail.charAt(i);\n\t\t\t\/\/ If the current charecter equals . or @\n\t\t\tif(currentChar=='@' || currentChar=='.'){\n\t\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\t\/\/ Else - The current charecter is not . or @.\n\t\t\t} else {\n\t\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t\t}\t\t\n\t\t}\n\t\/\/ Else - use the provided encryption.\n\t} else {\n\t\t\/\/ Use the existing\/provided Encryption.\n\t\trandomEncryption = iEncryption;\n\t}\n\t\n\t\/\/ Mask the Email address.\n\treturn k2s_MaskField(iEmail,randomEncryption);\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskEmail.k2function.xml';\r\nfunction fnMaskEmail($iEmail,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskEmail.k2function.xml';\r\n\/\/ If the iEmail is NULL then return NULL.\nif(iEmail!=null && !iEmail.isEmpty()){\n\t\/\/ Initiate the Random Encryption argument.\n\tString randomEncryption = \"\";\n\t\/\/ Check if the function calls to use a hard-coded Encryption (provided as an input)\n\t\/\/ or a randomized value.\n\t\/\/   If a random value is needed\n\t\t\t\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ For every charecter in the email address:\n\t\tfor(int i = 0 ; i < iEmail.length() ; i++){\n\t\t\tchar currentChar = iEmail.charAt(i);\n\t\t\t\/\/ If the current charecter equals . or @\n\t\t\tif(currentChar=='@' || currentChar=='.'){\n\t\t\t\t\/\/ Concatenate 0 to the Encrption arguent\n\t\t\t\trandomEncryption = randomEncryption + \"0\";\n\t\t\t\t\/\/ Else - The current charecter is not . or @.\n\t\t\t} else {\n\t\t\t\t\/\/ Concatenate a rnadom number to the Encryption argument\n\t\t\t\trandomEncryption = randomEncryption + Integer.toString(fnGetRandomNumber(0,9));\n\t\t\t}\t\t\n\t\t}\n\t\/\/ Else - use the provided encryption.\n\t} else {\n\t\t\/\/ Use the existing\/provided Encryption.\n\t\trandomEncryption = iEncryption;\n\t}\n\t\n\t\/\/ Mask the Email address.\n\treturn k2s_MaskField(iEmail,randomEncryption);\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskFieldAES":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskFieldAES"},"ID":{"value":"DataMaskingLibrary.fnMaskFieldAES"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask an input field using the iEncryption Key.\nIt will randomly generate the encryption."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"byte[] encrypted = null;\nfinal String key = \"abcdefghijklmnop\";\nfinal String initVector = org.apache.commons.lang.StringUtils.repeat(\"a\", 10240); \n\njavax.crypto.spec.IvParameterSpec iv =new javax.crypto.spec.IvParameterSpec(initVector.getBytes(\"UTF-8\"));\njavax.crypto.spec.SecretKeySpec skeySpec = new javax.crypto.spec.SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\njavax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"AES\/CBC\/PKCS5PADDING\");\ntry {\n\t\n    cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, skeySpec, iv);\n\n    encrypted = cipher.doFinal(iFieldValue.getBytes());\n\n    \/\/encrypted = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n\t\n    cipher.init(javax.crypto.Cipher.DECRYPT_MODE, skeySpec, iv);\n\tString encryptStr = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n    byte[] original = cipher.doFinal(org.apache.commons.codec.binary.Base64.decodeBase64(encryptStr));\n\n    return new String(original);\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\nreturn null;\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iFieldValue","id":"fi.DataMaskingLibrary.fnMaskFieldAES.0","index":"0","dataType":"String"},"Comment":{"value":"The value of the field."}}},"OutputParams":{"Output":{"attr":{"name":"oMasedField","id":"fo.DataMaskingLibrary.fnMaskFieldAES.0","index":"0","dataType":"String"},"Comment":{"value":"The mased field value."}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldAES.k2function.xml","createFunctionStrForWS":"function fnMaskFieldAES($iFieldValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldAES.k2function.xml';\r\nbyte[] encrypted = null;\nfinal String key = \"abcdefghijklmnop\";\nfinal String initVector = org.apache.commons.lang.StringUtils.repeat(\"a\", 10240); \n\njavax.crypto.spec.IvParameterSpec iv =new javax.crypto.spec.IvParameterSpec(initVector.getBytes(\"UTF-8\"));\njavax.crypto.spec.SecretKeySpec skeySpec = new javax.crypto.spec.SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\njavax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"AES\/CBC\/PKCS5PADDING\");\ntry {\n\t\n    cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, skeySpec, iv);\n\n    encrypted = cipher.doFinal(iFieldValue.getBytes());\n\n    \/\/encrypted = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n\t\n    cipher.init(javax.crypto.Cipher.DECRYPT_MODE, skeySpec, iv);\n\tString encryptStr = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n    byte[] original = cipher.doFinal(org.apache.commons.codec.binary.Base64.decodeBase64(encryptStr));\n\n    return new String(original);\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\nreturn null;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldAES.k2function.xml';\r\nfunction fnMaskFieldAES($iFieldValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldAES.k2function.xml';\r\nbyte[] encrypted = null;\nfinal String key = \"abcdefghijklmnop\";\nfinal String initVector = org.apache.commons.lang.StringUtils.repeat(\"a\", 10240); \n\njavax.crypto.spec.IvParameterSpec iv =new javax.crypto.spec.IvParameterSpec(initVector.getBytes(\"UTF-8\"));\njavax.crypto.spec.SecretKeySpec skeySpec = new javax.crypto.spec.SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\njavax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"AES\/CBC\/PKCS5PADDING\");\ntry {\n\t\n    cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, skeySpec, iv);\n\n    encrypted = cipher.doFinal(iFieldValue.getBytes());\n\n    \/\/encrypted = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n\t\n    cipher.init(javax.crypto.Cipher.DECRYPT_MODE, skeySpec, iv);\n\tString encryptStr = org.apache.commons.codec.binary.Base64.encodeBase64String(encrypted);\n    byte[] original = cipher.doFinal(org.apache.commons.codec.binary.Base64.decodeBase64(encryptStr));\n\n    return new String(original);\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\nreturn null;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskFieldRandomly":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskFieldRandomly"},"ID":{"value":"DataMaskingLibrary.fnMaskFieldRandomly"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask an input field using the iEncryption Key.\nIt will randomly generate the encryption."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/ Create a random encryption # between 1000 and 100000\nint encryption = fnGetRandomNumber(1000,100000);\n\/\/ Mask the field.\nString oMaskedRowField = k2s_MaskField(iFieldValue,Integer.toString(encryption));\nString oMaskedField = null;\n\/\/ Check the globals flag to determine if to convert a single apostrophe to double apostrohe.\nif(REPLACE_APOSTROPHE_FLAG.equals(FLAG_ENABLED)){\n\t\/\/ Add supprot for apostrophes, replacing ' with '', e.g: O'Brian => O''Brian\n\toMaskedField = oMaskedRowField.replaceAll(\"'\",\"''\" );\n\t\n\t\/\/ Else - If apostrophe flag is set to 0\n} else {\n\n\t\/\/ Keep the original value.\n\toMaskedField = oMaskedRowField;\n}\n\n\/\/ Return the masked value.\nreturn oMaskedField;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iFieldValue","id":"fi.DataMaskingLibrary.fnMaskFieldRandomly.0","index":"0","dataType":"String"},"Comment":{"value":"The value of the field."}}},"OutputParams":{"Output":{"attr":{"name":"oMasedField","id":"fo.DataMaskingLibrary.fnMaskFieldRandomly.0","index":"0","dataType":"String"},"Comment":{"value":"The mased field value."}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldRandomly.k2function.xml","createFunctionStrForWS":"function fnMaskFieldRandomly($iFieldValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldRandomly.k2function.xml';\r\n\/\/ Create a random encryption # between 1000 and 100000\nint encryption = fnGetRandomNumber(1000,100000);\n\/\/ Mask the field.\nString oMaskedRowField = k2s_MaskField(iFieldValue,Integer.toString(encryption));\nString oMaskedField = null;\n\/\/ Check the globals flag to determine if to convert a single apostrophe to double apostrohe.\nif(REPLACE_APOSTROPHE_FLAG.equals(FLAG_ENABLED)){\n\t\/\/ Add supprot for apostrophes, replacing ' with '', e.g: O'Brian => O''Brian\n\toMaskedField = oMaskedRowField.replaceAll(\"'\",\"''\" );\n\t\n\t\/\/ Else - If apostrophe flag is set to 0\n} else {\n\n\t\/\/ Keep the original value.\n\toMaskedField = oMaskedRowField;\n}\n\n\/\/ Return the masked value.\nreturn oMaskedField;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldRandomly.k2function.xml';\r\nfunction fnMaskFieldRandomly($iFieldValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskFieldRandomly.k2function.xml';\r\n\/\/ Create a random encryption # between 1000 and 100000\nint encryption = fnGetRandomNumber(1000,100000);\n\/\/ Mask the field.\nString oMaskedRowField = k2s_MaskField(iFieldValue,Integer.toString(encryption));\nString oMaskedField = null;\n\/\/ Check the globals flag to determine if to convert a single apostrophe to double apostrohe.\nif(REPLACE_APOSTROPHE_FLAG.equals(FLAG_ENABLED)){\n\t\/\/ Add supprot for apostrophes, replacing ' with '', e.g: O'Brian => O''Brian\n\toMaskedField = oMaskedRowField.replaceAll(\"'\",\"''\" );\n\t\n\t\/\/ Else - If apostrophe flag is set to 0\n} else {\n\n\t\/\/ Keep the original value.\n\toMaskedField = oMaskedRowField;\n}\n\n\/\/ Return the masked value.\nreturn oMaskedField;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskSSN":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskSSN"},"ID":{"value":"DataMaskingLibrary.fnMaskSSN"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will choose a new masked SSN from the gcSSN based on the iSSN.\nThe function will transform the SSN into a number and run modulo on it based on the NUM_OF_RAND_SSN global.\nThe new value will be used as the key of the gcSSN for the new SSN."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if((iSSN != null && !iSSN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if a exist the loop which indicates the new SSN was accepted\n\t\t\tboolean notUsedSSN = true;\n\t\t\t\/\/Boolean isSSNExists = null;\n\t\t\tString existingSSN = null;\n\t\t\tString ssnHashCode = Integer.toString(iSSN.hashCode());\n\t\t\t\n\t\t\twhile(notUsedSSN && counter <= maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSSN = jds.get(\"existingSSN[\"+ssnHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new SSN was already generated before for this iSSN.\n\t\t\t\tif(existingSSN != null){\n\t\t\t\t\t\/\/if  yes, return the existing SSN\n\t\t\t\t\treturn  existingSSN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newSSN = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new SSN.\n\t\t\t\t\t\tnewSSN = fnGenerateRandomValidSSN(iSSN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the SSN using the provided encryption\n\t\t\t\t\t\tnewSSN = k2s_MaskField(iSSN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newSSN+\"]\",ssnHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing SSN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+ssnHashCode+\"]\",newSSN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedSSN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedSSN = false;\n\t\t\t\t\t\t\t\/\/ Return the new SSN.\n\t\t\t\t\t\t\treturn newSSN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask SSN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iSSN","id":"fi.DataMaskingLibrary.fnMaskSSN.0","index":"0","dataType":"String"},"Comment":{"value":"Social Security Number"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskSSN.1","index":"1","dataType":"String"},"Comment":{"value":"The Encryption to use to mask the SSN"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedSSN","id":"fo.DataMaskingLibrary.fnMaskSSN.0","index":"0","dataType":"String"},"Comment":{"value":"The masked SSN"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskSSN.k2function.xml","createFunctionStrForWS":"function fnMaskSSN($iSSN,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskSSN.k2function.xml';\r\nif((iSSN != null && !iSSN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if a exist the loop which indicates the new SSN was accepted\n\t\t\tboolean notUsedSSN = true;\n\t\t\t\/\/Boolean isSSNExists = null;\n\t\t\tString existingSSN = null;\n\t\t\tString ssnHashCode = Integer.toString(iSSN.hashCode());\n\t\t\t\n\t\t\twhile(notUsedSSN && counter <= maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSSN = jds.get(\"existingSSN[\"+ssnHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new SSN was already generated before for this iSSN.\n\t\t\t\tif(existingSSN != null){\n\t\t\t\t\t\/\/if  yes, return the existing SSN\n\t\t\t\t\treturn  existingSSN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newSSN = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new SSN.\n\t\t\t\t\t\tnewSSN = fnGenerateRandomValidSSN(iSSN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the SSN using the provided encryption\n\t\t\t\t\t\tnewSSN = k2s_MaskField(iSSN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newSSN+\"]\",ssnHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing SSN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+ssnHashCode+\"]\",newSSN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedSSN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedSSN = false;\n\t\t\t\t\t\t\t\/\/ Return the new SSN.\n\t\t\t\t\t\t\treturn newSSN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask SSN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskSSN.k2function.xml';\r\nfunction fnMaskSSN($iSSN,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskSSN.k2function.xml';\r\nif((iSSN != null && !iSSN.isEmpty())){\n\tredis.clients.jedis.Jedis jds =null;\n\ttry{\n\t\tint counter = 0;\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if a exist the loop which indicates the new SSN was accepted\n\t\t\tboolean notUsedSSN = true;\n\t\t\t\/\/Boolean isSSNExists = null;\n\t\t\tString existingSSN = null;\n\t\t\tString ssnHashCode = Integer.toString(iSSN.hashCode());\n\t\t\t\n\t\t\twhile(notUsedSSN && counter <= maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSSN = jds.get(\"existingSSN[\"+ssnHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new SSN was already generated before for this iSSN.\n\t\t\t\tif(existingSSN != null){\n\t\t\t\t\t\/\/if  yes, return the existing SSN\n\t\t\t\t\treturn  existingSSN;\n\t\t\t\t}else{\/\/Else, use the provided encyrption\n\t\t\t\t\tString newSSN = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Generate a new SSN.\n\t\t\t\t\t\tnewSSN = fnGenerateRandomValidSSN(iSSN);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the SSN using the provided encryption\n\t\t\t\t\t\tnewSSN = k2s_MaskField(iSSN,iEncryption);\t\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(\"maskedSSN[\"+newSSN+\"]\",ssnHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked SSN is already used by another existing SSN.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ Try to allocate it\n\t\t\t\t\t\tsuccess = jds.setnx(\"existingSSN[\"+ssnHashCode+\"]\",newSSN).intValue(); \n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedSSN to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedSSN = false;\n\t\t\t\t\t\t\t\/\/ Return the new SSN.\n\t\t\t\t\t\t\treturn newSSN;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask SSN.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskStaticValue":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskStaticValue"},"ID":{"value":"DataMaskingLibrary.fnMaskStaticValue"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function is used for masking a given field with a constant value.\nSimply returns the input value."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"return iStaticValue;"},"IsSyntaxValid":{"value":"false"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":{"attr":{"name":"iStaticValue","id":"fi.DataMaskingLibrary.fnMaskStaticValue.0","index":"0","dataType":"String"},"Comment":{"value":"A constant value that will be used for masking the field"}}},"OutputParams":{"Output":{"attr":{"name":"oMaskedValue","id":"fo.DataMaskingLibrary.fnMaskStaticValue.0","index":"0","dataType":"String"},"Comment":{"value":"Return the iStaticValue"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskStaticValue.k2function.xml","createFunctionStrForWS":"function fnMaskStaticValue($iStaticValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskStaticValue.k2function.xml';\r\nreturn iStaticValue;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskStaticValue.k2function.xml';\r\nfunction fnMaskStaticValue($iStaticValue){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskStaticValue.k2function.xml';\r\nreturn iStaticValue;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskUniqueValueInSharedMemory":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskUniqueValueInSharedMemory"},"ID":{"value":"DataMaskingLibrary.fnMaskUniqueValueInSharedMemory"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask an input value by either an input encryption or a random one.\nThe function supports the following inputs:\n[1] iValue: The value to mask.\n[2] iEncryption: Can be either the word \"Random\" or a number.\n   If the first, the function will generate a random number to be used as the encryption.\n   If the latter, the function will use the provided number as the encryption.\n[3] iSharedMemoryObject: Represents the name of the object as it will be stored in the Shared Memory."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\t\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/ Construct the \"masked\" Shared Memory Object.\n\t\t\tString maskedSharedMemoryObject = \"maskedSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM!=null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn  existingSM;\n\t\t\t\t}else{\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(maskedSharedMemoryObject+\"[\"+newValue+\"]\",inputHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked Value is already used by another existing Value.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\tsuccess = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedValue to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\t\/\/ Return the new Value.\n\t\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask unique value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\t\n\t}\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iValue","id":"fi.DataMaskingLibrary.fnMaskUniqueValueInSharedMemory.0","index":"0","dataType":"String"},"Comment":{"value":"The value to mask"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskUniqueValueInSharedMemory.1","index":"1","dataType":"String"},"Comment":{"value":"The Encryption to use to mask the EIN"}},{"attr":{"name":"iSharedMemoryObject","id":"fi.DataMaskingLibrary.fnMaskUniqueValueInSharedMemory.2","index":"2","dataType":"String"},"Comment":{"value":"The object that stores the Shared Memory for this value"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedValue","id":"fo.DataMaskingLibrary.fnMaskUniqueValueInSharedMemory.0","index":"0","dataType":"String"},"Comment":{"value":"The masked value"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskUniqueValueInSharedMemory.k2function.xml","createFunctionStrForWS":"function fnMaskUniqueValueInSharedMemory($iValue,$iEncryption,$iSharedMemoryObject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskUniqueValueInSharedMemory.k2function.xml';\r\nif(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\t\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/ Construct the \"masked\" Shared Memory Object.\n\t\t\tString maskedSharedMemoryObject = \"maskedSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM!=null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn  existingSM;\n\t\t\t\t}else{\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(maskedSharedMemoryObject+\"[\"+newValue+\"]\",inputHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked Value is already used by another existing Value.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\tsuccess = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedValue to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\t\/\/ Return the new Value.\n\t\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask unique value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\t\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskUniqueValueInSharedMemory.k2function.xml';\r\nfunction fnMaskUniqueValueInSharedMemory($iValue,$iEncryption,$iSharedMemoryObject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskUniqueValueInSharedMemory.k2function.xml';\r\nif(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\t\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/ Construct the \"masked\" Shared Memory Object.\n\t\t\tString maskedSharedMemoryObject = \"maskedSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM!=null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn  existingSM;\n\t\t\t\t}else{\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\t\t\t\tint success = jds.setnx(maskedSharedMemoryObject+\"[\"+newValue+\"]\",inputHashCode).intValue();\n\t\t\t\t\t\/\/ Checks if the new masked Value is already used by another existing Value.\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\tsuccess = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\t\/\/ If the allocation was succesfull, set $notUsedValue to false to exist the loop.\n\t\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\t\/\/ Return the new Value.\n\t\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask unique value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\t\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskValueInSharedMemory":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskValueInSharedMemory"},"ID":{"value":"DataMaskingLibrary.fnMaskValueInSharedMemory"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask an input value by either an input encryption or a random one.\nThe function supports the following inputs:\n[1] iValue: The value to mask.\n[2] iEncryption: Can be either the word \"Random\" or a number.\n   If the first, the function will generate a random number to be used as the encryption.\n   If the latter, the function will use the provided number as the encryption.\n[3] iSharedMemoryObject: Represents the name of the object as it will be stored in the Shared Memory."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM != null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn existingSM;\n\t\t\t\t}else{\/\/ Else - A Value was not generated for the iValue before.\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tint success = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedValue to false to exist the loop.\n\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\/\/ Return the new value.\n\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iValue","id":"fi.DataMaskingLibrary.fnMaskValueInSharedMemory.0","index":"0","dataType":"String"},"Comment":{"value":"The value to mask"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskValueInSharedMemory.1","index":"1","dataType":"String"},"Comment":{"value":"The Encryption to use to mask the EIN"}},{"attr":{"name":"iSharedMemoryObject","id":"fi.DataMaskingLibrary.fnMaskValueInSharedMemory.2","index":"2","dataType":"String"},"Comment":{"value":"The object that stores the Shared Memory for this value"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedValue","id":"fo.DataMaskingLibrary.fnMaskValueInSharedMemory.0","index":"0","dataType":"String"},"Comment":{"value":"The masked value"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskValueInSharedMemory.k2function.xml","createFunctionStrForWS":"function fnMaskValueInSharedMemory($iValue,$iEncryption,$iSharedMemoryObject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskValueInSharedMemory.k2function.xml';\r\nif(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM != null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn existingSM;\n\t\t\t\t}else{\/\/ Else - A Value was not generated for the iValue before.\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tint success = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedValue to false to exist the loop.\n\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\/\/ Return the new value.\n\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskValueInSharedMemory.k2function.xml';\r\nfunction fnMaskValueInSharedMemory($iValue,$iEncryption,$iSharedMemoryObject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskValueInSharedMemory.k2function.xml';\r\nif(iValue!=null && !iValue.isEmpty()){\n\tredis.clients.jedis.Jedis jds = null;\n\ttry{\n\t\t\/\/Get connection of Redis DB\n\t\tjds = getJedisConnection(SHARED_MEMORY_HOST_NAME,SHARED_MEMORY_HOST_PORT,SHARED_MEMORY_EXPIRATION);\n\t\tif(jds != null){\n\t\t\tint maxNumOfIter = Integer.parseInt(MAX_NUM_OF_ITERATION);\n\t\t\t\/\/ This parameter is used to determine if to exist the loop which indicates the new Value was accepted\n\t\t\tboolean notUsedValue = true;\n\t\t\tint counter = 0;\n\t\t\t\/\/ Construct the \"existing\" Shared Memory Object.\n\t\t\tString existingSharedMemoryObject = \"existingSharedMemory_\" + iSharedMemoryObject;\n\t\t\t\/\/Boolean isSMExists = null;\n\t\t\tString existingSM = null;\n\t\t\t\/\/hash code of the input\n\t\t\tString inputHashCode = Integer.toString(iValue.hashCode());\n\t\t\t\/\/ Runs in a loop until receive an unused new Value.\n\t\t\twhile(notUsedValue && counter<=maxNumOfIter){\n\t\t\t\tcounter++;\n\t\t\t\texistingSM = jds.get(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\");\n\t\t\t\t\/\/ Checks if a new Value was already generated before for this iValue.\n\t\t\t\tif(existingSM != null){\n\t\t\t\t\t\/\/ If yes, return the existing Value.\n\t\t\t\t\treturn existingSM;\n\t\t\t\t}else{\/\/ Else - A Value was not generated for the iValue before.\n\t\t\t\t\tString newValue = null;\n\t\t\t\t\t\/\/ If to create the encryption randomly.\n\t\t\t\t\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\t\t\t\t\/\/ Mask the Value using the random encryption\n\t\t\t\t\t\tnewValue = fnMaskFieldRandomly(iValue);\t\t\t\t\n\t\t\t\t\t} else {\/\/ Else - Use provided encryption.\n\t\t\t\t\t\t\/\/ Mask the Value using the provided encryption\n\t\t\t\t\t\tnewValue = k2s_MaskField(iValue,iEncryption);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tint success = jds.setnx(existingSharedMemoryObject+\"[\"+inputHashCode+\"]\",newValue).intValue();\n\t\t\t\t\tif(success == 1){\n\t\t\t\t\t\t\/\/ If the allocation was succesfull, set notUsedValue to false to exist the loop.\n\t\t\t\t\t\tnotUsedValue = false;\n\t\t\t\t\t\t\/\/ Return the new value.\n\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\tthrow new Exception(\"Could not mask value in shared memory.\",e.getCause());\n\t}finally{\n\t\tcloseJedisConnection(jds);\n\t}\n}\nreturn null;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskZipCode":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskZipCode"},"ID":{"value":"DataMaskingLibrary.fnMaskZipCode"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask a US ZIP code using the iEncryption Key.\nThe function will find the entry index of the Zip Code in the full list of all available US Zip Codes,\nThen it will add the Encryption value to the index value and modulo it based on the number of available US Zip Codes.\nThe new value is used as the index of the new Zip Code which will be returned."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/ Take only 5 digits US Zip Code (remove any PLUS4 values).\n\t\/\/ Strip any non-numeric values and take the first 5 digits.\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\n\tfinal String sql = \"SELECT DISTINCT zip FROM refZipCodes ORDER BY zip\";\n\t@SuppressWarnings(\"unchecked\")\n\tList<String> indexdList =(List<String>) getThreadGlobals(\"ZipCodes\");\n\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\tif (null == indexdList){\n\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, sql, null);\n\t\tif(results!=null){\n\t\t\t\/\/ Prepare a new array to hold the indexed ZIP Codes.\n\t\t\tindexdList = new ArrayList<String>();\n\t\t\n\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed array.\n\t\t\tint index=0;int counter = 0;\n\t\n\t\t\tfor(Object[] res:results){\n\t\t\t\tindexdList.add((String)res[0]);\n\t\t\t}\n\t\t\tsetThreadGlobals(\"ZipCodes\",indexdList);\n\t\t}\n\t}\n\t\n\tint zipIndex = indexdList.indexOf(zipNoPlus4);\n\tif(zipIndex < 0){\n\t\tzipIndex = 0;\t\n\t}\n\tint maskedZipIndex = 0;\n\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\/\/ If random encryption is required:\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% indexdList.size();\n\t\t\/\/ Use the hard-coded Encryption value.\n\t} else {\n\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption))% indexdList.size();\n\t}\n\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\treturn indexdList.get(maskedZipIndex);\n}\nreturn iZipCode;\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iZipCode","id":"fi.DataMaskingLibrary.fnMaskZipCode.0","index":"0","dataType":"String"},"Comment":{"value":"the zip code"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskZipCode.1","index":"1","dataType":"String"},"Comment":{"value":"The encryption used to mask the Zip Code"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedZipCode","id":"fo.DataMaskingLibrary.fnMaskZipCode.0","index":"0","dataType":"String"},"Comment":{"value":"The Masked Zip Code"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCode.k2function.xml","createFunctionStrForWS":"function fnMaskZipCode($iZipCode,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCode.k2function.xml';\r\nif(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/ Take only 5 digits US Zip Code (remove any PLUS4 values).\n\t\/\/ Strip any non-numeric values and take the first 5 digits.\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\n\tfinal String sql = \"SELECT DISTINCT zip FROM refZipCodes ORDER BY zip\";\n\t@SuppressWarnings(\"unchecked\")\n\tList<String> indexdList =(List<String>) getThreadGlobals(\"ZipCodes\");\n\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\tif (null == indexdList){\n\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, sql, null);\n\t\tif(results!=null){\n\t\t\t\/\/ Prepare a new array to hold the indexed ZIP Codes.\n\t\t\tindexdList = new ArrayList<String>();\n\t\t\n\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed array.\n\t\t\tint index=0;int counter = 0;\n\t\n\t\t\tfor(Object[] res:results){\n\t\t\t\tindexdList.add((String)res[0]);\n\t\t\t}\n\t\t\tsetThreadGlobals(\"ZipCodes\",indexdList);\n\t\t}\n\t}\n\t\n\tint zipIndex = indexdList.indexOf(zipNoPlus4);\n\tif(zipIndex < 0){\n\t\tzipIndex = 0;\t\n\t}\n\tint maskedZipIndex = 0;\n\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\/\/ If random encryption is required:\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% indexdList.size();\n\t\t\/\/ Use the hard-coded Encryption value.\n\t} else {\n\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption))% indexdList.size();\n\t}\n\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\treturn indexdList.get(maskedZipIndex);\n}\nreturn iZipCode;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCode.k2function.xml';\r\nfunction fnMaskZipCode($iZipCode,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCode.k2function.xml';\r\nif(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/ Take only 5 digits US Zip Code (remove any PLUS4 values).\n\t\/\/ Strip any non-numeric values and take the first 5 digits.\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\n\tfinal String sql = \"SELECT DISTINCT zip FROM refZipCodes ORDER BY zip\";\n\t@SuppressWarnings(\"unchecked\")\n\tList<String> indexdList =(List<String>) getThreadGlobals(\"ZipCodes\");\n\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\tif (null == indexdList){\n\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, sql, null);\n\t\tif(results!=null){\n\t\t\t\/\/ Prepare a new array to hold the indexed ZIP Codes.\n\t\t\tindexdList = new ArrayList<String>();\n\t\t\n\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed array.\n\t\t\tint index=0;int counter = 0;\n\t\n\t\t\tfor(Object[] res:results){\n\t\t\t\tindexdList.add((String)res[0]);\n\t\t\t}\n\t\t\tsetThreadGlobals(\"ZipCodes\",indexdList);\n\t\t}\n\t}\n\t\n\tint zipIndex = indexdList.indexOf(zipNoPlus4);\n\tif(zipIndex < 0){\n\t\tzipIndex = 0;\t\n\t}\n\tint maskedZipIndex = 0;\n\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\/\/ If random encryption is required:\n\tif(RANDOM_ENCRYPTION.equals(iEncryption.toUpperCase())){\n\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% indexdList.size();\n\t\t\/\/ Use the hard-coded Encryption value.\n\t} else {\n\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption))% indexdList.size();\n\t}\n\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\treturn indexdList.get(maskedZipIndex);\n}\nreturn iZipCode;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"fnMaskZipCodeByState":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"fnMaskZipCodeByState"},"ID":{"value":"DataMaskingLibrary.fnMaskZipCodeByState"},"Category":{"value":"DataMaskingLibrary"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"true"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will mask a US ZIP code using the iEncryption Key.\nThe function will find the entry index of the Zip Code in the full list of all available US Zip Codes,\nThen it will add the Encryption value to the index value and modulo it based on the number of available US Zip Codes.\nThe new value is used as the index of the new Zip Code which will be returned."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/remove all the non-digit characters from the zip code\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tif(modifiedIzipCode.length() >= 5){\n\t\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\t\/\/SQL Query for retrieving state based on the zipcode\n\t\tfinal String SELECT_STATE_SQL = \"Select Distinct state From refZipCodes Where Zip = \"+'\"'+zipNoPlus4+'\"';\n\t\n\t\tString state = (String)DBSelectValue(DB_INTERFACE_NAME, SELECT_STATE_SQL, null);\n\t\t\/\/SQL Query for retrieving state\n\t\tfinal String SELECT_STATE_ZIP_SQL = \"SELECT DISTINCT zip FROM refZipCodes Where state = \"+'\"'+state+'\"'+\" ORDER BY zip\";\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, List<String>> zipCodeStateMap = (Map<String, List<String>>)getThreadGlobals(\"ZipCodesByState\");\n\t\tList<String> zipCodeList = null;\n\t\t\/\/ Get the US State based on the zipNoPlus4.\n\t\tif(state!=null && !state.isEmpty() && !state.equalsIgnoreCase(\"NULL\")) {\n\t\t\tif(zipCodeStateMap == null) zipCodeStateMap = new HashMap<String, List<String>>();\n\t\t\t\n\t\t\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\t\t\tif(zipCodeStateMap.get(state)==null){\n\t\t\t\t\n\t\t\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\t\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, SELECT_STATE_ZIP_SQL, null);\n\t\t\t\tif(results != null){\n\t\t\t\t\t\/\/ Prepare a new list to hold the indexed ZIP Codes.\n\t\t\t\t\tzipCodeList = new ArrayList<String>();\n\n\t\t\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed list.\n\t\t\t\t\tfor(Object[] res:results){\n\t\t\t\t\t\tzipCodeList.add((String)res[0]);\n\t\t\t\t\t}\n\t\t\t\t\tzipCodeStateMap.put(state,zipCodeList);\n\t\t\t\t\tsetThreadGlobals(\"ZipCodesByState\",zipCodeStateMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tzipCodeList = zipCodeStateMap.get(state);\n\t\t\t\/\/ Get the index\/location of the Zip Code in the zipCodeList.\n\t\t\tint zipIndex =   zipCodeList.indexOf(zipNoPlus4);\n\t\t\tif(zipIndex < 0){\n\t\t\t\tzipIndex = 0;\n\t\t\t}\n\t\t\tint maskedZipIndex = 0;\n\t\t\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\t\t\/\/ If random encryption is required:\n\t\t\tif(RANDOM_ENCRYPTION.equalsIgnoreCase(iEncryption)){\n\t\t\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% zipCodeList.size();\n\t\t\t\/\/ Use the hard-coded Encryption value.\n\t\t\t} else {\n\t\t\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption)) % zipCodeList.size();\n\t\t\t}\n\t\t\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\t\t\tString oMaskedZipCode = zipCodeList.get(maskedZipIndex);\n\t\t\t\n\t\t\t\/\/ Return the new masked Zip Code.\n\t\t\treturn (oMaskedZipCode);\n\t\t}\n\t}\n}\nreturn iZipCode;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"iZipCode","id":"fi.DataMaskingLibrary.fnMaskZipCodeByState.0","index":"0","dataType":"String"},"Comment":{"value":"The zip code"}},{"attr":{"name":"iEncryption","id":"fi.DataMaskingLibrary.fnMaskZipCodeByState.1","index":"1","dataType":"String"},"Comment":{"value":"The encryption used to mask the Zip Code"}}]},"OutputParams":{"Output":{"attr":{"name":"oMaskedZipCode","id":"fo.DataMaskingLibrary.fnMaskZipCodeByState.0","index":"0","dataType":"String"},"Comment":{"value":"The masked Zip Code"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCodeByState.k2function.xml","createFunctionStrForWS":"function fnMaskZipCodeByState($iZipCode,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCodeByState.k2function.xml';\r\nif(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/remove all the non-digit characters from the zip code\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tif(modifiedIzipCode.length() >= 5){\n\t\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\t\/\/SQL Query for retrieving state based on the zipcode\n\t\tfinal String SELECT_STATE_SQL = \"Select Distinct state From refZipCodes Where Zip = \"+'\"'+zipNoPlus4+'\"';\n\t\n\t\tString state = (String)DBSelectValue(DB_INTERFACE_NAME, SELECT_STATE_SQL, null);\n\t\t\/\/SQL Query for retrieving state\n\t\tfinal String SELECT_STATE_ZIP_SQL = \"SELECT DISTINCT zip FROM refZipCodes Where state = \"+'\"'+state+'\"'+\" ORDER BY zip\";\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, List<String>> zipCodeStateMap = (Map<String, List<String>>)getThreadGlobals(\"ZipCodesByState\");\n\t\tList<String> zipCodeList = null;\n\t\t\/\/ Get the US State based on the zipNoPlus4.\n\t\tif(state!=null && !state.isEmpty() && !state.equalsIgnoreCase(\"NULL\")) {\n\t\t\tif(zipCodeStateMap == null) zipCodeStateMap = new HashMap<String, List<String>>();\n\t\t\t\n\t\t\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\t\t\tif(zipCodeStateMap.get(state)==null){\n\t\t\t\t\n\t\t\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\t\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, SELECT_STATE_ZIP_SQL, null);\n\t\t\t\tif(results != null){\n\t\t\t\t\t\/\/ Prepare a new list to hold the indexed ZIP Codes.\n\t\t\t\t\tzipCodeList = new ArrayList<String>();\n\n\t\t\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed list.\n\t\t\t\t\tfor(Object[] res:results){\n\t\t\t\t\t\tzipCodeList.add((String)res[0]);\n\t\t\t\t\t}\n\t\t\t\t\tzipCodeStateMap.put(state,zipCodeList);\n\t\t\t\t\tsetThreadGlobals(\"ZipCodesByState\",zipCodeStateMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tzipCodeList = zipCodeStateMap.get(state);\n\t\t\t\/\/ Get the index\/location of the Zip Code in the zipCodeList.\n\t\t\tint zipIndex =   zipCodeList.indexOf(zipNoPlus4);\n\t\t\tif(zipIndex < 0){\n\t\t\t\tzipIndex = 0;\n\t\t\t}\n\t\t\tint maskedZipIndex = 0;\n\t\t\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\t\t\/\/ If random encryption is required:\n\t\t\tif(RANDOM_ENCRYPTION.equalsIgnoreCase(iEncryption)){\n\t\t\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% zipCodeList.size();\n\t\t\t\/\/ Use the hard-coded Encryption value.\n\t\t\t} else {\n\t\t\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption)) % zipCodeList.size();\n\t\t\t}\n\t\t\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\t\t\tString oMaskedZipCode = zipCodeList.get(maskedZipIndex);\n\t\t\t\n\t\t\t\/\/ Return the new masked Zip Code.\n\t\t\treturn (oMaskedZipCode);\n\t\t}\n\t}\n}\nreturn iZipCode;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCodeByState.k2function.xml';\r\nfunction fnMaskZipCodeByState($iZipCode,$iEncryption){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/DataMaskingLibrary\/fnMaskZipCodeByState.k2function.xml';\r\nif(iZipCode!=null && !iZipCode.isEmpty()){\n\t\n\t\/\/remove all the non-digit characters from the zip code\n\tString modifiedIzipCode = iZipCode.replaceAll(\"[^\\\\d]\", \"\");\n\tif(modifiedIzipCode.length() >= 5){\n\t\tString zipNoPlus4 = modifiedIzipCode.substring(0,5);\n\t\t\/\/SQL Query for retrieving state based on the zipcode\n\t\tfinal String SELECT_STATE_SQL = \"Select Distinct state From refZipCodes Where Zip = \"+'\"'+zipNoPlus4+'\"';\n\t\n\t\tString state = (String)DBSelectValue('k2_ws:'.DB_INTERFACE_NAME, SELECT_STATE_SQL, null);\n\t\t\/\/SQL Query for retrieving state\n\t\tfinal String SELECT_STATE_ZIP_SQL = \"SELECT DISTINCT zip FROM refZipCodes Where state = \"+'\"'+state+'\"'+\" ORDER BY zip\";\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, List<String>> zipCodeStateMap = (Map<String, List<String>>)getThreadGlobals(\"ZipCodesByState\");\n\t\tList<String> zipCodeList = null;\n\t\t\/\/ Get the US State based on the zipNoPlus4.\n\t\tif(state!=null && !state.isEmpty() && !state.equalsIgnoreCase(\"NULL\")) {\n\t\t\tif(zipCodeStateMap == null) zipCodeStateMap = new HashMap<String, List<String>>();\n\t\t\t\n\t\t\t\/\/ Check if the list of ZIP Codes were already loaded into Global Memory.\n\t\t\tif(zipCodeStateMap.get(state)==null){\n\t\t\t\t\n\t\t\t\t\/\/ Get a list of all US based ZIP Codes.\n\t\t\t\tResultSetWrapper results = DBQuery(DB_INTERFACE_NAME, SELECT_STATE_ZIP_SQL, null);\n\t\t\t\tif(results != null){\n\t\t\t\t\t\/\/ Prepare a new list to hold the indexed ZIP Codes.\n\t\t\t\t\tzipCodeList = new ArrayList<String>();\n\n\t\t\t\t\t\/\/ Loop through the restuls array and organize all ZIP codes under an indexed list.\n\t\t\t\t\tfor(Object[] res:results){\n\t\t\t\t\t\tzipCodeList.add((String)res[0]);\n\t\t\t\t\t}\n\t\t\t\t\tzipCodeStateMap.put(state,zipCodeList);\n\t\t\t\t\tsetThreadGlobals(\"ZipCodesByState\",zipCodeStateMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tzipCodeList = zipCodeStateMap.get(state);\n\t\t\t\/\/ Get the index\/location of the Zip Code in the zipCodeList.\n\t\t\tint zipIndex =   zipCodeList.indexOf(zipNoPlus4);\n\t\t\tif(zipIndex < 0){\n\t\t\t\tzipIndex = 0;\n\t\t\t}\n\t\t\tint maskedZipIndex = 0;\n\t\t\t\/\/ Check if the encryption should be created using a random number or a hard-coded one.\n\t\t\t\/\/ If random encryption is required:\n\t\t\tif(RANDOM_ENCRYPTION.equalsIgnoreCase(iEncryption)){\n\t\t\t\t\/\/ Get the new ZipIndex by adding a random number between 1 and 100000 to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + fnGetRandomNumber(1,100000))% zipCodeList.size();\n\t\t\t\/\/ Use the hard-coded Encryption value.\n\t\t\t} else {\n\t\t\t\t\/\/ Get the new ZipIndex by adding the iEncryption to the ZipIndex\n\t\t\t\t\/\/ and using Modulo on the number of ZIP Codes available.\n\t\t\t\tmaskedZipIndex = (zipIndex + Integer.parseInt(iEncryption)) % zipCodeList.size();\n\t\t\t}\n\t\t\t\/\/ Retrieve the new Zip Code based on the maskedZipIndex.\n\t\t\tString oMaskedZipCode = zipCodeList.get(maskedZipIndex);\n\t\t\t\n\t\t\t\/\/ Return the new masked Zip Code.\n\t\t\treturn (oMaskedZipCode);\n\t\t}\n\t}\n}\nreturn iZipCode;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_breakDate":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_breakDate"},"ID":{"value":"Date.k2_breakDate"},"Category":{"value":"Date"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(dateStr == null || format == null)\n\treturn null;\n\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(format);\njava.util.Date date = dateFormat.parse(dateStr);\n\njava.util.Calendar calendar = java.util.Calendar.getInstance();\ncalendar.setTime(date);  \n\t\t\t\nObject[] arr = new Object[] {\n\tcalendar.get(java.util.Calendar.YEAR),\n\tcalendar.get(java.util.Calendar.MONTH) + 1,\n\tcalendar.get(java.util.Calendar.DAY_OF_MONTH),\n\tcalendar.get(java.util.Calendar.HOUR),\n\tcalendar.get(java.util.Calendar.MINUTE),\n\tcalendar.get(java.util.Calendar.SECOND),\n\tcalendar.get(java.util.Calendar.MILLISECOND),\n};\n\t\t\t\nreturn arr;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"dateStr","id":"fi.Date.k2_breakDate.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"format","id":"fi.Date.k2_breakDate.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":[{"attr":{"name":"year","id":"fo.Date.k2_breakDate.0","index":"0","dataType":"Integer"},"Comment":[]},{"attr":{"name":"month","id":"fo.Date.k2_breakDate.1","index":"1","dataType":"Integer"},"Comment":[]},{"attr":{"name":"day","id":"fo.Date.k2_breakDate.2","index":"2","dataType":"Integer"},"Comment":[]},{"attr":{"name":"hour","id":"fo.Date.k2_breakDate.3","index":"3","dataType":"Integer"},"Comment":[]},{"attr":{"name":"minute","id":"fo.Date.k2_breakDate.4","index":"4","dataType":"Integer"},"Comment":[]},{"attr":{"name":"second","id":"fo.Date.k2_breakDate.5","index":"5","dataType":"Integer"},"Comment":[]},{"attr":{"name":"fraction","id":"fo.Date.k2_breakDate.6","index":"6","dataType":"Integer"},"Comment":[]}]},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_breakDate.k2function.xml","createFunctionStrForWS":"function k2_breakDate($dateStr,$format){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_breakDate.k2function.xml';\r\nif(dateStr == null || format == null)\n\treturn null;\n\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(format);\njava.util.Date date = dateFormat.parse(dateStr);\n\njava.util.Calendar calendar = java.util.Calendar.getInstance();\ncalendar.setTime(date);  \n\t\t\t\nObject[] arr = new Object[] {\n\tcalendar.get(java.util.Calendar.YEAR),\n\tcalendar.get(java.util.Calendar.MONTH) + 1,\n\tcalendar.get(java.util.Calendar.DAY_OF_MONTH),\n\tcalendar.get(java.util.Calendar.HOUR),\n\tcalendar.get(java.util.Calendar.MINUTE),\n\tcalendar.get(java.util.Calendar.SECOND),\n\tcalendar.get(java.util.Calendar.MILLISECOND),\n};\n\t\t\t\nreturn arr;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_breakDate.k2function.xml';\r\nfunction k2_breakDate($dateStr,$format){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_breakDate.k2function.xml';\r\nif(dateStr == null || format == null)\n\treturn null;\n\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(format);\njava.util.Date date = dateFormat.parse(dateStr);\n\njava.util.Calendar calendar = java.util.Calendar.getInstance();\ncalendar.setTime(date);  \n\t\t\t\nObject[] arr = new Object[] {\n\tcalendar.get(java.util.Calendar.YEAR),\n\tcalendar.get(java.util.Calendar.MONTH) + 1,\n\tcalendar.get(java.util.Calendar.DAY_OF_MONTH),\n\tcalendar.get(java.util.Calendar.HOUR),\n\tcalendar.get(java.util.Calendar.MINUTE),\n\tcalendar.get(java.util.Calendar.SECOND),\n\tcalendar.get(java.util.Calendar.MILLISECOND),\n};\n\t\t\t\nreturn arr;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_currentDate":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_currentDate"},"ID":{"value":"Date.k2_currentDate"},"Category":{"value":"Date"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);"},"IsSyntaxValid":{"value":"true"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"current_date","id":"fo.Date.k2_currentDate.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDate.k2function.xml","createFunctionStrForWS":"function k2_currentDate(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDate.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDate.k2function.xml';\r\nfunction k2_currentDate(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDate.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_currentDateTime":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_currentDateTime"},"ID":{"value":"Date.k2_currentDateTime"},"Category":{"value":"Date"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);"},"IsSyntaxValid":{"value":"true"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"current_datetime","id":"fo.Date.k2_currentDateTime.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDateTime.k2function.xml","createFunctionStrForWS":"function k2_currentDateTime(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDateTime.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDateTime.k2function.xml';\r\nfunction k2_currentDateTime(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentDateTime.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_currentTimeStamp":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_currentTimeStamp"},"ID":{"value":"Date.k2_currentTimeStamp"},"Category":{"value":"Date"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss:S\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);"},"IsSyntaxValid":{"value":"true"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"current_timestamp","id":"fo.Date.k2_currentTimeStamp.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentTimeStamp.k2function.xml","createFunctionStrForWS":"function k2_currentTimeStamp(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentTimeStamp.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss:S\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentTimeStamp.k2function.xml';\r\nfunction k2_currentTimeStamp(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Date\/k2_currentTimeStamp.k2function.xml';\r\njava.text.DateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss:S\");\njava.util.Date date = new java.util.Date();\nreturn dateFormat.format(date);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_Createfile":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_Createfile"},"ID":{"value":"FileSystem.k2_Createfile"},"Category":{"value":"FileSystem"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will create a physical file based on an input string."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_fileContent==null || i_fileName==null || i_location==null)\n\treturn;\n\njava.nio.file.Path path = java.nio.file.Paths.get(i_location, i_fileName);\njava.nio.file.StandardOpenOption options = \n\ti_append == 1 ?\n\tjava.nio.file.StandardOpenOption.APPEND :\n\tjava.nio.file.StandardOpenOption.CREATE;\njava.nio.file.Files.write(\n\tpath,\n\ti_fileContent.getBytes(java.nio.charset.StandardCharsets.UTF_8),\n\toptions);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_fileContent","id":"fi.FileSystem.k2_Createfile.0","index":"0","dataType":"String"},"Comment":{"value":"The string to create the file based on"}},{"attr":{"name":"i_fileName","id":"fi.FileSystem.k2_Createfile.1","index":"1","dataType":"String"},"Comment":{"value":"The name of the file to be created"}},{"attr":{"name":"i_location","id":"fi.FileSystem.k2_Createfile.2","index":"2","dataType":"String"},"Comment":{"value":"The location where to place the file in"}},{"attr":{"name":"i_append","id":"fi.FileSystem.k2_Createfile.3","index":"3","dataType":"Integer"},"Comment":{"value":"If set to 1, the content of the i_fileContent will be appended to an existing file"}}]},"OutputParams":[],"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_Createfile.k2function.xml","createFunctionStrForWS":"function k2_Createfile($i_fileContent,$i_fileName,$i_location,$i_append){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_Createfile.k2function.xml';\r\nif(i_fileContent==null || i_fileName==null || i_location==null)\n\treturn;\n\njava.nio.file.Path path = java.nio.file.Paths.get(i_location, i_fileName);\njava.nio.file.StandardOpenOption options = \n\ti_append == 1 ?\n\tjava.nio.file.StandardOpenOption.APPEND :\n\tjava.nio.file.StandardOpenOption.CREATE;\njava.nio.file.Files.write(\n\tpath,\n\ti_fileContent.getBytes(java.nio.charset.StandardCharsets.UTF_8),\n\toptions);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_Createfile.k2function.xml';\r\nfunction k2_Createfile($i_fileContent,$i_fileName,$i_location,$i_append){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_Createfile.k2function.xml';\r\nif(i_fileContent==null || i_fileName==null || i_location==null)\n\treturn;\n\njava.nio.file.Path path = java.nio.file.Paths.get(i_location, i_fileName);\njava.nio.file.StandardOpenOption options = \n\ti_append == 1 ?\n\tjava.nio.file.StandardOpenOption.APPEND :\n\tjava.nio.file.StandardOpenOption.CREATE;\njava.nio.file.Files.write(\n\tpath,\n\ti_fileContent.getBytes(java.nio.charset.StandardCharsets.UTF_8),\n\toptions);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_find_files":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_find_files"},"ID":{"value":"FileSystem.k2_find_files"},"Category":{"value":"FileSystem"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"get the list of all files matching file_regExp in a specific path"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"java.nio.file.Path dir = java.nio.file.Paths.get(path);\nArrayList<String> al = new ArrayList<String>();\n\n\/\/ the Files class offers methods for validation\nif (!java.nio.file.Files.exists(dir)\n\t\t|| !java.nio.file.Files.isDirectory(dir)) {\n\tthrow new java.io.IOException(\"Directory does not exist: \"\n\t\t\t+ dir);\n}\n\njava.nio.file.PathMatcher pathMatcher;\npathMatcher = java.nio.file.FileSystems.getDefault().getPathMatcher(\"regex:\" + file_regExp);\n\ntry (java.nio.file.DirectoryStream<java.nio.file.Path> ds = java.nio.file.Files\n\t\t.newDirectoryStream(dir)) {\n\tjava.nio.file.Path pFile;\n\tfor (java.nio.file.Path p : ds) {\n\t\tpFile = p.getFileName();\n\t\tif (pathMatcher != null && pathMatcher.matches(pFile)) {\n\t\t\tal.add(pFile.toUri().getRawPath());\n\t\t}\n\t}\n}\n\nreturn al.toArray();"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"path","id":"fi.FileSystem.k2_find_files.0","index":"0","dataType":"String"},"Comment":{"value":"Full path"}},{"attr":{"name":"file_regExp","id":"fi.FileSystem.k2_find_files.1","index":"1","dataType":"String"},"Comment":{"value":"regular expression filter"}}]},"OutputParams":{"Output":{"attr":{"name":"files","id":"fo.FileSystem.k2_find_files.0","index":"0","dataType":"Object[]"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_find_files.k2function.xml","createFunctionStrForWS":"function k2_find_files($path,$file_regExp){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_find_files.k2function.xml';\r\njava.nio.file.Path dir = java.nio.file.Paths.get(path);\nArrayList<String> al = new ArrayList<String>();\n\n\/\/ the Files class offers methods for validation\nif (!java.nio.file.Files.exists(dir)\n\t\t|| !java.nio.file.Files.isDirectory(dir)) {\n\tthrow new java.io.IOException(\"Directory does not exist: \"\n\t\t\t+ dir);\n}\n\njava.nio.file.PathMatcher pathMatcher;\npathMatcher = java.nio.file.FileSystems.getDefault().getPathMatcher(\"regex:\" + file_regExp);\n\ntry (java.nio.file.DirectoryStream<java.nio.file.Path> ds = java.nio.file.Files\n\t\t.newDirectoryStream(dir)) {\n\tjava.nio.file.Path pFile;\n\tfor (java.nio.file.Path p : ds) {\n\t\tpFile = p.getFileName();\n\t\tif (pathMatcher != null && pathMatcher.matches(pFile)) {\n\t\t\tal.add(pFile.toUri().getRawPath());\n\t\t}\n\t}\n}\n\nreturn al.toArray();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_find_files.k2function.xml';\r\nfunction k2_find_files($path,$file_regExp){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/FileSystem\/k2_find_files.k2function.xml';\r\njava.nio.file.Path dir = java.nio.file.Paths.get(path);\nArrayList<String> al = new ArrayList<String>();\n\n\/\/ the Files class offers methods for validation\nif (!java.nio.file.Files.exists(dir)\n\t\t|| !java.nio.file.Files.isDirectory(dir)) {\n\tthrow new java.io.IOException(\"Directory does not exist: \"\n\t\t\t+ dir);\n}\n\njava.nio.file.PathMatcher pathMatcher;\npathMatcher = java.nio.file.FileSystems.getDefault().getPathMatcher(\"regex:\" + file_regExp);\n\ntry (java.nio.file.DirectoryStream<java.nio.file.Path> ds = java.nio.file.Files\n\t\t.newDirectoryStream(dir)) {\n\tjava.nio.file.Path pFile;\n\tfor (java.nio.file.Path p : ds) {\n\t\tpFile = p.getFileName();\n\t\tif (pathMatcher != null && pathMatcher.matches(pFile)) {\n\t\t\tal.add(pFile.toUri().getRawPath());\n\t\t}\n\t}\n}\n\nreturn al.toArray();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_abs":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_abs"},"ID":{"value":"Math.k2_abs"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Absolute value"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_num == null)\n\treturn null;\nreturn java.lang.Math.abs(i_num);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":{"attr":{"name":"i_num","id":"fi.Math.k2_abs.0","index":"0","dataType":"Double"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"o_num","id":"fo.Math.k2_abs.0","index":"0","dataType":"Object"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_abs.k2function.xml","createFunctionStrForWS":"function k2_abs($i_num){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_abs.k2function.xml';\r\nif(i_num == null)\n\treturn null;\nreturn java.lang.Math.abs(i_num);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_abs.k2function.xml';\r\nfunction k2_abs($i_num){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_abs.k2function.xml';\r\nif(i_num == null)\n\treturn null;\nreturn java.lang.Math.abs(i_num);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_ceil":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_ceil"},"ID":{"value":"Math.k2_ceil"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Round fractions up - Returns the next highest integer value by rounding up value if necessary."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(value == null)\n\treturn null;\nreturn java.lang.Math.ceil(value);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":{"attr":{"name":"value","id":"fi.Math.k2_ceil.0","index":"0","dataType":"Double"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"ceil","id":"fo.Math.k2_ceil.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_ceil.k2function.xml","createFunctionStrForWS":"function k2_ceil($value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_ceil.k2function.xml';\r\nif(value == null)\n\treturn null;\nreturn java.lang.Math.ceil(value);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_ceil.k2function.xml';\r\nfunction k2_ceil($value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_ceil.k2function.xml';\r\nif(value == null)\n\treturn null;\nreturn java.lang.Math.ceil(value);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_floor":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_floor"},"ID":{"value":"Math.k2_floor"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Round fractions down - returns the next lowest integer value by rounding down value if necessary."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(value == null)\n\treturn null;\nreturn java.lang.Math.floor(value);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":{"attr":{"name":"value","id":"fi.Math.k2_floor.0","index":"0","dataType":"Double"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"floor","id":"fo.Math.k2_floor.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_floor.k2function.xml","createFunctionStrForWS":"function k2_floor($value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_floor.k2function.xml';\r\nif(value == null)\n\treturn null;\nreturn java.lang.Math.floor(value);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_floor.k2function.xml';\r\nfunction k2_floor($value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_floor.k2function.xml';\r\nif(value == null)\n\treturn null;\nreturn java.lang.Math.floor(value);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_minus":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_minus"},"ID":{"value":"Math.k2_minus"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"minus one parameter from another to get a result"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_num1 == null || i_num2 == null)\n\treturn null;\nreturn i_num1 - i_num2;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_num1","id":"fi.Math.k2_minus.0","index":"0","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num2","id":"fi.Math.k2_minus.1","index":"1","dataType":"Double"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_num","id":"fo.Math.k2_minus.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_minus.k2function.xml","createFunctionStrForWS":"function k2_minus($i_num1,$i_num2){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_minus.k2function.xml';\r\nif(i_num1 == null || i_num2 == null)\n\treturn null;\nreturn i_num1 - i_num2;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_minus.k2function.xml';\r\nfunction k2_minus($i_num1,$i_num2){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_minus.k2function.xml';\r\nif(i_num1 == null || i_num2 == null)\n\treturn null;\nreturn i_num1 - i_num2;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_mod":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_mod"},"ID":{"value":"Math.k2_mod"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Modulo of a number"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_number == null || i_mod == null)\n\treturn null;\nreturn i_number % i_mod;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_number","id":"fi.Math.k2_mod.0","index":"0","dataType":"Integer"},"Comment":[]},{"attr":{"name":"i_mod","id":"fi.Math.k2_mod.1","index":"1","dataType":"Integer"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_mod_num","id":"fo.Math.k2_mod.0","index":"0","dataType":"Integer"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_mod.k2function.xml","createFunctionStrForWS":"function k2_mod($i_number,$i_mod){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_mod.k2function.xml';\r\nif(i_number == null || i_mod == null)\n\treturn null;\nreturn i_number % i_mod;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_mod.k2function.xml';\r\nfunction k2_mod($i_number,$i_mod){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_mod.k2function.xml';\r\nif(i_number == null || i_mod == null)\n\treturn null;\nreturn i_number % i_mod;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_multiply":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_multiply"},"ID":{"value":"Math.k2_multiply"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"k2_Multiply two numbers to get a result"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (i_num_1 == null || i_num_2 == null){\n\treturn null;\n}else{\n\treturn i_num_1 * i_num_2;\n}"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_num_1","id":"fi.Math.k2_multiply.0","index":"0","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num_2","id":"fi.Math.k2_multiply.1","index":"1","dataType":"Double"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_result","id":"fo.Math.k2_multiply.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_multiply.k2function.xml","createFunctionStrForWS":"function k2_multiply($i_num_1,$i_num_2){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_multiply.k2function.xml';\r\nif (i_num_1 == null || i_num_2 == null){\n\treturn null;\n}else{\n\treturn i_num_1 * i_num_2;\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_multiply.k2function.xml';\r\nfunction k2_multiply($i_num_1,$i_num_2){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_multiply.k2function.xml';\r\nif (i_num_1 == null || i_num_2 == null){\n\treturn null;\n}else{\n\treturn i_num_1 * i_num_2;\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_plus":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_plus"},"ID":{"value":"Math.k2_plus"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"sum up to five parameters to get a result"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (i_num1 == null) i_num1 = 0d;\nif (i_num2 == null) i_num2 = 0d;\nif (i_num3 == null) i_num3 = 0d;\nif (i_num4 == null) i_num4 = 0d;\nif (i_num5 == null) i_num5 = 0d;\n\nreturn i_num1 + i_num2 + i_num3 + i_num4 + i_num5;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_num1","id":"fi.Math.k2_plus.0","index":"0","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num2","id":"fi.Math.k2_plus.1","index":"1","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num3","id":"fi.Math.k2_plus.2","index":"2","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num4","id":"fi.Math.k2_plus.3","index":"3","dataType":"Double"},"Comment":[]},{"attr":{"name":"i_num5","id":"fi.Math.k2_plus.4","index":"4","dataType":"Double"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_num","id":"fo.Math.k2_plus.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_plus.k2function.xml","createFunctionStrForWS":"function k2_plus($i_num1,$i_num2,$i_num3,$i_num4,$i_num5){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_plus.k2function.xml';\r\nif (i_num1 == null) i_num1 = 0d;\nif (i_num2 == null) i_num2 = 0d;\nif (i_num3 == null) i_num3 = 0d;\nif (i_num4 == null) i_num4 = 0d;\nif (i_num5 == null) i_num5 = 0d;\n\nreturn i_num1 + i_num2 + i_num3 + i_num4 + i_num5;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_plus.k2function.xml';\r\nfunction k2_plus($i_num1,$i_num2,$i_num3,$i_num4,$i_num5){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_plus.k2function.xml';\r\nif (i_num1 == null) i_num1 = 0d;\nif (i_num2 == null) i_num2 = 0d;\nif (i_num3 == null) i_num3 = 0d;\nif (i_num4 == null) i_num4 = 0d;\nif (i_num5 == null) i_num5 = 0d;\n\nreturn i_num1 + i_num2 + i_num3 + i_num4 + i_num5;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_round":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_round"},"ID":{"value":"Math.k2_round"},"Category":{"value":"Math"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Rounds a float - Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default)."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (value==null || precision==null)\n      return null;\n\njava.math.BigDecimal bd = new java.math.BigDecimal(value);\nbd = bd.setScale(precision, java.math.RoundingMode.HALF_UP);\nreturn bd.doubleValue();"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"value","id":"fi.Math.k2_round.0","index":"0","dataType":"Double"},"Comment":[]},{"attr":{"name":"precision","id":"fi.Math.k2_round.1","index":"1","dataType":"Integer"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"round","id":"fo.Math.k2_round.0","index":"0","dataType":"Double"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_round.k2function.xml","createFunctionStrForWS":"function k2_round($value,$precision){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_round.k2function.xml';\r\nif (value==null || precision==null)\n      return null;\n\njava.math.BigDecimal bd = new java.math.BigDecimal(value);\nbd = bd.setScale(precision, java.math.RoundingMode.HALF_UP);\nreturn bd.doubleValue();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_round.k2function.xml';\r\nfunction k2_round($value,$precision){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Math\/k2_round.k2function.xml';\r\nif (value==null || precision==null)\n      return null;\n\njava.math.BigDecimal bd = new java.math.BigDecimal(value);\nbd = bd.setScale(precision, java.math.RoundingMode.HALF_UP);\nreturn bd.doubleValue();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_FolderParser":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_FolderParser"},"ID":{"value":"Parser.k2_FolderParser"},"Category":{"value":"Parser"},"FunctionLevel":{"value":"Project"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"A template function to be used as a root function for parser map.\nThe function scans a folder for delimited files based on a file name pattern, parses the files and generates a stream of records.\n"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\/\/ Check if function is running in debug mode\nboolean inDebug = inDebugMode();\n\/\/ If yes, look at the \"Debug\" folder\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\n\/\/ If no header or footer skip values provided, set them to 0\nif(skipHeaderRows == null || skipHeaderRows < 0) skipHeaderRows = 0;\nif(skipFooterRows == null || skipFooterRows < 0) skipFooterRows = 0;\n\n\/\/ Look at the location\/folder and search for the file\n\/\/ based on the file regex name\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\n\/\/ Ready the next file\nwhile ((stream = reader.getNextStream()) != null) {\t\n\t\/\/ Prepare an array to hold the next X rows to allow to handle the \"skip footer\" functionality\n\t\/\/ The Algorithem will create an array in a footer skip size and use it to hold\n\t\/\/ the last X rows, at each point, the function will return the (row number - X) row.\n\t\n\t\/\/ Define the size of the array\n\tint footerArraySize = skipFooterRows + 1;\n\n\t\/\/ Define the array\n\t@SuppressWarnings(\"unchecked\") \n\tMap<String, Object>[] mapArray = new HashMap[footerArraySize];\n\t\n\t\/\/ Parser the file\n\tcom.k2view.cdbms.shared.StreamParser parser = com.k2view.cdbms.shared.StreamParser.getInstance(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\n\t\/\/ Set a counter to indicate the row number we're working at.\n\tint rowCounter = 0;\n\tdo{\n\t\t\/\/ Get the next row from the file\n\t\tMap<String, Object> map = parser.lineFramer(null);\n\t\t\n\t\t\/\/ Check if you reached EOF\n\t\tif(map == null) { break; } else {; }\n\t\t\n\t\t\/\/ Increase the row number count\n\t\trowCounter++;\n\t\t\n\t\t\/\/ Check if to skip row becuase of the header skip parameter\n\t\tif(rowCounter <= skipHeaderRows) continue;\n\t\t\n\t\tint insertArray = (rowCounter - skipHeaderRows - 1)%(footerArraySize);\n\t\t\n\t\t\/\/ Insert row into array\n\t\tmapArray[insertArray] = map;\n\t\t\n\t\t\/\/ if row count is smaller than footer skip continue until you have\n\t\t\/\/ enough values to make sure the current line should not be skipped.\n\t\tif(rowCounter <= skipFooterRows + skipHeaderRows) continue;\n\t\t\n\t\t\/\/ Calcuate which row should be returned from the array\n\t\tint extractValue = (insertArray+1)%footerArraySize;\n\t\t\n\t\t\/\/ Return the row\n\t\tObject[] row = {mapArray[extractValue]};\n\t\t\n\t\tyield(row);\n\t\t\n\t} while (true);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"folderPath","id":"fi.Parser.k2_FolderParser.0","index":"0","dataType":"String"},"Comment":{"value":"the folder to scan for files"}},{"attr":{"name":"folderPathDebug","id":"fi.Parser.k2_FolderParser.1","index":"1","dataType":"String"},"Comment":{"value":"the folder to scan for files in debug mode"}},{"attr":{"name":"regexFilter","id":"fi.Parser.k2_FolderParser.2","index":"2","dataType":"String"},"Comment":{"value":"a Java regualr expression of file names to be parsed"}},{"attr":{"name":"recordDelimiter","id":"fi.Parser.k2_FolderParser.3","index":"3","dataType":"String"},"Comment":{"value":"a character to be used as a separator between records"}},{"attr":{"name":"fieldDelimiter","id":"fi.Parser.k2_FolderParser.4","index":"4","dataType":"String"},"Comment":{"value":"a character to be used as a separator between fields"}},{"attr":{"name":"enclosingChar","id":"fi.Parser.k2_FolderParser.5","index":"5","dataType":"String"},"Comment":{"value":"a character to be used to enclose fields"}},{"attr":{"name":"skipHeaderRows","id":"fi.Parser.k2_FolderParser.6","index":"6","dataType":"Integer"},"Comment":[]},{"attr":{"name":"skipFooterRows","id":"fi.Parser.k2_FolderParser.7","index":"7","dataType":"Integer"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"result","id":"fo.Parser.k2_FolderParser.0","index":"0","dataType":"Map<String,Object>"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderParser.k2function.xml","createFunctionStrForWS":"function k2_FolderParser($folderPath,$folderPathDebug,$regexFilter,$recordDelimiter,$fieldDelimiter,$enclosingChar,$skipHeaderRows,$skipFooterRows){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderParser.k2function.xml';\r\n\/\/ Check if function is running in debug mode\nboolean inDebug = inDebugMode();\n\/\/ If yes, look at the \"Debug\" folder\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\n\/\/ If no header or footer skip values provided, set them to 0\nif(skipHeaderRows == null || skipHeaderRows < 0) skipHeaderRows = 0;\nif(skipFooterRows == null || skipFooterRows < 0) skipFooterRows = 0;\n\n\/\/ Look at the location\/folder and search for the file\n\/\/ based on the file regex name\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\n\/\/ Ready the next file\nwhile ((stream = reader.getNextStream()) != null) {\t\n\t\/\/ Prepare an array to hold the next X rows to allow to handle the \"skip footer\" functionality\n\t\/\/ The Algorithem will create an array in a footer skip size and use it to hold\n\t\/\/ the last X rows, at each point, the function will return the (row number - X) row.\n\t\n\t\/\/ Define the size of the array\n\tint footerArraySize = skipFooterRows + 1;\n\n\t\/\/ Define the array\n\t@SuppressWarnings(\"unchecked\") \n\tMap<String, Object>[] mapArray = new HashMap[footerArraySize];\n\t\n\t\/\/ Parser the file\n\tcom.k2view.cdbms.shared.StreamParser parser = com.k2view.cdbms.shared.StreamParser.getInstance(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\n\t\/\/ Set a counter to indicate the row number we're working at.\n\tint rowCounter = 0;\n\tdo{\n\t\t\/\/ Get the next row from the file\n\t\tMap<String, Object> map = parser.lineFramer(null);\n\t\t\n\t\t\/\/ Check if you reached EOF\n\t\tif(map == null) { break; } else {; }\n\t\t\n\t\t\/\/ Increase the row number count\n\t\trowCounter++;\n\t\t\n\t\t\/\/ Check if to skip row becuase of the header skip parameter\n\t\tif(rowCounter <= skipHeaderRows) continue;\n\t\t\n\t\tint insertArray = (rowCounter - skipHeaderRows - 1)%(footerArraySize);\n\t\t\n\t\t\/\/ Insert row into array\n\t\tmapArray[insertArray] = map;\n\t\t\n\t\t\/\/ if row count is smaller than footer skip continue until you have\n\t\t\/\/ enough values to make sure the current line should not be skipped.\n\t\tif(rowCounter <= skipFooterRows + skipHeaderRows) continue;\n\t\t\n\t\t\/\/ Calcuate which row should be returned from the array\n\t\tint extractValue = (insertArray+1)%footerArraySize;\n\t\t\n\t\t\/\/ Return the row\n\t\tObject[] row = {mapArray[extractValue]};\n\t\t\n\t\tyield(row);\n\t\t\n\t} while (true);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderParser.k2function.xml';\r\nfunction k2_FolderParser($folderPath,$folderPathDebug,$regexFilter,$recordDelimiter,$fieldDelimiter,$enclosingChar,$skipHeaderRows,$skipFooterRows){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderParser.k2function.xml';\r\n\/\/ Check if function is running in debug mode\nboolean inDebug = inDebugMode();\n\/\/ If yes, look at the \"Debug\" folder\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\n\/\/ If no header or footer skip values provided, set them to 0\nif(skipHeaderRows == null || skipHeaderRows < 0) skipHeaderRows = 0;\nif(skipFooterRows == null || skipFooterRows < 0) skipFooterRows = 0;\n\n\/\/ Look at the location\/folder and search for the file\n\/\/ based on the file regex name\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\n\/\/ Ready the next file\nwhile ((stream = reader.getNextStream()) != null) {\t\n\t\/\/ Prepare an array to hold the next X rows to allow to handle the \"skip footer\" functionality\n\t\/\/ The Algorithem will create an array in a footer skip size and use it to hold\n\t\/\/ the last X rows, at each point, the function will return the (row number - X) row.\n\t\n\t\/\/ Define the size of the array\n\tint footerArraySize = skipFooterRows + 1;\n\n\t\/\/ Define the array\n\t@SuppressWarnings(\"unchecked\") \n\tMap<String, Object>[] mapArray = new HashMap[footerArraySize];\n\t\n\t\/\/ Parser the file\n\tcom.k2view.cdbms.shared.StreamParser parser = com.k2view.cdbms.shared.StreamParser.getInstance(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\n\t\/\/ Set a counter to indicate the row number we're working at.\n\tint rowCounter = 0;\n\tdo{\n\t\t\/\/ Get the next row from the file\n\t\tMap<String, Object> map = parser.lineFramer(null);\n\t\t\n\t\t\/\/ Check if you reached EOF\n\t\tif(map == null) { break; } else {; }\n\t\t\n\t\t\/\/ Increase the row number count\n\t\trowCounter++;\n\t\t\n\t\t\/\/ Check if to skip row becuase of the header skip parameter\n\t\tif(rowCounter <= skipHeaderRows) continue;\n\t\t\n\t\tint insertArray = (rowCounter - skipHeaderRows - 1)%(footerArraySize);\n\t\t\n\t\t\/\/ Insert row into array\n\t\tmapArray[insertArray] = map;\n\t\t\n\t\t\/\/ if row count is smaller than footer skip continue until you have\n\t\t\/\/ enough values to make sure the current line should not be skipped.\n\t\tif(rowCounter <= skipFooterRows + skipHeaderRows) continue;\n\t\t\n\t\t\/\/ Calcuate which row should be returned from the array\n\t\tint extractValue = (insertArray+1)%footerArraySize;\n\t\t\n\t\t\/\/ Return the row\n\t\tObject[] row = {mapArray[extractValue]};\n\t\t\n\t\tyield(row);\n\t\t\n\t} while (true);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_FolderStreamReader":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.2.0.0"},"Name":{"value":"k2_FolderStreamReader"},"ID":{"value":"Parser.k2_FolderStreamReader"},"Category":{"value":"Parser"},"FunctionLevel":{"value":"Product"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"RootFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"A template function to be used as a root function for parser map.\nThe function scans a folder for delimited files based on a file name pattern, parses the files and generates a stream of records.\n"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"boolean inDebug = inDebugMode();\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\nif(folderPath == null || folderPath.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Folder Path\");\n}\n\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(regexFilter == null || regexFilter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Regex Filter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\nwhile ((stream = reader.getNextStream()) != null) {\t\n\tObject[] row = null;\n\tdo {\n\t\trow = getStreamMap(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t    yield(row);\n\t} while (row !=null && row[0] != null);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"folderPath","id":"fi.Parser.k2_FolderStreamReader.0","index":"0","dataType":"String"},"Comment":{"value":"the folder to scan for files"}},{"attr":{"name":"folderPathDebug","id":"fi.Parser.k2_FolderStreamReader.1","index":"1","dataType":"String"},"Comment":{"value":"the folder to scan for files in debug mode"}},{"attr":{"name":"regexFilter","id":"fi.Parser.k2_FolderStreamReader.2","index":"2","dataType":"String"},"Comment":{"value":"a Java regualr expression of file names to be parsed"}},{"attr":{"name":"recordDelimiter","id":"fi.Parser.k2_FolderStreamReader.3","index":"3","dataType":"String"},"Comment":{"value":"a character to be used as a separator between records"}},{"attr":{"name":"fieldDelimiter","id":"fi.Parser.k2_FolderStreamReader.4","index":"4","dataType":"String"},"Comment":{"value":"a character to be used as a separator between fields"}},{"attr":{"name":"enclosingChar","id":"fi.Parser.k2_FolderStreamReader.5","index":"5","dataType":"String"},"Comment":{"value":"a character to be used to enclose fields"}}]},"OutputParams":{"Output":{"attr":{"name":"result","id":"fo.Parser.k2_FolderStreamReader.0","index":"0","dataType":"Map<String,Object>"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderStreamReader.k2function.xml","createFunctionStrForWS":"function k2_FolderStreamReader($folderPath,$folderPathDebug,$regexFilter,$recordDelimiter,$fieldDelimiter,$enclosingChar){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderStreamReader.k2function.xml';\r\nboolean inDebug = inDebugMode();\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\nif(folderPath == null || folderPath.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Folder Path\");\n}\n\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(regexFilter == null || regexFilter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Regex Filter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\nwhile ((stream = reader.getNextStream()) != null) {\t\n\tObject[] row = null;\n\tdo {\n\t\trow = getStreamMap(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t    yield(row);\n\t} while (row !=null && row[0] != null);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderStreamReader.k2function.xml';\r\nfunction k2_FolderStreamReader($folderPath,$folderPathDebug,$regexFilter,$recordDelimiter,$fieldDelimiter,$enclosingChar){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_FolderStreamReader.k2function.xml';\r\nboolean inDebug = inDebugMode();\nif (inDebug){\n\tfolderPath = folderPathDebug;\n}\n\nif(folderPath == null || folderPath.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Folder Path\");\n}\n\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(regexFilter == null || regexFilter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Regex Filter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nFolderReader reader = new FolderReader(folderPath, regexFilter);\nInputStreamReader stream = null;\n\nwhile ((stream = reader.getNextStream()) != null) {\t\n\tObject[] row = null;\n\tdo {\n\t\trow = getStreamMap(stream, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t    yield(row);\n\t} while (row !=null && row[0] != null);\n\t\n\t\/\/ Drop stream only in running mode\n\tif(!inDebug) { \/\/ Running mode\n\t\treader.dropStream(stream);\n\t}\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_StreamParserDelimited":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"4.0.0.5"},"Name":{"value":"k2_StreamParserDelimited"},"ID":{"value":"Parser.k2_StreamParserDelimited"},"Category":{"value":"Parser"},"FunctionLevel":{"value":"Product"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"RootFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nInputStream stream = getStream();\n\nif (stream != null) {\n\tObject[] row = null;\n\tInputStreamReader reader = new InputStreamReader(stream, java.nio.charset.StandardCharsets.UTF_8.name());\n\tdo {\n\t\tif( reader != null ) {\n\t\t\trow = getStreamMap(reader, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\t\tyield(row);\n\t\t}\n\t} while (row != null && row[0] != null);\n}\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"recordDelimiter","id":"fi.Parser.k2_StreamParserDelimited.0","index":"0","dataType":"String"},"Comment":{"value":"a character to be used as a separator between records"}},{"attr":{"name":"fieldDelimiter","id":"fi.Parser.k2_StreamParserDelimited.1","index":"1","dataType":"String"},"Comment":{"value":"a character to be used as a separator between fields"}},{"attr":{"name":"enclosingChar","id":"fi.Parser.k2_StreamParserDelimited.2","index":"2","dataType":"String"},"Comment":{"value":"a character to be used to enclose fields"}}]},"OutputParams":{"Output":{"attr":{"name":"result","id":"fo.Parser.k2_StreamParserDelimited.0","index":"0","dataType":"Map<String,Object>"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_StreamParserDelimited.k2function.xml","createFunctionStrForWS":"function k2_StreamParserDelimited($recordDelimiter,$fieldDelimiter,$enclosingChar){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_StreamParserDelimited.k2function.xml';\r\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nInputStream stream = getStream();\n\nif (stream != null) {\n\tObject[] row = null;\n\tInputStreamReader reader = new InputStreamReader(stream, java.nio.charset.StandardCharsets.UTF_8.name());\n\tdo {\n\t\tif( reader != null ) {\n\t\t\trow = getStreamMap(reader, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\t\tyield(row);\n\t\t}\n\t} while (row != null && row[0] != null);\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_StreamParserDelimited.k2function.xml';\r\nfunction k2_StreamParserDelimited($recordDelimiter,$fieldDelimiter,$enclosingChar){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_StreamParserDelimited.k2function.xml';\r\nif(enclosingChar == null || enclosingChar.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Enclosing Char\");\n}\n\nif(fieldDelimiter == null || fieldDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Field Delimiter\");\n}\n\nif(recordDelimiter == null || recordDelimiter.isEmpty()){\n\tthrow new IllegalArgumentException(\"Please Populate Mandatory Parameter: Record Delimiter\");\n}\n\nInputStream stream = getStream();\n\nif (stream != null) {\n\tObject[] row = null;\n\tInputStreamReader reader = new InputStreamReader(stream, java.nio.charset.StandardCharsets.UTF_8.name());\n\tdo {\n\t\tif( reader != null ) {\n\t\t\trow = getStreamMap(reader, enclosingChar.charAt(0), fieldDelimiter.charAt(0), recordDelimiter);\n\t\t\tyield(row);\n\t\t}\n\t} while (row != null && row[0] != null);\n}\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_UrlDecoder":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_UrlDecoder"},"ID":{"value":"Parser.k2_UrlDecoder"},"Category":{"value":"Parser"},"FunctionLevel":{"value":"Product"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Decodes a url-parameters String into a map."},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (map == null) \n\treturn new HashMap<>();\n\nif (key == null || key.equals(\"null\") || key.trim().isEmpty())\n\tthrow new IllegalArgumentException(\"Key should not be null or empty\");\n\ntry {\n\tString val = (String) map.remove(key);\n\tfinal Map<String, String> map2 = com.google.common.base.Splitter.on('&').trimResults().withKeyValueSeparator(\"=\").split(val);\n\ttry {\n\t\tfor (Map.Entry<String, String> entry : map2.entrySet()) {\n\t\t\tString nKey = java.net.URLDecoder.decode(entry.getKey(), \"UTF-8\");\n\t\t\tString nVal = java.net.URLDecoder.decode(entry.getValue(), \"UTF-8\");\n\t\t\tmap.put(nKey, nVal);\n\t\t}\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t\treturn new HashMap<>();\n\t}\n}\ncatch(Exception e) {\n\treturn map;\n}\t\t\nreturn map;\n"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":{"Input":[{"attr":{"name":"map","id":"fi.Parser.k2_UrlDecoder.0","index":"0","dataType":"Map<String,Object>"},"Comment":{"value":"the map that contains the input URL"}},{"attr":{"name":"key","id":"fi.Parser.k2_UrlDecoder.1","index":"1","dataType":"String"},"Comment":{"value":"the key of the entry in the map that contains the URL"}}]},"OutputParams":{"Output":{"attr":{"name":"map","id":"fo.Parser.k2_UrlDecoder.0","index":"0","dataType":"Map<String,Object>"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_UrlDecoder.k2function.xml","createFunctionStrForWS":"function k2_UrlDecoder($map,$key){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_UrlDecoder.k2function.xml';\r\nif (map == null) \n\treturn new HashMap<>();\n\nif (key == null || key.equals(\"null\") || key.trim().isEmpty())\n\tthrow new IllegalArgumentException(\"Key should not be null or empty\");\n\ntry {\n\tString val = (String) map.remove(key);\n\tfinal Map<String, String> map2 = com.google.common.base.Splitter.on('&').trimResults().withKeyValueSeparator(\"=\").split(val);\n\ttry {\n\t\tfor (Map.Entry<String, String> entry : map2.entrySet()) {\n\t\t\tString nKey = java.net.URLDecoder.decode(entry.getKey(), \"UTF-8\");\n\t\t\tString nVal = java.net.URLDecoder.decode(entry.getValue(), \"UTF-8\");\n\t\t\tmap.put(nKey, nVal);\n\t\t}\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t\treturn new HashMap<>();\n\t}\n}\ncatch(Exception e) {\n\treturn map;\n}\t\t\nreturn map;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_UrlDecoder.k2function.xml';\r\nfunction k2_UrlDecoder($map,$key){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Parser\/k2_UrlDecoder.k2function.xml';\r\nif (map == null) \n\treturn new HashMap<>();\n\nif (key == null || key.equals(\"null\") || key.trim().isEmpty())\n\tthrow new IllegalArgumentException(\"Key should not be null or empty\");\n\ntry {\n\tString val = (String) map.remove(key);\n\tfinal Map<String, String> map2 = com.google.common.base.Splitter.on('&').trimResults().withKeyValueSeparator(\"=\").split(val);\n\ttry {\n\t\tfor (Map.Entry<String, String> entry : map2.entrySet()) {\n\t\t\tString nKey = java.net.URLDecoder.decode(entry.getKey(), \"UTF-8\");\n\t\t\tString nVal = java.net.URLDecoder.decode(entry.getValue(), \"UTF-8\");\n\t\t\tmap.put(nKey, nVal);\n\t\t}\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t\treturn new HashMap<>();\n\t}\n}\ncatch(Exception e) {\n\treturn map;\n}\t\t\nreturn map;\n\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_concat5":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_concat5"},"ID":{"value":"String.k2_concat5"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Concatenate upto 5 strings with defined delimiter"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_delimiter == null)\n\ti_delimiter = \"\";\n\nArrayList<String> list = new ArrayList<String>();\nif(i_str1 != null)\n\tlist.add(i_str1);\nif(i_str2 != null)\n\tlist.add(i_str2);\nif(i_str3 != null)\n\tlist.add(i_str3);\nif(i_str4 != null)\n\tlist.add(i_str4);\nif(i_str5 != null)\n\tlist.add(i_str5);\n\nreturn org.apache.commons.lang3.StringUtils.join(list, i_delimiter);\n\n\/\/\n\/\/StringBuilder sb = new StringBuilder();\n\/\/\n\/\/if(i_str1 != null)\n\/\/\tsb.append(i_str1);\n\/\/if(i_str2 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str2);\n\/\/}\n\/\/if(i_str3 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str3);\n\/\/}\n\/\/if(i_str4 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str4);\n\/\/}\n\/\/if(i_str5 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str5);\n\/\/}\n\/\/\n\/\/return sb.toString();"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_str1","id":"fi.String.k2_concat5.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"i_str2","id":"fi.String.k2_concat5.1","index":"1","dataType":"String"},"Comment":[]},{"attr":{"name":"i_str3","id":"fi.String.k2_concat5.2","index":"2","dataType":"String"},"Comment":[]},{"attr":{"name":"i_str4","id":"fi.String.k2_concat5.3","index":"3","dataType":"String"},"Comment":[]},{"attr":{"name":"i_str5","id":"fi.String.k2_concat5.4","index":"4","dataType":"String"},"Comment":[]},{"attr":{"name":"i_delimiter","id":"fi.String.k2_concat5.5","index":"5","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_str1","id":"fo.String.k2_concat5.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_concat5.k2function.xml","createFunctionStrForWS":"function k2_concat5($i_str1,$i_str2,$i_str3,$i_str4,$i_str5,$i_delimiter){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_concat5.k2function.xml';\r\nif(i_delimiter == null)\n\ti_delimiter = \"\";\n\nArrayList<String> list = new ArrayList<String>();\nif(i_str1 != null)\n\tlist.add(i_str1);\nif(i_str2 != null)\n\tlist.add(i_str2);\nif(i_str3 != null)\n\tlist.add(i_str3);\nif(i_str4 != null)\n\tlist.add(i_str4);\nif(i_str5 != null)\n\tlist.add(i_str5);\n\nreturn org.apache.commons.lang3.StringUtils.join(list, i_delimiter);\n\n\/\/\n\/\/StringBuilder sb = new StringBuilder();\n\/\/\n\/\/if(i_str1 != null)\n\/\/\tsb.append(i_str1);\n\/\/if(i_str2 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str2);\n\/\/}\n\/\/if(i_str3 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str3);\n\/\/}\n\/\/if(i_str4 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str4);\n\/\/}\n\/\/if(i_str5 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str5);\n\/\/}\n\/\/\n\/\/return sb.toString();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_concat5.k2function.xml';\r\nfunction k2_concat5($i_str1,$i_str2,$i_str3,$i_str4,$i_str5,$i_delimiter){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_concat5.k2function.xml';\r\nif(i_delimiter == null)\n\ti_delimiter = \"\";\n\nArrayList<String> list = new ArrayList<String>();\nif(i_str1 != null)\n\tlist.add(i_str1);\nif(i_str2 != null)\n\tlist.add(i_str2);\nif(i_str3 != null)\n\tlist.add(i_str3);\nif(i_str4 != null)\n\tlist.add(i_str4);\nif(i_str5 != null)\n\tlist.add(i_str5);\n\nreturn org.apache.commons.lang3.StringUtils.join(list, i_delimiter);\n\n\/\/\n\/\/StringBuilder sb = new StringBuilder();\n\/\/\n\/\/if(i_str1 != null)\n\/\/\tsb.append(i_str1);\n\/\/if(i_str2 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str2);\n\/\/}\n\/\/if(i_str3 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str3);\n\/\/}\n\/\/if(i_str4 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str4);\n\/\/}\n\/\/if(i_str5 != null){\n\/\/\tif(sb.length()>0) sb.append(i_delimiter);\n\/\/\tsb.append(i_str5);\n\/\/}\n\/\/\n\/\/return sb.toString();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_ifNull":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_ifNull"},"ID":{"value":"String.k2_ifNull"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"when the input is null return the value entered, else return the input itself"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if (input==null){\n\treturn value;\n}\nelse{\n\treturn input;\n}"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"input","id":"fi.String.k2_ifNull.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"value","id":"fi.String.k2_ifNull.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"output","id":"fo.String.k2_ifNull.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ifNull.k2function.xml","createFunctionStrForWS":"function k2_ifNull($input,$value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ifNull.k2function.xml';\r\nif (input==null){\n\treturn value;\n}\nelse{\n\treturn input;\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ifNull.k2function.xml';\r\nfunction k2_ifNull($input,$value){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ifNull.k2function.xml';\r\nif (input==null){\n\treturn value;\n}\nelse{\n\treturn input;\n}\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_ltrim":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_ltrim"},"ID":{"value":"String.k2_ltrim"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Strip whitespace (or other characters) from the beginning of a string"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripStart(i_str, i_charList);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_str","id":"fi.String.k2_ltrim.0","index":"0","dataType":"String"},"Comment":{"value":"The input string"}},{"attr":{"name":"i_charList","id":"fi.String.k2_ltrim.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_str","id":"fo.String.k2_ltrim.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ltrim.k2function.xml","createFunctionStrForWS":"function k2_ltrim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ltrim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripStart(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ltrim.k2function.xml';\r\nfunction k2_ltrim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_ltrim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripStart(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_pad":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_pad"},"ID":{"value":"String.k2_pad"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"This function will pad the i_pad_string to i_str according to i_pad_length"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str == null || i_pad_length == null)\n\treturn null;\n\nif(i_padToRight == null)\n\ti_padToRight = true;\n\nString o_new_var;\nif(i_padToRight){\n\to_new_var = org.apache.commons.lang3.StringUtils.rightPad(i_str, i_pad_length, i_pad_string);\n}else{\n\to_new_var = org.apache.commons.lang3.StringUtils.leftPad(i_str, i_pad_length, i_pad_string);\n}\nreturn o_new_var;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_str","id":"fi.String.k2_pad.0","index":"0","dataType":"String"},"Comment":{"value":"The input string"}},{"attr":{"name":"i_pad_string","id":"fi.String.k2_pad.1","index":"1","dataType":"String"},"Comment":{"value":"The i_pad_string may be truncated if the required number of padding characters can't be evenly divided by the pad_string's length"}},{"attr":{"name":"i_pad_length","id":"fi.String.k2_pad.2","index":"2","dataType":"Integer"},"Comment":{"value":"If the value of i_pad_length is negative, less than, or equal to the length of the input string, no padding takes place."}},{"attr":{"name":"i_padToRight","id":"fi.String.k2_pad.3","index":"3","dataType":"Boolean"},"Comment":{"value":"Optional argument i_pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. If pad_type is not specified it is assumed to be STR_PAD_RIGHT"}}]},"OutputParams":{"Output":{"attr":{"name":"o_new_var","id":"fo.String.k2_pad.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_pad.k2function.xml","createFunctionStrForWS":"function k2_pad($i_str,$i_pad_string,$i_pad_length,$i_padToRight){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_pad.k2function.xml';\r\nif(i_str == null || i_pad_length == null)\n\treturn null;\n\nif(i_padToRight == null)\n\ti_padToRight = true;\n\nString o_new_var;\nif(i_padToRight){\n\to_new_var = org.apache.commons.lang3.StringUtils.rightPad(i_str, i_pad_length, i_pad_string);\n}else{\n\to_new_var = org.apache.commons.lang3.StringUtils.leftPad(i_str, i_pad_length, i_pad_string);\n}\nreturn o_new_var;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_pad.k2function.xml';\r\nfunction k2_pad($i_str,$i_pad_string,$i_pad_length,$i_padToRight){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_pad.k2function.xml';\r\nif(i_str == null || i_pad_length == null)\n\treturn null;\n\nif(i_padToRight == null)\n\ti_padToRight = true;\n\nString o_new_var;\nif(i_padToRight){\n\to_new_var = org.apache.commons.lang3.StringUtils.rightPad(i_str, i_pad_length, i_pad_string);\n}else{\n\to_new_var = org.apache.commons.lang3.StringUtils.leftPad(i_str, i_pad_length, i_pad_string);\n}\nreturn o_new_var;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_regexp_match":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_regexp_match"},"ID":{"value":"String.k2_regexp_match"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Perform a regular expression match"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(pattern == null || subject == null)\n\treturn false;\nreturn subject.matches(pattern);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"pattern","id":"fi.String.k2_regexp_match.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"subject","id":"fi.String.k2_regexp_match.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"ret","id":"fo.String.k2_regexp_match.0","index":"0","dataType":"Boolean"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_match.k2function.xml","createFunctionStrForWS":"function k2_regexp_match($pattern,$subject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_match.k2function.xml';\r\nif(pattern == null || subject == null)\n\treturn false;\nreturn subject.matches(pattern);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_match.k2function.xml';\r\nfunction k2_regexp_match($pattern,$subject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_match.k2function.xml';\r\nif(pattern == null || subject == null)\n\treturn false;\nreturn subject.matches(pattern);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_regexp_replace":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_regexp_replace"},"ID":{"value":"String.k2_regexp_replace"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Perform a regular expression search and replace"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(pattern == null || subject == null || replacement == null)\n\treturn null;\nreturn subject.replaceAll(pattern, replacement);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"pattern","id":"fi.String.k2_regexp_replace.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"replacement","id":"fi.String.k2_regexp_replace.1","index":"1","dataType":"String"},"Comment":[]},{"attr":{"name":"subject","id":"fi.String.k2_regexp_replace.2","index":"2","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"output","id":"fo.String.k2_regexp_replace.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_replace.k2function.xml","createFunctionStrForWS":"function k2_regexp_replace($pattern,$replacement,$subject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_replace.k2function.xml';\r\nif(pattern == null || subject == null || replacement == null)\n\treturn null;\nreturn subject.replaceAll(pattern, replacement);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_replace.k2function.xml';\r\nfunction k2_regexp_replace($pattern,$replacement,$subject){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_regexp_replace.k2function.xml';\r\nif(pattern == null || subject == null || replacement == null)\n\treturn null;\nreturn subject.replaceAll(pattern, replacement);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_rtrim":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_rtrim"},"ID":{"value":"String.k2_rtrim"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Strip whitespace (or other characters) from the end of a string"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripEnd(i_str, i_charList);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_str","id":"fi.String.k2_rtrim.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"i_charList","id":"fi.String.k2_rtrim.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_str","id":"fo.String.k2_rtrim.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_rtrim.k2function.xml","createFunctionStrForWS":"function k2_rtrim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_rtrim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripEnd(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_rtrim.k2function.xml';\r\nfunction k2_rtrim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_rtrim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.stripEnd(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_strpos":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_strpos"},"ID":{"value":"String.k2_strpos"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Find position of first occurrence of a string"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(str == null || substring == null)\n\treturn -1;\nreturn str.indexOf(substring);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"str","id":"fi.String.k2_strpos.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"substring","id":"fi.String.k2_strpos.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"pos","id":"fo.String.k2_strpos.0","index":"0","dataType":"Integer"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strpos.k2function.xml","createFunctionStrForWS":"function k2_strpos($str,$substring){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strpos.k2function.xml';\r\nif(str == null || substring == null)\n\treturn -1;\nreturn str.indexOf(substring);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strpos.k2function.xml';\r\nfunction k2_strpos($str,$substring){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strpos.k2function.xml';\r\nif(str == null || substring == null)\n\treturn -1;\nreturn str.indexOf(substring);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_strrpos":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_strrpos"},"ID":{"value":"String.k2_strrpos"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Find position of last occurrence of a char in a string"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(str == null || substring == null)\n\treturn -1;\nreturn str.lastIndexOf(substring);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"str","id":"fi.String.k2_strrpos.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"substring","id":"fi.String.k2_strrpos.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"pos","id":"fo.String.k2_strrpos.0","index":"0","dataType":"Integer"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strrpos.k2function.xml","createFunctionStrForWS":"function k2_strrpos($str,$substring){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strrpos.k2function.xml';\r\nif(str == null || substring == null)\n\treturn -1;\nreturn str.lastIndexOf(substring);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strrpos.k2function.xml';\r\nfunction k2_strrpos($str,$substring){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strrpos.k2function.xml';\r\nif(str == null || substring == null)\n\treturn -1;\nreturn str.lastIndexOf(substring);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_strtolower":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_strtolower"},"ID":{"value":"String.k2_strtolower"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Make a string lowercase"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str1 == null)\n\treturn null;\nreturn i_str1.toLowerCase();"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":{"attr":{"name":"i_str1","id":"fi.String.k2_strtolower.0","index":"0","dataType":"String"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"o_str1","id":"fo.String.k2_strtolower.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtolower.k2function.xml","createFunctionStrForWS":"function k2_strtolower($i_str1){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtolower.k2function.xml';\r\nif(i_str1 == null)\n\treturn null;\nreturn i_str1.toLowerCase();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtolower.k2function.xml';\r\nfunction k2_strtolower($i_str1){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtolower.k2function.xml';\r\nif(i_str1 == null)\n\treturn null;\nreturn i_str1.toLowerCase();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_strtoupper":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_strtoupper"},"ID":{"value":"String.k2_strtoupper"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Make a string uppercase"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str1 == null)\n\treturn null;\nreturn i_str1.toUpperCase();"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":{"attr":{"name":"i_str1","id":"fi.String.k2_strtoupper.0","index":"0","dataType":"String"},"Comment":[]}},"OutputParams":{"Output":{"attr":{"name":"o_str1","id":"fo.String.k2_strtoupper.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtoupper.k2function.xml","createFunctionStrForWS":"function k2_strtoupper($i_str1){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtoupper.k2function.xml';\r\nif(i_str1 == null)\n\treturn null;\nreturn i_str1.toUpperCase();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtoupper.k2function.xml';\r\nfunction k2_strtoupper($i_str1){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_strtoupper.k2function.xml';\r\nif(i_str1 == null)\n\treturn null;\nreturn i_str1.toUpperCase();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_trim":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_trim"},"ID":{"value":"String.k2_trim"},"Category":{"value":"String"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"Strip whitespace (or other characters) from the beginning and end of a string"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.strip(i_str, i_charList);"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_str","id":"fi.String.k2_trim.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"i_charList","id":"fi.String.k2_trim.1","index":"1","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_str","id":"fo.String.k2_trim.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_trim.k2function.xml","createFunctionStrForWS":"function k2_trim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_trim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.strip(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_trim.k2function.xml';\r\nfunction k2_trim($i_str,$i_charList){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/String\/k2_trim.k2function.xml';\r\nif(i_str == null)\n\treturn null;\nif(i_charList == null || i_charList.isEmpty())\n\ti_charList = \" \";\nreturn org.apache.commons.lang3.StringUtils.strip(i_str, i_charList);\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_amIMinNode":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_amIMinNode"},"ID":{"value":"Utilities.k2_amIMinNode"},"Category":{"value":"Utilities"},"FunctionLevel":{"value":"Product"},"FunctionType":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(inDebugMode()){\n\treturn true;\n}\n\n\/\/com.k2view.cdbms.cluster.ClusterUtils.getLiveNodes().iterator().next();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers());\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"ind","id":"fo.Utilities.k2_amIMinNode.0","index":"0","dataType":"Boolean"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode.k2function.xml","createFunctionStrForWS":"function k2_amIMinNode(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode.k2function.xml';\r\nif(inDebugMode()){\n\treturn true;\n}\n\n\/\/com.k2view.cdbms.cluster.ClusterUtils.getLiveNodes().iterator().next();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers());\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode.k2function.xml';\r\nfunction k2_amIMinNode(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode.k2function.xml';\r\nif(inDebugMode()){\n\treturn true;\n}\n\n\/\/com.k2view.cdbms.cluster.ClusterUtils.getLiveNodes().iterator().next();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers());\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_amIMinNode_multi_dc":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema","version":"3.2.0.1"},"Name":{"value":"k2_amIMinNode_multi_dc"},"ID":{"value":"Utilities.k2_amIMinNode_multi_dc"},"Category":{"value":"Utilities"},"FunctionLevel":{"value":"Product"},"FunctionType":{"value":"RegularFunction"},"FunctionType2":{"value":"RegularFunction"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"DecisionFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(inDebugMode()){\n\treturn true;\n}\n\nString dcName = com.k2view.cdbms.cluster.ClusterUtils.getDCName();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers(dcName));\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nif(nodes.size()==0)\n\treturn false;\n\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;"},"IsSyntaxValid":{"value":"true"},"IsRootFunction":{"value":"false"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"ind","id":"fo.Utilities.k2_amIMinNode_multi_dc.0","index":"0","dataType":"Boolean"}}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode_multi_dc.k2function.xml","createFunctionStrForWS":"function k2_amIMinNode_multi_dc(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode_multi_dc.k2function.xml';\r\nif(inDebugMode()){\n\treturn true;\n}\n\nString dcName = com.k2view.cdbms.cluster.ClusterUtils.getDCName();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers(dcName));\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nif(nodes.size()==0)\n\treturn false;\n\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode_multi_dc.k2function.xml';\r\nfunction k2_amIMinNode_multi_dc(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_amIMinNode_multi_dc.k2function.xml';\r\nif(inDebugMode()){\n\treturn true;\n}\n\nString dcName = com.k2view.cdbms.cluster.ClusterUtils.getDCName();\nList<java.net.InetAddress> nodes = new ArrayList<>(com.k2view.cdbms.cluster.ClusterUtils.getLiveMembers(dcName));\nCollections.sort(nodes, Comparator.comparing((java.net.InetAddress arr) -> arr.toString()));\nif(nodes.size()==0)\n\treturn false;\n\nString aNodeId =  org.apache.cassandra.gms.Gossiper.instance.getHostId(nodes.get(0)).toString();\nString nodeID = com.k2view.cdbms.cluster.ClusterUtils.getNodeID().toString();\n\nif (nodeID.equals(aNodeId))\n\treturn true;\nelse\n\treturn false;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_getInstanceID":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_getInstanceID"},"ID":{"value":"Utilities.k2_getInstanceID"},"Category":{"value":"Utilities"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":{"value":"get the current instance ID"},"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"return getInstanceID();"},"IsSyntaxValid":{"value":"true"},"InputParams":[],"OutputParams":{"Output":{"attr":{"name":"instanceID","id":"fo.Utilities.k2_getInstanceID.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_getInstanceID.k2function.xml","createFunctionStrForWS":"function k2_getInstanceID(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_getInstanceID.k2function.xml';\r\nreturn getInstanceID();\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_getInstanceID.k2function.xml';\r\nfunction k2_getInstanceID(){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_getInstanceID.k2function.xml';\r\nreturn getInstanceID();\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"},"k2_IF":{"attr":{"xmlns:xsi":"http:\/\/www.w3.org\/2001\/XMLSchema-instance","xmlns:xsd":"http:\/\/www.w3.org\/2001\/XMLSchema"},"Name":{"value":"k2_IF"},"ID":{"value":"Utilities.k2_IF"},"Category":{"value":"Utilities"},"FunctionLevel":{"value":"Product"},"RegisterAsLuDbFunction":{"value":"false"},"SaveToDLUR":{"value":"false"},"ApiFunction":{"value":"false"},"RequiresLuReference":{"value":"false"},"Desc":[],"Auther":{"attr":{"name":"","id":""}},"Language":{"value":"Java"},"FunctionBody":{"value":"if(i_var == null || i_var_check_val == null)\n\treturn null;\n\nString o_val;\nif (i_var.equals(i_var_check_val)){\n\to_val=i_var_true_val;\n}else{\n\to_val=i_var_false_val;\n}\nreturn o_val;"},"IsSyntaxValid":{"value":"true"},"InputParams":{"Input":[{"attr":{"name":"i_var","id":"fi.Utilities.k2_IF.0","index":"0","dataType":"String"},"Comment":[]},{"attr":{"name":"i_var_check_val","id":"fi.Utilities.k2_IF.1","index":"1","dataType":"String"},"Comment":[]},{"attr":{"name":"i_var_true_val","id":"fi.Utilities.k2_IF.2","index":"2","dataType":"String"},"Comment":[]},{"attr":{"name":"i_var_false_val","id":"fi.Utilities.k2_IF.3","index":"3","dataType":"String"},"Comment":[]}]},"OutputParams":{"Output":{"attr":{"name":"o_val","id":"fo.Utilities.k2_IF.0","index":"0","dataType":"String"},"Comment":[]}},"fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_IF.k2function.xml","createFunctionStrForWS":"function k2_IF($i_var,$i_var_check_val,$i_var_true_val,$i_var_false_val){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_IF.k2function.xml';\r\nif(i_var == null || i_var_check_val == null)\n\treturn null;\n\nString o_val;\nif (i_var.equals(i_var_check_val)){\n\to_val=i_var_true_val;\n}else{\n\to_val=i_var_false_val;\n}\nreturn o_val;\n$GLOBALS['k2']['objectName'] = '';\r\n}","createFunctionStr":"$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_IF.k2function.xml';\r\nfunction k2_IF($i_var,$i_var_check_val,$i_var_true_val,$i_var_false_val){\n$GLOBALS['k2']['objectName'] = 'C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Functions\/Utilities\/k2_IF.k2function.xml';\r\nif(i_var == null || i_var_check_val == null)\n\treturn null;\n\nString o_val;\nif (i_var.equals(i_var_check_val)){\n\to_val=i_var_true_val;\n}else{\n\to_val=i_var_false_val;\n}\nreturn o_val;\n$GLOBALS['k2']['objectName'] = '';\r\n}\r\n$GLOBALS['k2']['objectName'] = '';","scope":"shared"}},"cdbmsFunctions":null,"ludbEntityInclusions":null,"ludbObjects":null,"ludbTablesAndViews":null,"ludbXMLFullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/LogicalUnits\/k2_ws\/vdb.k2vdb.xml","ludbRootObjectName":null,"ludbRootInfoArray":null,"ludbIVVs":null,"ludbVCs":null,"ludbTables":null,"ludbGCs":null,"ludbReferences":null,"ludbEnrichmentItems":[],"ludbLogicalRelations":[],"ludbPhisicalRelations":null,"ludbOppositePhisicalRelations":[],"dbInterfaces":{"k2_ws:cass_local":{"connPool":null,"stagingDB":"false","dbType":"cassandra","dbHost":"localhost","dbPort":"9042","dbUser":"admin","dbPasswordEncrypted":"Qjp9Tllji8W8K4XvyFFiOaGhq5WZSWvHcGshMfnPV5Q=:76LBlYZPVZvu9g9F85vVREhj52+oamuXWSoZWXYcGlw=","dbScheme":null,"k2StudioObjectName":"k2_ws:cass_local","fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Interfaces\/Databases\/cass_local.k2dbConn.xml","dbLink":null,"connString":"jdbc:cassandra:\/\/localhost:9042?consistency=QUORUM&loadbalancing=com.k2view.cdbms.policy.SingleNodePolicy('localhost')","maxConnectionsNumber":"60","autoCommit":null,"logOnError":true,"columnClosureStartSign":"\"","columnClosureEndSign":"\"","bindingVariableSign":":","bindingRequiresColumn":"name","bindingValuesArrayStartPos":"1","aliasAfterInnerQuery":"AS ALIAS1","bindingVariableSuffixStr":"","preparedSqlStatementsArray":null,"lastErrorMessage":null},"k2_ws:dbOracle":{"dbType":"oracle","dbHost":"192.168.232.1","dbPort":"1521","dbUser":"SYSTEM","dbPasswordEncrypted":"6ZEZJsrRrUkDCpeBjpe6UqCPa3M+Nk\/XOsUhd4cBn6U=:BeZa9CKvwflYiSWtyR5qORS\/c0bn560DvU7FWFsWtmg=","dbScheme":"orcl","k2StudioObjectName":"k2_ws:dbOracle","fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Interfaces\/Databases\/dbOracle.k2dbConn.xml","dbLink":null,"connString":"jdbc:oracle:thin:@192.168.232.1:1521\/orcl","maxConnectionsNumber":"60","autoCommit":null,"logOnError":true,"columnClosureStartSign":"\"","columnClosureEndSign":"\"","bindingVariableSign":":","bindingRequiresColumn":"name","bindingValuesArrayStartPos":"1","aliasAfterInnerQuery":"","bindingVariableSuffixStr":"","preparedSqlStatementsArray":null,"lastErrorMessage":null},"k2_ws:dvdRental":{"dbType":"postgresql","dbHost":"192.168.232.1","dbPort":"5432","dbUser":"postgres","dbPasswordEncrypted":"YiTPEpq7GkbK95O6awnc91ZL46Lkqiw8CWZIrdNB9RI=:EPhrWPtcoyW1vtKa6n5iPXi22a9SSaMJN5nVnjykkos=","dbScheme":"dvdRental","k2StudioObjectName":"k2_ws:dvdRental","fullPathToFile":"C:\/Users\/nirk\/Documents\/K2View Fabric Studio\/Projects\/DVD\/Implementation\/SharedObjects\/Interfaces\/Databases\/dvdRental.k2dbConn.xml","dbLink":null,"connString":"jdbc:postgresql:\/\/192.168.232.1:5432\/dvdRental?stringtype=unspecified","maxConnectionsNumber":"60","autoCommit":null,"logOnError":true,"columnClosureStartSign":"\"","columnClosureEndSign":"\"","bindingVariableSign":"$","bindingRequiresColumn":"number","bindingValuesArrayStartPos":"0","aliasAfterInnerQuery":"AS ALIAS1","bindingVariableSuffixStr":"::text","preparedSqlStatementsArray":null,"lastErrorMessage":null}},"allLudbColumnsByID":[],"allLudbColumnsByKey":[],"syncMethod":"None","refreshObjectContentEvery":0,"decisionFunctionName":null,"deleteEntityIfNotExists":false,"ludbEntityIDColumnObject":null,"entityModifiedAsPartOfLazyUpdate":false,"cdbmsManager":null}